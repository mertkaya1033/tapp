{"version":3,"sources":["libs/api-utils.ts","api/actions/users.ts","api/actions/utils.ts","api/mockAPI/utils.js","api/actions/sessions.ts","api/actions/positions.ts","api/actions/assignments.ts","api/actions/init.ts","api/actions/applicants.ts","libs/import-export/data-to-file.ts","libs/import-export/undefinedToNull.ts","libs/import-export/prepare-minimal.ts","libs/import-export/prepare-spreadsheet.ts","libs/import-export/prepare-data.ts","libs/import-export/spreadsheet-row-mapper.ts","libs/import-export/match-by-utorid-or-name.ts","libs/import-export/validate.ts","libs/import-export/normalize-import.ts","libs/import-export/prepare-full.ts","libs/import-export/normalize-ddah-import.ts","api/actions/instructors.ts","api/actions/contract_templates.ts","libs/urls.ts","api/actions/ddahs.ts","api/actions/status.ts","api/actions/applications.ts","api/actions/postings.ts","api/actions/wage_chunks.ts","api/actions/globals.ts","libs/schema.ts","api/defs/prop-types.ts","api/mockAPI/data.js","api/mockAPI/sessions.ts","api/mockAPI/contract_templates.js","api/mockAPI/active_user.js","api/mockAPI/instructors.js","api/mockAPI/positions.js","api/mockAPI/wage_chunks.js","api/mockAPI/applications.js","api/mockAPI/applicants.js","api/mockAPI/assignments.js","api/mockAPI/debug.js","api/mockAPI/ddahs.js","api/mockAPI/reportingTags.ts","api/mockAPI/postings.ts","api/mockAPI/public-routes.js","api/mockAPI/index.js","views/dev_frame/mockAPI.js","views/dev_frame/active-user-switch.js","mock_data/index.ts","views/dev_frame/load-mock-data.tsx","views/dev_frame/index.js","api/actions/offers.ts","api/defs/doc-generation.ts","libs/thunk-dispatch.ts","api/actions/errors.ts"],"names":["API_URL","FETCH_INIT","credentials","headers","ApiError","resp","errorMessage","message","response","status","Error","captureStackTrace","ApiFetchError","path","statusText","_ensurePath","startsWith","_processFetchResponse","a","json","payload","apiGET","omitPrefix","fetch","method","apiPOST","body","JSON","stringify","fetchActiveUserSuccess","actionFactory","FETCH_ACTIVE_USER_SUCCESS","fetchUsersSuccess","FETCH_USERS_SUCCESS","upsertUserSuccess","UPSERT_USERS_SUCCESS","setActiveUserRoleSuccess","SET_ACTIVE_USER_ROLE_SUCCESS","fetchActiveUser","validatedApiDispatcher","name","description","onErrorDispatch","e","fetchError","toString","dispatcher","dispatch","getState","data","currentRole","activeRoleSelector","roles","includes","setActiveUserRole","fetchUsers","user","upsertError","role","deleteError","options","skipInit","initFromStage","startAfterStage","debugOnlyFetchUsers","debugOnlyUpsertUser","debugOnlySetActiveUser","localStoreSelector","usersReducer","_localStoreSelector","usersSelector","state","users","activeUserSelector","active_user","active_role","arrayToHash","l","Array","isArray","ret","d","id","type","splitObjByProps","obj","props","preserved","removed","prop","Object","hasOwnProperty","call","hasSubIdField","key","flattenIdFactory","inPropName","outPropName","hasSubField","filtered","length","hasSubIdFieldArray","map","x","args","statusId","uuid","apiInteractionStart","console","warn","Function","apiError","apiInteractionEnd","sum","numbers","num","splitDateRangeAtNewYear","start_date","end_date","Date","december","getFullYear","january","toISOString","getUnusedId","ids","filter","max","Math","isNaN","round","random","find","s","findAllById","deleteInArray","splice","indexOf","getAttributesCheckMessage","required","unique","entries","requirements","MockAPIController","ownData","this","query","rawFind","utorid","newId","newItem","push","value","item","validateProp","updateIfFound","validateNew","create","wageChunkArrayToStartAndEndDates","wageChunks","startDates","endDates","sort","joinWithConjunction","items","join","formatInstructorsContact","instructors","first_name","last_name","email","wageChunkArrayToPayPeriodDescription","rateData","wageChunk","rate","hours","min","values","toLocaleDateString","month","day","year","filterNullProps","errorUnlessRole","targetRule","base64abc","split","base64codes","Uint8Array","i","getBase64Code","charCode","code","bytesToBase64","bytes","result","base64ToBytes","str","index","buffer","missingOctets","endsWith","n","j","charCodeAt","subarray","base64decode","decoder","TextDecoder","decode","forEach","char","fetchSessionsSuccess","FETCH_SESSIONS_SUCCESS","fetchOneSessionSuccess","FETCH_ONE_SESSION_SUCCESS","upsertOneSessionSuccess","UPSERT_ONE_SESSION_SUCCESS","deleteOneSessionSuccess","DELETE_ONE_SESSION_SUCCESS","setActiveSessionAction","SET_ACTIVE_SESSION","fetchSessions","upsertSession","deleteSession","setActiveSession","currentActiveSession","activeSessionSelector","sessionsReducer","sessionsSelector","createSelector","_modelData","activeSession","fetchPositionsSuccess","FETCH_POSITIONS_SUCCESS","fetchOnePositionSuccess","FETCH_ONE_POSITION_SUCCESS","upsertOnePositionSuccess","UPSERT_ONE_POSITION_SUCCESS","deleteOnePositionSuccess","DELETE_ONE_POSITION_SUCCESS","MissingActiveSessionError","fetchPositions","activeSessionId","instructorsToInstructorIds","contractTemplateToContractTemplateId","prepForApi","upsertPosition","deletePosition","exportPositions","formatter","format","positions","positionsSelector","upsertPositions","dispatchers","position","Promise","all","positionsReducer","_positionsSelector","instructorsSelector","contractTemplatesSelector","contractTemplates","instructorsById","contractTemplatesById","instructor_ids","contract_template_id","rest","contract_template","fetchAssignmentsSuccess","FETCH_ASSIGNMENTS_SUCCESS","fetchOneAssignmentSuccess","FETCH_ONE_ASSIGNMENT_SUCCESS","upsertOneAssignmentSuccess","UPSERT_ONE_ASSIGNMENT_SUCCESS","deleteOneAssignmentSuccess","DELETE_ONE_ASSIGNMENT_SUCCESS","fetchAssignments","fetchAssignment","applicantToApplicantId","positionToPositionId","upsertAssignment","wage_chunks","upsertWageChunksForAssignment","exportAssignments","assignments","assignmentsSelector","wageChunkPromises","assignment","fetchWageChunksForAssignment","wageChunksByAssignmentSelector","upsertAssignments","wageChunksMatchAssignment","totalHours","assignmentsReducer","_assignmentsSelector","_offersByAssignmentIdSelector","_offersByAssignmentId","applicantsSelector","applicants","getWageChunksForAssignment","offersByAssignmentIdHash","applicantsById","positionsById","position_id","applicant_id","offers","applicant","toggleMockApi","enableMockAPI","mockAPI","require","replaceGlobalFetch","restoreGlobalFetch","prepareGlobals","globals","val","stage","shouldRunStage","queryStage","initOrder","stageDependent","sessions","parsedGlobals","session","asyncActions","window","location","assign","parseURLSearchString","search","setGlobals","globalsSelector","fetchApplicantsSuccess","fetchContractTemplatesSuccess","fetchApplicationsSuccess","fetchInstructorsSuccess","activeRole","fetchInstructors","log","matchingSession","fetchActions","fetchApplicants","fetchApplications","fetchContractTemplates","fetchDdahs","action","FETCH_APPLICANTS_SUCCESS","fetchOneApplicantSuccess","FETCH_ONE_APPLICANT_SUCCESS","upsertOneApplicantSuccess","UPSERT_ONE_APPLICANT_SUCCESS","deleteOneApplicantSuccess","DELETE_ONE_APPLICANT_SUCCESS","upsertApplicant","bySession","deleteApplicant","exportApplicants","upsertApplicants","applicantsReducer","dataToFile","formatters","dataFormat","filePrefix","fileName","workbook","XLSX","utils","book_new","sheet","aoa_to_sheet","toSpreadsheet","book_append_sheet","bookType","file","File","write","toJson","spreadsheetUndefinedToNull","prepareMinimal","rate1","rate2","contractTemplate","template_name","template_file","instructor","position_code","position_title","hours_per_assignment","duties","qualifications","desired_num_assignments","current_enrollment","current_waitlisted","posting","open_date","close_date","intro_text","custom_questions","posting_positions","postingPosition","num_positions","contract_override_pdf","assignmentHours","chunk","chunk1","chunk2","tmp","slice","wageChunksMatchPositionAndSession","student_number","phone","application","annotation","comments","department","gpa","program","yip","previous_experience_summary","previous_department_ta","previous_university_ta","documents","custom_question_answers","position_preferences","position_preference","preference_level","ddah","b","order","duty","formatDateForSpreadsheet","date","toJSON","createPayPeriodHeaders","maxNumPeriods","prepareSpreadsheet","concat","applications","minApps","baseUrl","document","origin","URL","url_token","href","firstItems","lastItems","emptyFirstItems","emptyLastItems","from","_","first","last","ddahs","maxDuties","dutyHeaders","active_offer_status","flattenDuties","assignmentsForSpreadsheet","active_offer_recent_activity_date","formatWageChunksToList","prepareApplicationData","preparePostingData","postings","prepareApplicantData","prepareAssignmentDataFactory","assignmentFilter","prepareDdahDataFactory","ddahFilter","prepareInstructorData","preparePositionData","deleteReferences","keyMap","findMatchingKey","targetKey","fuzzySet","FuzzySet","keys","matches","get","matchedKey","SpreadsheetRowMapper","schema","unmatchedKeys","empiricalKeyMap","unknownKeys","row","matchByUtoridOrName","people","match","nameHash","person","fuzzyMatch","validate","requiredKeys","undefined","parseDate","sec","replace","chrono","normalizeImport","dataWrapper","dateColumns","primaryKey","baseName","fileType","rowMapper","formatRow","newRow","col","prepareFull","minSession","context","minContractTemplate","minInstructor","minApplicant","minPosition","template","instructorList","minWageChunk","minAssignment","minDdah","matchingAssignment","total_hours","minPosting","availability","postingPositions","minPostingPosition","normalizeDdahImports","unwrapped","Position","First","Surname","Last","normalized","FETCH_INSTRUCTORS_SUCCESS","fetchOneInstructorSuccess","FETCH_ONE_INSTRUCTOR_SUCCESS","upsertOneInstructorSuccess","UPSERT_ONE_INSTRUCTOR_SUCCESS","deleteOneInstructorSuccess","DELETE_ONE_INSTRUCTOR_SUCCESS","upsertInstructor","deleteInstructor","exportInstructors","upsertInstructors","instructorsReducer","FETCH_CONTRACT_TEMPLATES_SUCCESS","fetchAllContractTemplatesSuccess","FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS","upsertOneContractTemplateSuccess","UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS","deleteOneContractTemplateSuccess","DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS","upsertContractTemplate","fetchAllContractTemplates","previewContractTemplate","template_id","_dispatch","downloadContractTemplate","content","atob","file_name","mime_type","uploadContractTemplate","arrayBuffer","rawContent","contractTemplatesReducer","allContractTemplatesSelector","stringToNativeType","Number","parse","searchParams","URLSearchParams","fetchDdahsSuccess","FETCH_DDAHS_SUCCESS","fetchOneDdahSuccess","FETCH_ONE_DDAH_SUCCESS","upsertOneDdahSuccess","UPSERT_ONE_DDAH_SUCCESS","deleteOneDdahSuccess","DELETE_ONE_DDAH_SUCCESS","approveOneDdahSuccess","DDAH_APPROVE_SUCCESS","emailOneDdahSuccess","DDAH_EMAIL_SUCCESS","assignmentToAssignmentId","approveDdah","emailDdah","upsertDdah","deleteDdah","exportDdahs","ddahsSelector","upsertDdahs","downloadDdahAcceptedList","computeDdahHours","ddahsReducer","_ddahsSelector","assignmentsHash","assignment_id","accepted_date","emailed_date","API_INTERACTION_START","API_INTERACTION_END","FETCH_APPLICATIONS_SUCCESS","fetchOneApplicationSuccess","FETCH_ONE_APPLICATION_SUCCESS","upsertOneApplicationSuccess","UPSERT_ONE_APPLICATION_SUCCESS","deleteOneApplicationSuccess","DELETE_ONE_APPLICATION_SUCCESS","prepApplicationForApi","upsertApplication","exportApplications","fetchPostings","applicationsSelector","applicationsReducer","_applicationsSelector","postingsSelector","postingsById","posting_id","fetchPostingsSuccess","FETCH_POSTINGS_SUCCESS","fetchOnePostingSuccess","FETCH_ONE_POSTING_SUCCESS","upsertOnePostingSuccess","UPSERT_ONE_POSTING_SUCCESS","deleteOnePostingSuccess","DELETE_ONE_POSTING_SUCCESS","fetchPostingPositionsSuccess","FETCH_POSTING_POSITIONS_SUCCESS","fetchOnePostingPositionSuccess","FETCH_ONE_POSTING_POSITION_SUCCESS","upsertOnePostingPositionSuccess","UPSERT_ONE_POSTING_POSITION_SUCCESS","deleteOnePostingPositionSuccess","DELETE_ONE_POSTING_POSITION_SUCCESS","model","fetchPosting","prepPostingForApi","upsertPosting","upsertPostingPosition","fetchSurvey","fetchPostingPositionsForPosting","rawPostingPosition","prepPostingPositionForApi","deletePostingPosition","exportPosting","postingId","isRawPostingPosition","core","combinePostingAndPostingPosition","rawPosting","rawPostingPositions","positionsMap","Map","partialPosting","has","partialPostingPosition","postingsReducer","localStoreSelector2","postingPositionsReducer","postingsState","postingPositionsState","processed","flat","fetchWageChunksForAssignmentSuccess","FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS","upsertWageChunksForAssignmentSuccess","UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS","upsertOneWageChunkSuccess","UPSERT_ONE_WAGE_CHUNK_SUCCESS","deleteOneWageChunkSuccess","DELETE_ONE_WAGE_CHUNK_SUCCESS","assignmentId","_wageChunksByAssignmentId","setGlobalsInUrl","append","history","pushState","newUrl","url","setMockAPIState","ui","otherGlobals","storedActiveSession","instructorSchema","applicantSchema","postingSchema","Name","positionSchema","Start","End","assignmentSchema","Hours","generatePropTypes","PropTypes","oneOfType","number","string","apiResponse","shape","oneOf","isRequired","any","apiResponseSuccess","apiResponseError","idOnly","contractTemplateMinimal","arrayOf","instructor_preference","instructor_id","note","active_offer_url_token","active_offer_nag_count","reportingTag","offer","position_start_date","position_end_date","first_time_ta","bool","instructor_contact_desc","pay_period_desc","installments","ta_coordinator_name","ta_coordinator_email","rejected_date","withdrawn_date","nag_count","signature","approved_date","revised_date","application_ids","posting_position","survey","title","pages","elements","OrigPropTypes","contract_templates_by_filename","mockData","available_contract_templates","contract_templates","contract_templates_by_session","1","2","positions_by_session","instructor_preferences","assignments_by_session","session_id","Session","newSession","filteredData","findAll","sessionsRoutes","documentCallback","func","summary","returns","wrappedPropTypes","docApiPropTypes","post","params","upsert","posts","ContractTemplate","findAllBySession","file_contents","newTemplate","templatesRoutes","getTemplateHtml","templateContent","encodedContent","TextEncoder","encode","upsertBySession","upload","User","matchingUser","activeUserRoutes","getActiveUser","Instructor","matchingInstructor","activeUser","instructorsRoutes","activeInstructor","getFromActiveUser","instructorPositions","getForInstructor","instructorIdsSet","Set","add","rawPosition","_session_id","matchingPosition","bySessionsList","newPosition","positionsRoutes","WageChunk","Assignment","rawWageChunk","getSession","session_start_date","getPosition","existingWageChunks","findAllByAssignment","upsertByAssignment","wageChunkRoutes","Application","applicationsRoutes","Applicant","applicantIds","applicantsRoutes","findAllBySessionAndInstructor","existingApplicant","comment","ActiveOffer","findByAssignment","getWageChunkInfo","activeOffer","getActiveOffer","upsertedAssignment","findAssociatedSession","dateRanges","range","perChunkDelta","positionIds","_ensureAssignment","_noActiveOffer","baseOffer","getAssignment","getApplicant","getInstructors","getContractTemplate","assignmentsRoutes","getHistoryByAssignment","existingAssignment","setAllByAssignment","withdrawByAssignment","rejectByAssignment","acceptByAssignment","createByAssignment","emailByAssignment","nagByAssignment","storage","Debug","getAllData","makeSnapshot","constructor","snapshot","clearData","debugRoutes","found_user","setActiveUser","restoreSnapshot","Ddah","assignmentIds","ddahsRoutes","ddah_id","existingDdah","overwriteFields","sortByOrder","reportingTagRoutes","postingRoutes","publicRoutes","MockAPI","seedData","routePrefix","getRoutes","exclude","postRoutes","_getRoutesParsers","route","authenticateActiveUserBasedOnRole","spec","_postRoutesParsers","active","routeStr","r","Route","delay","_origFetch","init","parsedURL","pathname","mockResponse","responseObj","Response","Blob","resolve","setTimeout","ToggleMockApi","ButtonGroup","Button","variant","onClick","connect","ident","SwaggerUI","React","lazy","BootstrapNavLink","Nav","Link","as","NavLink","activeClassName","to","children","swaggerData","openapi","info","servers","paths","mockApiRoutesAsSwaggerPaths","ConnectedActiveUserButton","useState","dropdownVisible","setDropdownVisible","useEffect","className","Dropdown","onSelect","onToggle","desiredVisibility","show","alignRight","Toggle","Menu","flip","Item","eventKey","ConnectedToggleMockApi","ConnectedLoadMockButton","count","total","confirmDialogVisible","setConfirmDialogVisible","seedAction","_setSeedAction","inProgress","setInProgress","setStage","progress","setProgress","useThunkDispatch","useSelector","targetSession","seedActions","seedSession","seedContractTemplate","instructors10","seedInstructors","position10","seedPositions","applicant10","seedApplicants","assignment10","seedAssignments","mockSessionData","toLocaleString","limit","some","inst","newInstructor","error","Header","Modal","onHide","size","closeButton","Title","Body","Fragment","Footer","style","display","justifyContent","alignItems","ProgressBar","now","label","minWidth","DevFrame","Navbar","expand","Brand","Collapse","Suspense","fallback","docExpansion","FallbackComponent","onError","fetchOfferSuccess","FETCH_ONE_OFFER_SUCCESS","setOfferAcceptedSuccess","SET_OFFER_ACCEPTED_SUCCESS","setOfferRejectedSuccess","SET_OFFER_REJECTED_SUCCESS","offerCreateSuccess","OFFER_CREATE_SUCCESS","offerEmailSuccess","OFFER_EMAIL_SUCCESS","offerNagSuccess","OFFER_NAG_SUCCESS","offerWithdrawSuccess","OFFER_WITHDRAW_SUCCESS","fetchOffersForAssignmentSuccess","FETCH_OFFERS_FOR_ASSIGNMENT_SUCCESS","fetchOfferHistoryForAssignment","setOfferForAssignmentAccepted","setOfferForAssignmentRejected","offerForAssignmentWithdraw","offerForAssignmentCreate","offerForAssignmentEmail","offerForAssignmentNag","CallAtom","createCallChain","chain","propTypesProxy","innerObj","callChain","handler","receiver","Reflect","apply","thisArg","lastProp","pop","ownKeys","Proxy","PROPTYPES_TO_SWAGGER_TYPES","object","array","wrappedPropTypesToSwagger","pt","requiredList","swaggerVal","wrapInStandardApiResponseForSwagger","properties","enum","urlTemplateToSwagger","parsed","RouteParser","templateVars","subs","templateVar","decodeURI","reverse","documentedCallbackToSwagger","docs","responses","default","prefixRoles","parameters","in","requestBody","templatePath","tags","applicableTags","sortedRet","attrs","useDispatch","defaultNotifProps","autoDismiss"],"mappings":"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","file":"static/js/9.8c3dc051.chunk.js","sourcesContent":["/*\n * A collection of utility functions for interfacing with the API\n */\n\nimport { RawPosting, RawSession } from \"../api/defs/types\";\n\nconst API_URL = \"/api/v1\";\nconst FETCH_INIT: RequestInit = {\n    credentials: \"same-origin\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n};\n\n/**\n * Error thrown whenever an api call returns with `status===\"error\"`\n *\n * @class ApiError\n * @extends {Error}\n */\nclass ApiError extends Error {\n    response: Partial<Response>;\n    status: Response[\"status\"];\n\n    constructor(resp: Pick<Response, \"status\"> & { message: string }) {\n        const errorMessage = resp.message;\n        super(errorMessage);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n/**\n * Error thrown whenever an api fetch request\n * returns with a status other than 200\n *\n * @class ApiFetchError\n * @extends {ApiError}\n */\nclass ApiFetchError extends ApiError {\n    constructor(resp: Response, path: string) {\n        const errorMessage = `Got status ${resp.status} ${\n            resp.statusText\n        } when fetching ${API_URL + path}`;\n        super({ ...resp, message: errorMessage });\n    }\n}\n\n// Ensure that `path` starts with a `/`\nfunction _ensurePath(path: string) {\n    return path.startsWith(\"/\") ? path : \"/\" + path;\n}\n\n// Process a `fetch` response from the API.\n// Successful responses from the API should be of\n// the form `{status: (\"success\"|\"error\"), message: \"...\", payload: ...}.\n// Throw an error on a failed HTTP request or a `status !== \"success\"`\n// response from the API.\nasync function _processFetchResponse(resp: Response, path: string) {\n    if (resp.status === 200) {\n        const json = await resp.json();\n        if (json.status !== \"success\") {\n            // If we got random JSON instead of {status: ..., message: ..., payload: ...}\n            // There will be no `json.message`. Provide a default message that will get\n            // overridden in this case\n            throw new ApiError({\n                message: \"Server response did not have `status === 'success`\",\n                ...json,\n            });\n        }\n        return json.payload;\n    }\n    // if we made it this far, there was a bad status\n    // returned during fetch\n    throw new ApiFetchError(resp, path);\n}\n\n/**\n * Do a GET request on the specified api route. This function has sophisticated automatic\n * type inference when using Typescript that works on constant string types (e.g., `apiGET(\"/sessions\")`). If you\n * want type inference when using template literals, you must declare the template literal `as const`\n * (e.g. ``apiGET(`/sessions` as const)``).\n *\n * If `omitPrefix == true`, then `/api/v1` will not be prepended to the start of\n * the request.\n *\n * @param path\n * @returns Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiGET<Path extends string, Ret = ApiGetReturnType<Path>>(\n    path: Path,\n    omitPrefix = false\n): Promise<Ret> {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path) as Path;\n    const resp = await fetch((omitPrefix ? \"\" : API_URL) + path, {\n        ...FETCH_INIT,\n        method: \"GET\",\n    });\n    return await _processFetchResponse(resp, path);\n}\n\n/**\n * Do a POST request on the specified api route. If `omitPrefix == true`, `/api/v1` will\n * not be inserted at the front of the URL\n *\n * @param path\n * @param  [body={}]\n * @returns Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiPOST(path: string, body: any = {}, omitPrefix = false) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch((omitPrefix ? \"\" : API_URL) + path, {\n        ...FETCH_INIT,\n        method: \"POST\",\n        body: JSON.stringify(body),\n    });\n    return await _processFetchResponse(resp, path);\n}\n\nexport { API_URL, ApiError, ApiFetchError, apiGET, apiPOST };\n\n// XXX TODO: this is the start of a type system for typing API\n// requests. However, it appears not to be usable in TypeScript 4.2 with template literals,\n// which we use all over the code. See https://stackoverflow.com/questions/66739139/typescript-infer-temlate-lieral-from-const-template-literal/66739356#66739356\ntype PathVariable = string;\ntype ExtractPathVariable<T extends string> = T extends `:${string}`\n    ? PathVariable\n    : T;\n/**\n * A type that breaks `Path` up by `/` characters and leaves any part of\n * the path starting with `:` as a general string. For example,\n * `PathParts<\"/sessions/43/posts\"> == typeof [\"sessions\", \"43\", \"posts\"]` and\n * `PathParts<\"/sessions/:session_id/posts\"> == typeof [\"sessions\", string, \"posts\"]`.\n *\n * As such, `PathParts<\"/sessions/43/posts\"> extends PathParts<\"/sessions/:session_id/posts\">`,\n * and so `PathParts` can be used for Url route matching.\n */\ntype PathParts<Path extends string> = Path extends `/${infer Rest}`\n    ? PathParts<Rest>\n    : Path extends `${infer Start}/${infer Rest}`\n    ? [ExtractPathVariable<Start>, ...PathParts<`${Rest}`>]\n    : Path extends `${infer Item}`\n    ? [ExtractPathVariable<Item>]\n    : never;\n\ntype ApiGetReturnType<\n    Url extends string,\n    UrlPath = PathParts<Url>\n> = UrlPath extends PathParts<\"/:role/sessions\">\n    ? RawSession[]\n    : UrlPath extends PathParts<\"/:role/sessions/:/postings\">\n    ? RawPosting[]\n    : unknown;\n","import {\n    FETCH_ACTIVE_USER_SUCCESS,\n    FETCH_USERS_SUCCESS,\n    UPSERT_USERS_SUCCESS,\n    SET_ACTIVE_USER_ROLE_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { usersReducer } from \"../reducers/users\";\nimport { initFromStage } from \"./init\";\nimport type { ActiveUser, User, UserRole } from \"../defs/types\";\nimport { RootState } from \"../../rootReducer\";\n\n// actions\nconst fetchActiveUserSuccess = actionFactory<ActiveUser>(\n    FETCH_ACTIVE_USER_SUCCESS\n);\nconst fetchUsersSuccess = actionFactory<User[]>(FETCH_USERS_SUCCESS);\nconst upsertUserSuccess = actionFactory<User>(UPSERT_USERS_SUCCESS);\nconst setActiveUserRoleSuccess = actionFactory<UserRole | null>(\n    SET_ACTIVE_USER_ROLE_SUCCESS\n);\n\n// dispatchers\nexport const fetchActiveUser = validatedApiDispatcher({\n    name: \"fetchActiveUser\",\n    description: \"Fetch the active user\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const data = (await apiGET(`/active_user`)) as ActiveUser;\n        dispatch(fetchActiveUserSuccess(data));\n        // If our currently-set role is one that we don't have,\n        // set our role to one we do have.\n        const currentRole = activeRoleSelector(getState());\n        // `currentRole` could be `null`. However `Array.includes` is\n        // a safe operation for any type, so we force TypeScript to stop complaining\n        // by passing in `currentRole!`\n        if (data.roles && !data.roles.includes(currentRole!)) {\n            await dispatch(setActiveUserRole(data.roles[0]));\n        }\n        return data;\n    },\n});\n\nexport const upsertUser = validatedApiDispatcher({\n    name: \"upsertUsers\",\n    description: \"Upserts a user (setting their role(s))\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (user) => async (dispatch) => {\n        const data = await apiPOST(`/admin/users`, user);\n        dispatch(upsertUserSuccess(data));\n        await dispatch(fetchUsers());\n    },\n});\n\nexport const fetchUsers = validatedApiDispatcher({\n    name: \"fetchUsers\",\n    description: \"Fetch all users\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/users`);\n        dispatch(fetchUsersSuccess(data));\n        return data;\n    },\n});\n\nexport const setActiveUserRole = validatedApiDispatcher({\n    name: \"setActiveUserRole\",\n    description: \"Sets the role of the active user\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (\n        payload: UserRole | null,\n        options: { skipInit?: boolean } = {}\n    ) => async (dispatch) => {\n        dispatch(setActiveUserRoleSuccess(payload));\n        if (!options.skipInit) {\n            await dispatch(\n                initFromStage(\"setActiveUserRole\", { startAfterStage: true })\n            );\n        }\n    },\n});\n\nexport const debugOnlyFetchUsers = validatedApiDispatcher({\n    name: \"debugOnlyFetchUsers\",\n    description:\n        \"Fetch all users; this is available only in debug mode and bypasses any user permissions\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: () => async (dispatch) => {\n        const data = (await apiGET(`/debug/users`)) as User[];\n        dispatch(fetchUsersSuccess(data));\n    },\n});\n\nexport const debugOnlyUpsertUser = validatedApiDispatcher({\n    name: \"debugOnlyUpsertUser\",\n    description: \"Upsert a user\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (user: User | Omit<User, \"id\">) => async (dispatch) => {\n        const data = (await apiPOST(`/debug/users`, user)) as User;\n        return dispatch(upsertUserSuccess(data));\n    },\n});\n\nexport const debugOnlySetActiveUser = validatedApiDispatcher({\n    name: \"debugOnlySetActiveUser\",\n    description:\n        \"Sets the active user (i.e. fakes the 'logged on' user); available only in debug mode\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (user, options: { skipInit?: boolean } = {}) => async (\n        dispatch\n    ) => {\n        const data = (await apiPOST(`/debug/active_user`, user)) as ActiveUser;\n        dispatch(fetchActiveUserSuccess(data));\n        // The new user we switch to might not have the same roles as the previous user.\n        // Default to the highest-authority role available, which is the first in the list.\n        dispatch(setActiveUserRoleSuccess(data.roles[0]));\n\n        // After the active user has been set, we need to re-download (almost) all data\n        // with the permissions of the new active user.\n        if (!options.skipInit) {\n            await dispatch(initFromStage(\"setActiveUser\"));\n        }\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nconst localStoreSelector = usersReducer._localStoreSelector;\nexport const usersSelector = (state: RootState) =>\n    localStoreSelector(state).users;\nexport const activeUserSelector = (state: RootState) =>\n    localStoreSelector(state).active_user;\nexport const activeRoleSelector = (state: RootState) =>\n    localStoreSelector(state).active_role;\n","import uuid from \"uuid-random\";\nimport { apiError } from \"./errors\";\nimport { apiInteractionStart, apiInteractionEnd } from \"./status\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { Action } from \"redux\";\nimport { HasPayload } from \"../reducers/utils\";\nimport { RootState } from \"../../rootReducer\";\n\n/**\n * Turn an array of items into a hash of items indexed\n * by the value of `indexBy`\n *\n */\nexport function arrayToHash<T extends { id: number }>(\n    l: T[]\n): Record<number, T> {\n    if (!Array.isArray(l)) {\n        return l;\n    }\n    const ret: { [key: number]: T } = {};\n    for (const d of l) {\n        ret[d.id] = d;\n    }\n    return ret;\n}\n\n/**\n * Creates an action function that returns an object of the form\n * ```\n *    {\n *        type: TYPE,\n *        payload: payload\n *    }\n * ```\n * This factory function can be used if your action is of this standard form.\n */\nexport function actionFactory<T>(type: string) {\n    return (payload: T): HasPayload<T> => ({\n        type,\n        payload,\n    });\n}\n\n/**\n * Split an object into two objects. One with only properties listed in\n * `props` and the other with all remaining properties.\n *\n * @param {*} obj - object to be split\n * @param {*} [props=[]] - list of properties to split out\n * @returns list of two objects. The first contains all properties not listed in `props`. The second contains all properties listed in `props`\n */\nexport function splitObjByProps<\n    T extends object,\n    Props extends [...(keyof T)[]]\n>(obj: T, props: Props): [Omit<T, Props[number]>, Pick<T, Props[number]>] {\n    const preserved: Partial<T> = {},\n        removed: Partial<T> = {};\n    for (const prop of props) {\n        if (Object.hasOwnProperty.call(obj, prop)) {\n            removed[prop] = obj[prop];\n        }\n    }\n    for (const prop in obj) {\n        if (!Object.hasOwnProperty.call(removed, prop)) {\n            preserved[prop] = obj[prop];\n        }\n    }\n    return [preserved, removed] as any;\n}\n\nexport type HasId = { id: number };\nexport type HasSubIdField<M extends string> = { [key in M]: HasId };\nexport type HasSubIdFieldArray<M extends string> = { [key in M]: HasId[] };\nexport type HasSubField<M extends string> = { [key in M]: unknown };\n\n/**\n * Test whether `obj` has `key` as an attribute.\n *\n * @template T\n * @template M\n * @param {T} obj\n * @param {M} key\n * @returns {(obj is T & HasSubField<M>)}\n */\nfunction hasSubField<T, M extends string>(\n    obj: T,\n    key: M\n): obj is T & HasSubField<M> {\n    return typeof obj === \"object\" && key in obj;\n}\n\n/**\n * Test whether `obj[key].id` exists.\n *\n * @template M\n * @param {*} obj\n * @param {M} key\n * @returns {obj is HasSubIdField<M>}\n */\nexport function hasSubIdField<M extends string>(\n    obj: any,\n    key: M\n): obj is HasSubIdField<M> {\n    if (typeof obj[key] === \"object\" && \"id\" in obj[key]) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Test whether `obj[key]` is an array of objects with `id` fields.\n *\n * @template M\n * @param {*} obj\n * @param {M} key\n * @returns {obj is HasSubIdFieldArray<M>}\n */\nfunction hasSubIdFieldArray<M extends string>(\n    obj: any,\n    key: M\n): obj is HasSubIdFieldArray<M> {\n    if (\n        Array.isArray(obj[key]) &&\n        (obj[key].length === 0 ||\n            (typeof obj[key][0] === \"object\" && \"id\" in obj[key][0]))\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Create a function that takes an `obj` object. It effectively does\n * `obj[outPropName] = obj[inPropName].id; delete obj[inPropName]` but\n * is non-destructive.\n *\n * ```typescript\n * let orig = { foo: { id: 4 } }\n * let renamed = flattenIdFactory<{ foo: { id: number } }, \"foo\", \"foo_id\">(\n *    \"foo\",\n *    \"foo_id\"\n * )({ foo: { id: 4 } });\n * // `renamed` now has a `foo_id` property.\n * renamed.foo_id === 4\n * ```\n *\n * @returns\n */\nexport function flattenIdFactory<InProp extends string, OutProp extends string>(\n    inPropName: InProp,\n    outPropName: OutProp\n) {\n    return function <T>(\n        obj: T\n    ): T extends HasSubIdField<InProp>\n        ? Omit<T, InProp> & { [key in OutProp]: number }\n        : T extends HasSubIdFieldArray<InProp>\n        ? Omit<T, InProp> & { [key in OutProp]: number[] }\n        : T {\n        // if the `inPropName` field doesn't exist, don't change anything\n        // and don't error!\n        if (!hasSubField(obj, inPropName) || obj[inPropName] == null) {\n            return obj as any;\n        }\n        const [ret, filtered]: [any, any] = splitObjByProps(obj, [inPropName]);\n\n        if (hasSubIdField(filtered, inPropName)) {\n            ret[outPropName] = filtered[inPropName].id;\n        } else if (hasSubIdFieldArray(filtered, inPropName)) {\n            ret[outPropName] = filtered[inPropName].map((x) => x.id);\n        }\n\n        return ret;\n    };\n}\n\ninterface DispatcherParams<RetType, ArgType extends unknown[]> {\n    name: string;\n    description: string;\n    onErrorDispatch: (e: Error) => Action;\n    dispatcher: (\n        ...args: ArgType\n    ) => ThunkAction<RetType | Promise<RetType>, RootState, void, Action>;\n}\n\n/**\n * Create a dispatcher that validates `payload` according to the specified\n * `propTypes`. If validation fails, a warning will be printed to the console\n * and execution of the dispatcher will stop. This function also wraps the\n * dispatch in `apiInteractionStart` and `apiInteractionEnd` actions.\n *\n * If the action only accepts one argument, then `propTypes` should be a single\n * `PropTypes` object (e.g., `{id: PropTypes.any.isRequired}`). If the action\n * accepts multiple arguments, `propTypes` should be an array (of length the number\n * of accepted arguments) of `PropTypes` objects.\n *\n * @export\n * @param obj An object with information to create an action\n * @param obj.dispatcher The action that will be dispatched after validation passes\n * @param obj.name The name of the action\n * @param obj.description A description of what the action does\n * @param obj.onErrorDispatch Function that returns an action to be executed on error, or boolean `true` to auto-generate an error action\n * @returns A redux-thunk action\n */\nexport function validatedApiDispatcher<RetType, ArgType extends unknown[]>({\n    dispatcher,\n    name,\n    description,\n    onErrorDispatch,\n}: DispatcherParams<RetType, ArgType>) {\n    return (...args: ArgType) => {\n        // we return a new dispatcher that performs some validation\n        // and then dispatches as usual\n        return async (\n            dispatch: ThunkDispatch<RootState, void, Action>\n        ): Promise<RetType> => {\n            // Declare the start of an API interaction. Generate a `statusId`\n            // so that we can specify which API interaction is ending (since multiple\n            // ones may be going at the same time).\n            const statusId = uuid();\n            dispatch(apiInteractionStart(statusId, description));\n            try {\n                // We need to await so that promise errors get thrown\n                // as real errors\n                const ret = await dispatch(dispatcher(...args));\n                return ret;\n            } catch (e) {\n                console.warn(\"API Error\", e);\n                if (onErrorDispatch) {\n                    if (onErrorDispatch instanceof Function) {\n                        dispatch(onErrorDispatch(e));\n                    } else {\n                        dispatch(\n                            apiError(\n                                `Error encountered during \"${description}\"`\n                            )\n                        );\n                    }\n                }\n                throw e;\n            } finally {\n                // Always declare the API interaction done, even\n                // if there was an error somewhere along the way.\n                dispatch(apiInteractionEnd(statusId));\n            }\n        };\n    };\n}\n","/**\n * A collection of utility functions to help with the mock API\n */\n\n/**\n * Adds the arguments passed in.\n *\n * @export\n * @param {} numbers\n * @returns {number}\n */\nexport function sum(...numbers) {\n    let ret = 0;\n    for (const num of numbers) {\n        ret += +num;\n    }\n    return ret;\n}\n\n/**\n * Given a date range, returns an array of one or two ranges depending\n * on whether the date range includes a new-years.\n *\n * @export\n * @param {(string|Date)} start_date\n * @param {(string|Date)} end_date\n * @returns {{start_date: string, end_date:string}[]}\n */\nexport function splitDateRangeAtNewYear(start_date, end_date) {\n    start_date = new Date(start_date);\n    end_date = new Date(end_date);\n    // For `Date`, 11 is december\n    const december = new Date(start_date.getFullYear(), 11, 31);\n    // For `Date`, 12 will be the first month of the subsequent year\n    const january = new Date(start_date.getFullYear(), 12, 1);\n    if (start_date <= december && end_date > december) {\n        return [\n            {\n                start_date: start_date.toISOString(),\n                end_date: december.toISOString(),\n            },\n            {\n                start_date: january.toISOString(),\n                end_date: end_date.toISOString(),\n            },\n        ];\n    }\n    return [\n        {\n            start_date: start_date.toISOString(),\n            end_date: end_date.toISOString(),\n        },\n    ];\n}\n\n/**\n * Generates an unused Id based on the `prop` attribute.\n *\n * @export\n * @param {object[]} data - array of data with `prop` attributes\n * @param {string} [prop=\"id\"] - attribute to key on\n * @returns {number|string}\n */\nexport function getUnusedId(data, prop = \"id\") {\n    const ids = data.map((x) => +x[prop]).filter((x) => x != null);\n    const max = Math.max(0, ...ids);\n    if (isNaN(max)) {\n        // Somehow there was some other type mixed in with the ids. In this case,\n        // generate a random string\n        return \"id-\" + Math.round(Math.random() * 10000);\n    }\n    return max + 1;\n}\n\n/**\n * Find `obj` in `data` based on a matching attribute of `prop`.\n * Returns matching object or `undefined` if no match was found.\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {undefined|object}\n */\nexport function find(obj, data = [], prop = \"id\") {\n    // We really do want to use `==` and not `===` here.\n    // Sometimes ids are given as ints and sometimes as strings;\n    // we should work interchangibly with both.\n    // eslint-disable-next-line\n    return data.find((s) => s[prop] == obj[prop]);\n}\n\n/**\n * Filter `data` to be a list which only includes items\n * with ids listed in `ids`.\n *\n * @export\n * @param {string[]} [ids=[]]\n * @param {object[]} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {object[]}\n */\nexport function findAllById(ids = [], data = [], prop = \"id\") {\n    // ids can be numbers or strings; make sure we get a match in either case.\n    ids = ids.map((x) => \"\" + x);\n    return data.filter((x) => ids.includes(\"\" + x[prop]));\n}\n\n/**\n * Delete the first occurance of `obj` in `data`\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n */\nexport function deleteInArray(obj, data = []) {\n    data.splice(data.indexOf(obj), 1);\n}\n\n/**\n * Verify whether attributes are nonempty/unique. If they fail these\n * checks, return an appropriate error message. If they pass, return `false`.\n *\n * @export\n * @param {object} obj\n * @param {object[]} [data=[]]\n * @param {boolean} [props={ name: { required: true, unique: true } }]\n * @returns {string|false} - `false` if all checks succeed. Otherwise an appropriate error message.\n */\nexport function getAttributesCheckMessage(\n    obj,\n    data = [],\n    props = { id: { required: true, unique: true } }\n) {\n    for (const [prop, requirements] of Object.entries(props)) {\n        // Required attributes cannot be null or the empty string\n        // Note: `== null` check null and undefined\n        if (requirements.required && (obj[prop] == null || obj[prop] === \"\")) {\n            return `Property ${prop} cannot be empty`;\n        }\n        // Search the data for something with a matching prop. If we find\n        // anything, we are not unique\n        if (requirements.unique && find(obj, data, prop)) {\n            return `Duplicate entry exists for property ${prop} with value ${obj[prop]}`;\n        }\n    }\n    return false;\n}\n\n/**\n * Base class for mockAPI controllers. These handle\n * the mockAPI data and queries thereof.\n *\n * @export\n * @class MockAPIController\n */\nexport class MockAPIController {\n    constructor(data, ownData) {\n        this.data = data;\n        this.ownData = ownData;\n    }\n    /**\n     * Finds all instances of the given item; returns an array copy.\n     *\n     * @returns {object[]}\n     * @memberof MockAPIController\n     */\n    // eslint-disable-next-line\n    findAll(...args) {\n        return [...this.ownData];\n    }\n    /**\n     * Finds a single instance of an item\n     *\n     * @param {({id: number}|number)} query\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    find(query) {\n        return this.rawFind(query);\n    }\n    /**\n     * Not to be overridden. The return value of this object\n     * must be an unmangled version of the actual data stored (so that it can be\n     * mutated, for example.)\n     *\n     * @param {*} query\n     * @returns\n     * @memberof MockAPIController\n     */\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        if (query.id != null) {\n            return find(query, this.ownData);\n        }\n        if (query.utorid != null) {\n            return find({ utorid: query }, this.ownData);\n        }\n        return find({ id: query }, this.ownData);\n    }\n    /**\n     * Delete the given object (by id).\n     *\n     * @param {{id: number}} obj\n     * @memberof MockAPIController\n     */\n    delete(obj) {\n        obj = this.rawFind(obj);\n        if (!obj) {\n            throw new Error(`Cannot delete object ${JSON.stringify(obj)}`);\n        }\n        deleteInArray(obj, this.ownData);\n        return obj;\n    }\n    /**\n     * Get an unused ID\n     *\n     * @returns {number}\n     * @memberof MockAPIController\n     */\n    unusedId() {\n        if (!this.ownData) {\n            throw new Error(\n                \"Cannot get unused ID when `ownData` hasn't been set\"\n            );\n        }\n        return getUnusedId(this.ownData);\n    }\n    /**\n     * Creates a new item instance; no validation is performed.\n     *\n     * @param {object} obj - the new instance data\n     * @memberof MockAPIController\n     */\n    create(obj) {\n        const newId = getUnusedId(this.ownData);\n        const newItem = { ...obj, id: newId };\n        this.ownData.push(newItem);\n        return newItem;\n    }\n    /**\n     * Validates the properties of a new item instance. Throws an error\n     * if the properties are invalid/incompatable.\n     *\n     * @param {object} obj\n     * @memberof MockAPIController\n     */\n    // eslint-disable-next-line\n    validateNew(obj) {\n        throw new Error(\"Subclasses must implement `validateNew()`\");\n    }\n\n    /**\n     * Validates a property of an item instance. Throws an error\n     * if this property are invalid/incompatable.\n     *\n     * @param {object} obj\n     * @param {string} prop\n     * @memberof MockAPIController\n     */\n    // eslint-disable-next-line no-unused-vars\n    validateProp(prop, value, id) {\n        return true;\n    }\n    /**\n     * Update an item if it can be found. Otherwise, return null.\n     *\n     * @param {*} obj\n     * @returns {(object|null)}\n     * @memberof MockAPIController\n     */\n    updateIfFound(obj) {\n        const item = this.rawFind(obj);\n        if (!item) {\n            return null;\n        }\n        // We've found a matching item. Update all non-null\n        // properties\n        for (const prop in obj) {\n            if (prop != null) {\n                this.validateProp(prop, obj[prop], obj.id);\n                item[prop] = obj[prop];\n            }\n        }\n        return item;\n    }\n    /**\n     * Upsert an item. `validateNew` will be run on the item before it is created.\n     * Null/undefined parameters will not be updated.\n     *\n     * @param {object} obj\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    upsert(obj) {\n        if (this.rawFind(obj)) {\n            return this.updateIfFound(obj);\n        }\n        this.validateNew(obj);\n        return this.create(obj);\n    }\n}\n\n/**\n * Extract the earliest start date and latest end date from\n * an array of wage chunks.\n *\n * @export\n * @param {[object]} wageChunks\n * @returns {{start_date: date, end_date: date}}\n */\nexport function wageChunkArrayToStartAndEndDates(wageChunks) {\n    const startDates = wageChunks.map((x) => x.start_date);\n    const endDates = wageChunks.map((x) => x.end_date);\n    startDates.sort();\n    endDates.sort();\n    return {\n        start_date: startDates[0],\n        end_date: endDates[endDates.length - 1],\n    };\n}\n\n/**\n * Join an array of strings with the conjunction \"and\", if suitable.\n *\n * @param {[string]} items\n * @returns {string}\n */\nfunction joinWithConjunction(items) {\n    if (items == null || items.length === 0) {\n        return \"\";\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    if (items.length === 2) {\n        return `${items[0]} and ${items[1]}`;\n    }\n    items = [...items];\n    items[items.length - 1] = \"and \" + items[items.length - 1];\n    return items.join(\", \");\n}\n\n/**\n * Format a list of instructors to appear in a contract.\n *\n * @export\n * @param {[object]} instructors\n * @returns {string}\n */\nexport function formatInstructorsContact(instructors) {\n    if (!instructors) {\n        return [];\n    }\n    const contacts = instructors.map(\n        (x) => `${x.first_name} ${x.last_name} <${x.email}>`\n    );\n    return joinWithConjunction(contacts);\n}\n\n/**\n * Take an array of wage chunks and create a formatted string describing every separate\n * pay period. If there are multiple wage chunks with the same rate, their hours are combined\n * and the pay window is made large enough to contain those chunks.\n *\n * @export\n * @param {[object]} wageChunks\n * @returns {string}\n */\nexport function wageChunkArrayToPayPeriodDescription(wageChunks) {\n    // Every different pay rate needs to be explained separately\n    // So first make a hash based on pay rates\n    const rateData = {};\n    for (const wageChunk of wageChunks) {\n        let { rate, start_date, end_date, hours } = wageChunk;\n        start_date = new Date(start_date);\n        end_date = new Date(end_date);\n        rateData[rate] = rateData[rate] || { hours: 0, rate };\n        const data = rateData[rate];\n        data.hours += hours;\n        data.start_date = data.start_date || start_date;\n        data.start_date = Math.min(data.start_date, start_date);\n        data.end_date = data.end_date || end_date;\n        data.end_date = Math.max(data.end_date, end_date);\n    }\n    const descriptions = Object.values(rateData).map(\n        ({ hours, rate, start_date, end_date }) => {\n            start_date = new Date(start_date);\n            end_date = new Date(end_date);\n\n            return `${hours} hours at $${rate}/hour from ${start_date.toLocaleDateString(\n                \"EN-ca\",\n                { month: \"long\", day: \"numeric\", year: \"numeric\" }\n            )} to ${end_date.toLocaleDateString(\"EN-ca\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n            })}`;\n        }\n    );\n\n    return joinWithConjunction(descriptions);\n}\n\n/**\n * Return a copy of `obj` but filter out any properties whose value\n * is `null` or `undefined`.\n *\n * @export\n * @param {*} obj\n * @returns\n */\nexport function filterNullProps(obj) {\n    const ret = {};\n    for (const key in obj) {\n        if (obj[key] != null) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n\nexport function errorUnlessRole({ role }, targetRule = \"admin\") {\n    if (role !== targetRule) {\n        throw new Error(`Invalid route for user with role '${role}'`);\n    }\n}\n\n/**\n * Recursively traverse the object `obj` and delete any property with key `prop`.\n *\n * @export\n * @param {*} obj\n * @param {string} [prop=\"id\"]\n * @returns\n */\nexport function recursiveDeleteProp(obj, prop = \"id\") {\n    if (typeof obj != \"object\" || obj == null) {\n        return;\n    }\n    if (Array.isArray(obj)) {\n        for (const elm of obj) {\n            recursiveDeleteProp(elm, prop);\n        }\n        return;\n    }\n    delete obj[prop];\n    for (const elm of Object.values(obj)) {\n        recursiveDeleteProp(elm, prop);\n    }\n}\n\n//\n// Base64 Encoding functions from\n// https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727\n//\n\n/*\nMIT License\nCopyright (c) 2020 Egor Nepomnyaschih\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n/*\n// This constant can also be computed with the following algorithm:\nconst base64abc = [],\n\tA = \"A\".charCodeAt(0),\n\ta = \"a\".charCodeAt(0),\n\tn = \"0\".charCodeAt(0);\nfor (let i = 0; i < 26; ++i) {\n\tbase64abc.push(String.fromCharCode(A + i));\n}\nfor (let i = 0; i < 26; ++i) {\n\tbase64abc.push(String.fromCharCode(a + i));\n}\nfor (let i = 0; i < 10; ++i) {\n\tbase64abc.push(String.fromCharCode(n + i));\n}\nbase64abc.push(\"+\");\nbase64abc.push(\"/\");\n*/\nconst base64abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\n    \"\"\n);\n\n// This constant can also be computed with the following algorithm:\nconst l = 256,\n    base64codes = new Uint8Array(l);\nfor (let i = 0; i < l; ++i) {\n    base64codes[i] = 255; // invalid character\n}\nbase64abc.forEach((char, index) => {\n    base64codes[char.charCodeAt(0)] = index;\n});\nbase64codes[\"=\".charCodeAt(0)] = 0; // ignored anyway, so we just need to prevent an error\n//const base64codes = [\n//\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n//\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n//\t255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63,\n//\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255,\n//\t255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n//\t15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255,\n//\t255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n//\t41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n//];\n\nfunction getBase64Code(charCode) {\n    if (charCode >= base64codes.length) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    const code = base64codes[charCode];\n    if (code === 255) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    return code;\n}\n\nexport function bytesToBase64(bytes) {\n    let result = \"\",\n        i,\n        l = bytes.length;\n    for (i = 2; i < l; i += 3) {\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n        result += base64abc[((bytes[i - 1] & 0x0f) << 2) | (bytes[i] >> 6)];\n        result += base64abc[bytes[i] & 0x3f];\n    }\n    if (i === l + 1) {\n        // 1 octet yet to write\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[(bytes[i - 2] & 0x03) << 4];\n        result += \"==\";\n    }\n    if (i === l) {\n        // 2 octets yet to write\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n        result += base64abc[(bytes[i - 1] & 0x0f) << 2];\n        result += \"=\";\n    }\n    return result;\n}\n\nexport function base64ToBytes(str) {\n    if (str.length % 4 !== 0) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    const index = str.indexOf(\"=\");\n    if (index !== -1 && index < str.length - 2) {\n        throw new Error(\"Unable to parse base64 string.\");\n    }\n    let missingOctets = str.endsWith(\"==\") ? 2 : str.endsWith(\"=\") ? 1 : 0,\n        n = str.length,\n        result = new Uint8Array(3 * (n / 4)),\n        buffer;\n    for (let i = 0, j = 0; i < n; i += 4, j += 3) {\n        buffer =\n            (getBase64Code(str.charCodeAt(i)) << 18) |\n            (getBase64Code(str.charCodeAt(i + 1)) << 12) |\n            (getBase64Code(str.charCodeAt(i + 2)) << 6) |\n            getBase64Code(str.charCodeAt(i + 3));\n        result[j] = buffer >> 16;\n        result[j + 1] = (buffer >> 8) & 0xff;\n        result[j + 2] = buffer & 0xff;\n    }\n    return result.subarray(0, result.length - missingOctets);\n}\n\nexport function base64encode(str, encoder = new TextEncoder()) {\n    return bytesToBase64(encoder.encode(str));\n}\n\nexport function base64decode(str, decoder = new TextDecoder()) {\n    return decoder.decode(base64ToBytes(str));\n}\n","import { createSelector } from \"reselect\";\nimport {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError, apiError } from \"./errors\";\nimport { actionFactory, HasId, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { sessionsReducer } from \"../reducers/sessions\";\nimport { activeRoleSelector } from \"./users\";\nimport { initFromStage } from \"./init\";\nimport type { RawSession, Session } from \"../defs/types\";\n\n// actions\nexport const fetchSessionsSuccess = actionFactory<RawSession[]>(\n    FETCH_SESSIONS_SUCCESS\n);\nconst fetchOneSessionSuccess = actionFactory<RawSession>(\n    FETCH_ONE_SESSION_SUCCESS\n);\nconst upsertOneSessionSuccess = actionFactory<RawSession>(\n    UPSERT_ONE_SESSION_SUCCESS\n);\nconst deleteOneSessionSuccess = actionFactory<RawSession>(\n    DELETE_ONE_SESSION_SUCCESS\n);\nconst setActiveSessionAction = actionFactory<RawSession | null>(\n    SET_ACTIVE_SESSION\n);\n\n// dispatchers\nexport const fetchSessions = validatedApiDispatcher({\n    name: \"fetchSessions\",\n    description: \"Fetch sessions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        try {\n            const role = activeRoleSelector(getState());\n            const data = (await apiGET(`/${role}/sessions`)) as RawSession[];\n            dispatch(fetchSessionsSuccess(data));\n            return data;\n        } catch (e) {\n            dispatch(fetchSessionsSuccess([]));\n            return [];\n        }\n    },\n});\n\nexport const fetchSession = validatedApiDispatcher({\n    name: \"fetchSession\",\n    description: \"Fetch session\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/sessions/${payload.id}`\n        )) as RawSession;\n        dispatch(fetchOneSessionSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertSession = validatedApiDispatcher({\n    name: \"upsertSession\",\n    description: \"Add/insert session\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<Session>) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/sessions`,\n            payload\n        )) as RawSession;\n        dispatch(upsertOneSessionSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteSession = validatedApiDispatcher({\n    name: \"deleteSession\",\n    description: \"Delete session\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: Partial<Session>) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/sessions/delete`,\n            payload\n        )) as RawSession;\n        dispatch(deleteOneSessionSuccess(data));\n    },\n});\n\n/**\n * Sets the `activeSession`. `activeSession` is used\n * in other API calls, so changing the active session may\n * trigger changes in other data (for example, `instructors` or `positions`)\n *\n * @param {object} payload - The session to set active\n */\nexport const setActiveSession = validatedApiDispatcher({\n    name: \"setActiveSession\",\n    description: \"Set the active session\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (\n        payload: Session | null,\n        options: { skipInit?: boolean } = {}\n    ) => async (dispatch, getState) => {\n        const { skipInit } = options;\n        const state = getState();\n        const currentActiveSession = activeSessionSelector(state);\n        if (currentActiveSession === payload) {\n            return;\n        }\n        // passing in null will unset the active session\n        if (payload == null) {\n            dispatch(setActiveSessionAction(null));\n            return;\n        }\n        if ((currentActiveSession || { id: null }).id === payload.id) {\n            return;\n        }\n        // If we made it here, the activeSession is changing.\n        dispatch(setActiveSessionAction(payload));\n        // Make sure all tasks we depend on get run\n        if (!skipInit) {\n            await dispatch(\n                initFromStage(\"setActiveSession\", { startAfterStage: true })\n            );\n        }\n    },\n});\n\n// selectors\nconst localStoreSelector = sessionsReducer._localStoreSelector;\nexport const sessionsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData as Session[]\n);\nexport const activeSessionSelector = createSelector(\n    localStoreSelector,\n    (state) => state.activeSession as Session | null\n);\n","import {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n    HasId,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { positionsReducer } from \"../reducers/positions\";\nimport { createSelector } from \"reselect\";\nimport { instructorsSelector } from \"./instructors\";\nimport { contractTemplatesSelector } from \"./contract_templates\";\nimport { activeRoleSelector } from \"./users\";\nimport { Position, RawPosition } from \"../defs/types\";\nimport { activeSessionSelector } from \"./sessions\";\nimport { ExportFormat, PrepareDataFunc } from \"../../libs/import-export\";\n\n// actions\nexport const fetchPositionsSuccess = actionFactory<RawPosition[]>(\n    FETCH_POSITIONS_SUCCESS\n);\nconst fetchOnePositionSuccess = actionFactory<RawPosition>(\n    FETCH_ONE_POSITION_SUCCESS\n);\nconst upsertOnePositionSuccess = actionFactory<RawPosition>(\n    UPSERT_ONE_POSITION_SUCCESS\n);\nconst deleteOnePositionSuccess = actionFactory<RawPosition>(\n    DELETE_ONE_POSITION_SUCCESS\n);\n\nconst MissingActiveSessionError = new Error(\n    \"Cannot interact with Positions without an active session\"\n);\n\n// dispatchers\nexport const fetchPositions = validatedApiDispatcher({\n    name: \"fetchPositions\",\n    description: \"Fetch positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw MissingActiveSessionError;\n        }\n        const { id: activeSessionId } = activeSession;\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions`\n        )) as RawPosition[];\n        dispatch(fetchPositionsSuccess(data));\n    },\n});\n\nexport const fetchPosition = validatedApiDispatcher({\n    name: \"fetchPosition\",\n    description: \"Fetch position\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw MissingActiveSessionError;\n        }\n        const { id: activeSessionId } = activeSession;\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions/${payload.id}`\n        )) as RawPosition;\n        dispatch(fetchOnePositionSuccess(data));\n    },\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst instructorsToInstructorIds = flattenIdFactory<\n    \"instructors\",\n    \"instructor_ids\"\n>(\"instructors\", \"instructor_ids\");\nconst contractTemplateToContractTemplateId = flattenIdFactory<\n    \"contract_template\",\n    \"contract_template_id\"\n>(\"contract_template\", \"contract_template_id\");\n\nfunction prepForApi(data: Partial<Position>) {\n    return contractTemplateToContractTemplateId(\n        instructorsToInstructorIds(data)\n    ) as Partial<RawPosition>;\n}\n\nexport const upsertPosition = validatedApiDispatcher({\n    name: \"upsertPosition\",\n    description: \"Add/insert position\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<Position>) => async (dispatch, getState) => {\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw MissingActiveSessionError;\n        }\n        const { id: activeSessionId } = activeSession;\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/sessions/${activeSessionId}/positions`,\n            prepForApi(payload)\n        )) as RawPosition;\n        dispatch(upsertOnePositionSuccess(data));\n        return data;\n    },\n});\n\nexport const deletePosition = validatedApiDispatcher({\n    name: \"deletePosition\",\n    description: \"Delete position\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/positions/delete`,\n            prepForApi(payload)\n        )) as RawPosition;\n        dispatch(deleteOnePositionSuccess(data));\n    },\n});\n\nexport const exportPositions = validatedApiDispatcher({\n    name: \"exportPositions\",\n    description: \"Export positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (\n        formatter: PrepareDataFunc<Position>,\n        format: ExportFormat = \"spreadsheet\"\n    ) => async (dispatch, getState) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all positions from the server in case things happened to be out of sync.\n        await dispatch(fetchPositions());\n        const positions = positionsSelector(getState());\n\n        return formatter(positions, format);\n    },\n});\n\nexport const upsertPositions = validatedApiDispatcher({\n    name: \"upsertPositions\",\n    description: \"Upsert a list of positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (positions: Partial<Position>[]) => async (dispatch) => {\n        if (positions.length === 0) {\n            return;\n        }\n        const dispatchers = positions.map((position) =>\n            dispatch(upsertPosition(position))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all positions from the server in case things happened to be out of sync.\n        await dispatch(fetchPositions());\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nconst localStoreSelector = positionsReducer._localStoreSelector;\nconst _positionsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n/**\n * Get the positions, but populate the `instructors` array with the full instructor\n * information.\n */\nexport const positionsSelector = createSelector(\n    [_positionsSelector, instructorsSelector, contractTemplatesSelector],\n    (positions, instructors, contractTemplates) => {\n        // Hash the instructors by `id` for fast lookup\n        const instructorsById = arrayToHash(instructors);\n        const contractTemplatesById = arrayToHash(contractTemplates);\n\n        // Leave all the data alone, except replace the `instructor_ids` list\n        // with the full instructor data.\n        return positions.map(\n            ({ instructor_ids, contract_template_id, ...rest }) => ({\n                ...rest,\n                // When the instructor list references an instructor that we haven't loaded\n                // we don't want the frontend to crash, so filter out any null instructors\n                instructors: instructor_ids\n                    .map((x) => instructorsById[x])\n                    .filter((x) => x),\n                contract_template: contractTemplatesById[contract_template_id],\n            })\n        ) as Position[];\n    }\n);\n","import {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n    HasId,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { positionsSelector } from \"./positions\";\nimport { activeRoleSelector } from \"./users\";\nimport {\n    fetchWageChunksForAssignment,\n    wageChunksByAssignmentSelector,\n    upsertWageChunksForAssignment,\n} from \"./wage_chunks\";\nimport type { RawAssignment, Assignment, WageChunk } from \"../defs/types\";\nimport { activeSessionSelector } from \"./sessions\";\nimport { ExportFormat, PrepareDataFunc } from \"../../libs/import-export\";\n\n// actions\nexport const fetchAssignmentsSuccess = actionFactory<RawAssignment[]>(\n    FETCH_ASSIGNMENTS_SUCCESS\n);\nconst fetchOneAssignmentSuccess = actionFactory<RawAssignment>(\n    FETCH_ONE_ASSIGNMENT_SUCCESS\n);\nconst upsertOneAssignmentSuccess = actionFactory<RawAssignment>(\n    UPSERT_ONE_ASSIGNMENT_SUCCESS\n);\nconst deleteOneAssignmentSuccess = actionFactory<RawAssignment>(\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n);\n\nconst MissingActiveSessionError = new Error(\n    \"Cannot interact with Assignments without an active session\"\n);\n\n// dispatchers\nexport const fetchAssignments = validatedApiDispatcher({\n    name: \"fetchAssignments\",\n    description: \"Fetch assignments\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw MissingActiveSessionError;\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/assignments`\n        )) as RawAssignment[];\n        dispatch(fetchAssignmentsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchAssignment = validatedApiDispatcher({\n    name: \"fetchAssignment\",\n    description: \"Fetch assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/assignments/${payload.id}`\n        )) as RawAssignment;\n        dispatch(fetchOneAssignmentSuccess(data));\n        return data;\n    },\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst applicantToApplicantId = flattenIdFactory<\"applicant\", \"applicant_id\">(\n    \"applicant\",\n    \"applicant_id\"\n);\nconst positionToPositionId = flattenIdFactory<\"position\", \"position_id\">(\n    \"position\",\n    \"position_id\"\n);\nfunction prepForApi(data: Partial<Assignment>) {\n    return positionToPositionId(\n        applicantToApplicantId(data)\n    ) as Partial<RawAssignment>;\n}\n\nexport const upsertAssignment = validatedApiDispatcher({\n    name: \"upsertAssignment\",\n    description: \"Add/insert assignment\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<Assignment>) => async (\n        dispatch,\n        getState\n    ) => {\n        const role = activeRoleSelector(getState());\n        let data = (await apiPOST(\n            `/${role}/assignments`,\n            prepForApi(payload)\n        )) as RawAssignment;\n        dispatch(upsertOneAssignmentSuccess(data));\n        if (payload.wage_chunks) {\n            await dispatch(\n                upsertWageChunksForAssignment(data, payload.wage_chunks)\n            );\n            // The wage chunks could have changed the number of \"hours\" for the assignment.\n            // Refetch it to make sure the data isn't stale.\n            data = await dispatch(fetchAssignment(data));\n        }\n        dispatch(upsertOneAssignmentSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteAssignment = validatedApiDispatcher({\n    name: \"deleteAssignment\",\n    description: \"Delete assignment\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOneAssignmentSuccess(data));\n    },\n});\n\nexport const exportAssignments = validatedApiDispatcher({\n    name: \"exportAssignments\",\n    description: \"Export assignments\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (\n        formatter: PrepareDataFunc<Assignment>,\n        format: ExportFormat = \"spreadsheet\"\n    ) => async (dispatch, getState) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all assignments from the server in case things happened to be out of sync.\n        await dispatch(fetchAssignments());\n        const assignments = assignmentsSelector(getState());\n\n        // Normally, wage chunk information is not fetched with an assignment. This information\n        // must be fetched separately.\n        const wageChunkPromises = assignments.map((assignment) =>\n            dispatch(fetchWageChunksForAssignment(assignment))\n        );\n        await Promise.all(wageChunkPromises);\n        // Attach the wage chunk information to each assignment\n        for (const assignment of assignments) {\n            assignment.wage_chunks = wageChunksByAssignmentSelector(getState())(\n                assignment\n            );\n        }\n\n        return formatter(assignments, format);\n    },\n});\n\nexport const upsertAssignments = validatedApiDispatcher({\n    name: \"upsertAssignments\",\n    description: \"Upsert a list of assignments\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignments: Partial<Assignment>[]) => async (dispatch) => {\n        if (assignments.length === 0) {\n            return;\n        }\n        const dispatchers = assignments.map((assignment) =>\n            dispatch(upsertAssignment(assignment))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all assignments from the server in case things happened to be out of sync.\n        await dispatch(fetchAssignments());\n    },\n});\n\n// selectors\n\n/**\n * Returns whether the number of hours for the `assignment` and the sum\n * total hours of `wageChunks` match.\n *\n * @param {*} assignment\n * @param {*} wageChunks\n * @returns\n */\nfunction wageChunksMatchAssignment(\n    assignment: RawAssignment,\n    wageChunks: WageChunk[]\n) {\n    if (!wageChunks) {\n        return true;\n    }\n    let totalHours = 0;\n    for (const chunk of wageChunks) {\n        totalHours += chunk.hours;\n    }\n    return totalHours === assignment.hours;\n}\n\n// Each reducer is given an isolated state; instead of needing to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nconst localStoreSelector = assignmentsReducer._localStoreSelector;\n/**\n * Get just the assignment data as it appears in the store; i.e., it has references to\n * id's of applicants and positions.\n */\nconst _assignmentsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\nconst _offersByAssignmentIdSelector = createSelector(\n    localStoreSelector,\n    (state) => state._offersByAssignmentId\n);\n/**\n * Get the current assignments. This selector is memoized and will only\n * be recomputed when assignments, applicants, or positions change. If wageChunks\n * have been loaded for the assignment, they are included, otherwise they are null.\n */\nexport const assignmentsSelector = createSelector(\n    [\n        _assignmentsSelector,\n        applicantsSelector,\n        positionsSelector,\n        wageChunksByAssignmentSelector,\n        _offersByAssignmentIdSelector,\n    ],\n    (\n        assignments,\n        applicants,\n        positions,\n        getWageChunksForAssignment,\n        offersByAssignmentIdHash\n    ) => {\n        if (assignments.length === 0) {\n            return [];\n        }\n        const applicantsById = arrayToHash(applicants);\n        const positionsById = arrayToHash(positions);\n        return assignments.map((assignment) => {\n            const { position_id, applicant_id, ...rest } = assignment;\n            const wage_chunks = getWageChunksForAssignment(assignment);\n            const offers = offersByAssignmentIdHash[assignment.id];\n            return {\n                ...rest,\n                position: positionsById[position_id] || {},\n                applicant: applicantsById[applicant_id] || {},\n                // Only return wage chunks if they match the current assignment. This\n                // ensures stale (previously-loaded) wage chunks don't get served.\n                wage_chunks: wageChunksMatchAssignment(assignment, wage_chunks)\n                    ? wage_chunks\n                    : null,\n                offers,\n            } as Assignment;\n        });\n    }\n);\n","import {\n    setActiveSession,\n    fetchSessions,\n    sessionsSelector,\n    activeSessionSelector,\n} from \"./sessions\";\nimport {\n    fetchActiveUser,\n    setActiveUserRole,\n    activeRoleSelector,\n} from \"./users\";\nimport { fetchApplicants, fetchApplicantsSuccess } from \"./applicants\";\nimport { fetchApplications, fetchApplicationsSuccess } from \"./applications\";\nimport { fetchAssignments, fetchAssignmentsSuccess } from \"./assignments\";\nimport {\n    fetchContractTemplates,\n    fetchContractTemplatesSuccess,\n} from \"./contract_templates\";\nimport { fetchInstructors, fetchInstructorsSuccess } from \"./instructors\";\nimport { fetchPositions, fetchPositionsSuccess } from \"./positions\";\nimport { setGlobals, globalsSelector } from \"./globals\";\nimport { parseURLSearchString } from \"../../libs/urls\";\nimport { fetchDdahs } from \"./ddahs\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { RootState } from \"../../rootReducer\";\nimport { AnyAction } from \"redux\";\n\ntype InitStages =\n    | \"pageLoad\"\n    | \"toggleMockAPI\"\n    | \"setActiveUser\"\n    | \"setActiveUserRole\"\n    | \"fetchInstructors\"\n    | \"fetchSessions\"\n    | \"setActiveSession\"\n    | \"updateGlobals\"\n    | \"fetchSessionDependentData\";\n\n/**\n * A helper function to replace all API actions to\n * use mock API actions.\n *\n * @param {boolean} enableMockAPI\n */\nfunction toggleMockApi(enableMockAPI: boolean) {\n    // in production, ToggleMockApi is a no-op. In development, it actually\n    // does something.\n    /* eslint-disable */\n    if (enableMockAPI != null && process.env.REACT_APP_DEV_FEATURES) {\n        const mock = require(\"../mockAPI\");\n        const mockAPI = mock.mockAPI;\n\n        if (enableMockAPI === true) {\n            mockAPI.replaceGlobalFetch();\n        } else {\n            mockAPI.restoreGlobalFetch();\n        }\n    }\n    /* eslint-enable */\n}\n\n/**\n * Prepare an object to be used to set global variables. The\n * return value is the same as the input except with `null` entries\n * removed.\n *\n * @param globals\n * @returns same as input but with `null` values removed.\n */\nfunction prepareGlobals<T extends Record<string, string | number | null>>(\n    globals: T\n) {\n    const ret: Record<string, string | number> = {};\n    for (const [key, val] of Object.entries(globals)) {\n        if (val != null) {\n            ret[key] = val;\n        }\n    }\n    return ret;\n}\n\n/**\n * Various actions have side effects, requiring additional actions to\n * be dispatched. For example, if a session changes, all data related to\n * that session needs to be re-fetched.\n *\n * This function allows you to specify \"stage\" to start the init procedure at.\n * It will handle re-fetching any dependent data and dispatching any\n * required actions depending on the stage specified.\n *\n * @export\n * @param stage - What stage to start the init procedure at\n * @param options - if true, start from the stage following the specified stage; if false, start from the specified stage\n * @returns an async function that handles all the API calls.\n */\nexport function initFromStage(\n    stage: InitStages,\n    options = { startAfterStage: false }\n): ThunkAction<Promise<void>, RootState, void, AnyAction> {\n    const startAfterStage = +!!options.startAfterStage;\n\n    return async (dispatch, getState) => {\n        const parsedGlobals = { mockAPI: null, activeSession: null };\n\n        // These actions don't need to finish in a specific order,\n        // so we can wait for them to finish at the end of this function to speed up startup.\n        const asyncActions = [];\n\n        /**\n         * A helper function to determine if the `currentStage`\n         * should be run\n         *\n         * @param queryStage\n         * @returns whether the `currentStage` action should be performed\n         */\n        function shouldRunStage(queryStage: InitStages) {\n            const initOrder: InitStages[] = [\n                \"pageLoad\",\n                \"toggleMockAPI\",\n                \"setActiveUser\",\n                \"setActiveUserRole\",\n                \"fetchInstructors\",\n                \"fetchSessions\",\n                \"setActiveSession\",\n                \"updateGlobals\",\n                \"fetchSessionDependentData\",\n            ];\n\n            // Is the queried stage dependent on the current stage?\n            // If `startAfterStage` is set, we actually want to know\n            // if we are the *next* stage.\n            const stageDependent =\n                initOrder.indexOf(stage) + startAfterStage <=\n                initOrder.indexOf(queryStage);\n\n            // `\"setActiveSession\" requires that an active session be set before\n            // it gets run.\n            if (stageDependent && queryStage === \"setActiveSession\") {\n                const state = getState();\n                const sessions = sessionsSelector(state);\n                const activeSession = activeSessionSelector(state) || {\n                    id: parsedGlobals.activeSession,\n                };\n                return sessions.find(\n                    (session) => session.id === activeSession.id\n                );\n            }\n\n            // All session dependent data depends on an active session being set\n            if (stageDependent && queryStage === \"fetchSessionDependentData\") {\n                const state = getState();\n                const activeSession = activeSessionSelector(state);\n                return activeSession?.id != null;\n            }\n\n            return stageDependent;\n        }\n\n        if (shouldRunStage(\"pageLoad\")) {\n            // When the page loads we parse the URL and pull out any globals that\n            // need setting\n            if (window.location) {\n                Object.assign(\n                    parsedGlobals,\n                    parseURLSearchString(window.location.search)\n                );\n                // Immediately set any global variables in the Redux store.\n                await dispatch(setGlobals(prepareGlobals(parsedGlobals)));\n            }\n        }\n\n        if (shouldRunStage(\"toggleMockAPI\")) {\n            const globals = globalsSelector(getState());\n            toggleMockApi(globals.mockAPI);\n        }\n\n        if (shouldRunStage(\"setActiveUser\")) {\n            await dispatch(fetchActiveUser());\n        }\n\n        if (shouldRunStage(\"setActiveUserRole\")) {\n            // When the role is changed, data should be cleared immediately.\n            // It will be re-fetched via the appropriate routes.\n            dispatch(fetchApplicantsSuccess([]));\n            dispatch(fetchAssignmentsSuccess([]));\n            dispatch(fetchContractTemplatesSuccess([]));\n            dispatch(fetchApplicationsSuccess([]));\n            dispatch(fetchInstructorsSuccess([]));\n            dispatch(fetchPositionsSuccess([]));\n\n            const activeRole = activeRoleSelector(getState());\n            await dispatch(setActiveUserRole(activeRole, { skipInit: true }));\n        }\n\n        if (shouldRunStage(\"fetchInstructors\")) {\n            // Even though we eventually catch all the errors when we await the asyncActions,\n            // sometimes an error is thrown before we have a chance to await it. React,\n            // in dev mode, watches for any uncaught errors in promises and will refuse to\n            // render the interface if there are any. For that reason, we set this promise\n            // up with a catch block right away.\n            asyncActions.push(dispatch(fetchInstructors()).catch(console.log));\n        }\n\n        if (shouldRunStage(\"fetchSessions\")) {\n            await dispatch(fetchSessions());\n        }\n\n        if (shouldRunStage(\"setActiveSession\")) {\n            // after sessions are fetched, we compare with the active session.\n            // The active session might need to be \"updated\" if the ID matches but\n            // the data doesn't\n            const state = getState();\n            const sessions = sessionsSelector(state);\n            const activeSession = activeSessionSelector(state);\n            // There are two places where the active session could be store:\n            // in the URL as a global and in the Redux store. Prefer the value\n            // in the URL.\n            const matchingSession =\n                sessions.find(\n                    (session) => session.id === parsedGlobals.activeSession\n                ) || activeSession;\n\n            await dispatch(\n                setActiveSession(matchingSession, { skipInit: true })\n            );\n        }\n\n        if (shouldRunStage(\"updateGlobals\")) {\n            await dispatch(setGlobals(prepareGlobals(parsedGlobals)));\n        }\n\n        if (shouldRunStage(\"fetchSessionDependentData\")) {\n            // Before fetching session-related data, the existing data\n            // should be cleared. It will be re-fetched via the appropriate routes,\n            // but clearing now will prevent excess re-renders as data streams in.\n            dispatch(fetchApplicantsSuccess([]));\n            dispatch(fetchAssignmentsSuccess([]));\n            dispatch(fetchContractTemplatesSuccess([]));\n            dispatch(fetchApplicationsSuccess([]));\n            dispatch(fetchPositionsSuccess([]));\n\n            // `fetchActions` array contains all the fetch API calls that need to be\n            // made in order to obtain all data that the app needs.\n            const fetchActions = [\n                fetchApplicants,\n                fetchApplications,\n                fetchAssignments,\n                fetchContractTemplates,\n                fetchPositions,\n                fetchDdahs,\n            ];\n\n            // The order of fetching here doesn't matter, so dispatch all at once\n            await Promise.all(\n                fetchActions.map((action) => dispatch(action() as any))\n            );\n        }\n\n        // Wait for async actions dispatched earlier to complete.\n        await Promise.all(asyncActions);\n    };\n}\n","import {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, HasId, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { applicantsReducer } from \"../reducers/applicants\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\nimport { activeSessionSelector } from \"./sessions\";\nimport { Applicant, RawApplicant } from \"../defs/types\";\nimport { ExportFormat, PrepareDataFunc } from \"../../libs/import-export\";\n\n// actions\nexport const fetchApplicantsSuccess = actionFactory<RawApplicant[]>(\n    FETCH_APPLICANTS_SUCCESS\n);\nconst fetchOneApplicantSuccess = actionFactory<RawApplicant>(\n    FETCH_ONE_APPLICANT_SUCCESS\n);\nconst upsertOneApplicantSuccess = actionFactory<RawApplicant>(\n    UPSERT_ONE_APPLICANT_SUCCESS\n);\nconst deleteOneApplicantSuccess = actionFactory<RawApplicant>(\n    DELETE_ONE_APPLICANT_SUCCESS\n);\n\n// dispatchers\nexport const fetchApplicants = validatedApiDispatcher({\n    name: \"fetchApplicants\",\n    description: \"Fetch applicants\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch applicants, we only want the applicants associated with the current session\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw new Error(\"Cannot fetch DDAHs without an active session\");\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/applicants`\n        )) as RawApplicant[];\n        dispatch(fetchApplicantsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchApplicant = validatedApiDispatcher({\n    name: \"fetchApplicant\",\n    description: \"Fetch applicant\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/applicants/${payload.id}`\n        )) as RawApplicant;\n        dispatch(fetchOneApplicantSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertApplicant = validatedApiDispatcher({\n    name: \"upsertApplicant\",\n    description: \"Add/insert applicant\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (\n        payload: Partial<Applicant>,\n        bySession: boolean = true\n    ) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        let data: RawApplicant;\n        if (bySession) {\n            const activeSession = activeSessionSelector(getState());\n            if (activeSession == null) {\n                throw new Error(\"Cannot fetch DDAHs without an active session\");\n            }\n            const { id: activeSessionId } = activeSession;\n            data = await apiPOST(\n                `/${role}/sessions/${activeSessionId}/applicants`,\n                payload\n            );\n        } else {\n            data = await apiPOST(`/${role}/applicants`, payload);\n        }\n        dispatch(upsertOneApplicantSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteApplicant = validatedApiDispatcher({\n    name: \"deleteApplicant\",\n    description: \"Delete applicant\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/applicants/delete`,\n            payload\n        )) as RawApplicant;\n        dispatch(deleteOneApplicantSuccess(data));\n        return data;\n    },\n});\n\nexport const exportApplicants = validatedApiDispatcher({\n    name: \"exportApplicants\",\n    description: \"Export applicants\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (\n        formatter: PrepareDataFunc<Applicant>,\n        format: ExportFormat = \"spreadsheet\"\n    ) => async (dispatch, getState) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all applicants from the server in case things happened to be out of sync.\n        await dispatch(fetchApplicants());\n        const applicants = applicantsSelector(getState());\n\n        return formatter(applicants, format);\n    },\n});\n\nexport const upsertApplicants = validatedApiDispatcher({\n    name: \"upsertApplicants\",\n    description: \"Upsert applicants\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (applicants: Partial<Applicant>[]) => async (dispatch) => {\n        if (applicants.length === 0) {\n            return;\n        }\n        const dispatchers = applicants.map((applicant) =>\n            dispatch(upsertApplicant(applicant))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all applicants from the server in case things happened to be out of sync.\n        return await dispatch(fetchApplicants());\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nconst localStoreSelector = applicantsReducer._localStoreSelector;\nexport const applicantsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData as Applicant[]\n);\n","import XLSX from \"xlsx\";\n\nexport type ExportFormat = \"csv\" | \"json\" | \"spreadsheet\";\nexport type ExportFormatters = {\n    toJson: () => any;\n    toSpreadsheet: () => (string | number | null | undefined)[][];\n};\n\n/**\n *  Create a `File` object containing of the specified format.\n *\n * @param formatters - Formatters return an array of objects (usable as spreadsheet rows) or a javascript object to be passed to JSON.stringify\n * @param dataFormat\n * @param filePrefix\n * @returns\n */\nexport function dataToFile(\n    formatters: ExportFormatters,\n    dataFormat: ExportFormat,\n    filePrefix = \"\"\n) {\n    const fileName = `${filePrefix}${\n        filePrefix ? \"_\" : \"\"\n    }export_${new Date().toLocaleDateString(\"en-CA\", {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n    })}`;\n\n    if (dataFormat === \"spreadsheet\" || dataFormat === \"csv\") {\n        const workbook = XLSX.utils.book_new();\n        const sheet = XLSX.utils.aoa_to_sheet(formatters.toSpreadsheet());\n        XLSX.utils.book_append_sheet(workbook, sheet, \"Instructors\");\n\n        const bookType = dataFormat === \"csv\" ? \"csv\" : \"xlsx\";\n\n        // We convert the data into a blob and return it so that it can be downloaded\n        // by the user's browser\n        const file = new File(\n            [XLSX.write(workbook, { type: \"array\", bookType })],\n            `${fileName}.${bookType}`,\n            {\n                type:\n                    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            }\n        );\n        return file;\n    }\n\n    if (dataFormat === \"json\") {\n        const file = new File(\n            [JSON.stringify(formatters.toJson(), null, 4)],\n            `${fileName}.json`,\n            {\n                type: \"application/json\",\n            }\n        );\n        return file;\n    }\n\n    throw new Error(\n        `Cannot process data to format \"${dataFormat}\"; try \"spreadsheet\" or \"json\".`\n    );\n}\n","// for json containing object data, we do not need another helper function\n// to convert undefined to null since in dataToFile function in \"./data-to-file\"\n// we use JSON.stringify() which will do the conversion\n\n/**\n * Util functions to turn undefined to null for spreadsheets\n *\n * @exports\n * @param {(number | string | null | undefined) [][] item\n * @returns{(number | string | null) [][]}\n */\nexport function spreadsheetUndefinedToNull(\n    items: (number | string | null | undefined)[][]\n) {\n    return items.map((item) => item.map((val) => val ?? null));\n}\n","/*\n * A collection of utility functions for use when exporting data.\n */\n\nimport {\n    WageChunk,\n    Session,\n    Position,\n    Instructor,\n    Assignment,\n    ContractTemplate,\n    Applicant,\n    MinimalWageChunk,\n    MinimalSession,\n    MinimalPosition,\n    MinimalInstructor,\n    MinimalAssignment,\n    MinimalContractTemplate,\n    MinimalApplicant,\n    MinimalDdah,\n    Ddah,\n    MinimalApplication,\n    Application,\n    PostingPosition,\n    MinimalPostingPosition,\n    MinimalPosting,\n    Posting,\n} from \"../../api/defs/types\";\n\n/**\n * Determine whether `wageChunks` can be derived from `session`. E.g.,\n * the rates match the session rates.\n *\n * @param {*} wageChunks\n * @param {*} position\n * @param {*} session\n * @param {Number} assignmentHours\n * @returns {boolean}\n */\nfunction wageChunksMatchPositionAndSession(\n    wageChunks: WageChunk[],\n    position: Position,\n    session: Session,\n    assignmentHours: Number\n): boolean {\n    if (!session || !Array.isArray(wageChunks)) {\n        return true;\n    }\n    // A single wage chunk matching the session rate is derivable\n    if (wageChunks.length === 1) {\n        const chunk: WageChunk = wageChunks[0];\n        if (\n            chunk.start_date === position.start_date &&\n            chunk.end_date === position.end_date &&\n            (chunk.rate === session.rate1 || chunk.rate === session.rate2) &&\n            chunk.hours === assignmentHours\n        ) {\n            return true;\n        }\n    }\n    // Two wage chunks split at January matching the session rates are derivable\n    if (wageChunks.length === 2) {\n        let [chunk1, chunk2] = wageChunks;\n        // If for some reason the wage chunks don't have dates, they aren't derivable.\n        if (\n            !chunk1.end_date ||\n            !chunk1.end_date ||\n            !chunk2.start_date ||\n            !chunk2.end_date\n        ) {\n            return false;\n        }\n        // Make sure the wage chunks are ordered by date\n        if (chunk1.end_date > chunk2.start_date) {\n            const tmp = chunk1;\n            chunk1 = chunk2;\n            chunk2 = tmp;\n        }\n\n        // If the wage chunk dates don't match the position's dates,\n        // we're not derivable.\n        if (\n            chunk1.start_date !== position.start_date ||\n            chunk2.end_date !== position.end_date\n        ) {\n            return false;\n        }\n\n        // If the sum of hours of wage chunks doesn't match the hours of assignment\n        // we're not derivable.\n        if (chunk1.hours + chunk2.hours !== assignmentHours) {\n            return false;\n        }\n\n        // If the wage chunks are split exactly at a year boundary and the rates\n        // match the session rates, then we *are* derivable.\n        if (\n            (chunk1.end_date || \"\").slice(5, 10) === \"12-31\" &&\n            (chunk2.start_date || \"\").slice(5, 10) === \"01-01\" &&\n            chunk1.rate === session.rate1 &&\n            chunk2.rate === session.rate2\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Prepare a minimal representation of the specified object suitable for\n * export. The returned object will contain exactly the fields needed to\n * perfectly reconstruct the object on import an no others. E.g., instructors\n * referenced by a position will only be referenced by UTORid (and won't have information\n * about their names, etc.).\n *\n * These function also strips all `id` fields, since these are database specific and\n * not used when importing.\n */\nexport const prepareMinimal = {\n    session: function (session: Session): MinimalSession {\n        return {\n            name: session.name,\n            start_date: session.start_date,\n            end_date: session.end_date,\n            rate1: session.rate1,\n            rate2: session.rate2,\n        };\n    },\n    contractTemplate: function (\n        contractTemplate: ContractTemplate\n    ): MinimalContractTemplate {\n        return {\n            template_name: contractTemplate.template_name,\n            template_file: contractTemplate.template_file,\n        };\n    },\n    instructor: function (instructor: Instructor): MinimalInstructor {\n        return {\n            first_name: instructor.first_name,\n            last_name: instructor.last_name,\n            utorid: instructor.utorid,\n            email: instructor.email,\n        };\n    },\n    position: function (position: Position): MinimalPosition {\n        return {\n            position_code: position.position_code,\n            position_title: position.position_title,\n            hours_per_assignment: position.hours_per_assignment,\n            start_date: position.start_date,\n            end_date: position.end_date,\n            duties: position.duties,\n            qualifications: position.qualifications,\n            desired_num_assignments: position.desired_num_assignments,\n            current_enrollment: position.current_enrollment,\n            current_waitlisted: position.current_waitlisted,\n            instructors: position.instructors.map(\n                (instructor) => instructor.utorid\n            ),\n            contract_template: position.contract_template.template_name,\n        };\n    },\n    posting: function (posting: Posting): MinimalPosting {\n        return {\n            name: posting.name,\n            open_date: posting.open_date,\n            close_date: posting.close_date,\n            intro_text: posting.intro_text,\n            custom_questions: posting.custom_questions,\n            posting_positions: posting.posting_positions.map(\n                prepareMinimal.postingPosition\n            ),\n        };\n    },\n    postingPosition: function (\n        postingPosition: PostingPosition\n    ): MinimalPostingPosition {\n        return {\n            position_code: postingPosition.position.position_code,\n            num_positions: postingPosition.num_positions,\n            hours: postingPosition.hours,\n        };\n    },\n    wageChunk: function (wageChunk: WageChunk): MinimalWageChunk {\n        return {\n            start_date: wageChunk.start_date,\n            end_date: wageChunk.end_date,\n            rate: wageChunk.rate,\n            hours: wageChunk.hours,\n        };\n    },\n    assignment: function (\n        assignment: Assignment,\n        session: Session\n    ): MinimalAssignment {\n        const ret: MinimalAssignment = {\n            utorid: assignment.applicant.utorid,\n            position_code: assignment.position.position_code,\n        } as MinimalAssignment;\n        // If there is an contract_override_pdf, we store it, otherwise\n        // the contract comes from the `position` so we don't need to store it.\n        if (assignment.contract_override_pdf) {\n            ret.contract_override_pdf = assignment.contract_override_pdf;\n        }\n\n        // If the start and end dates match the position, there is no need to\n        // store them.\n        const position = assignment.position;\n        if (\n            (assignment.start_date &&\n                assignment.start_date !== position.start_date) ||\n            (assignment.end_date && assignment.end_date !== position.end_date)\n        ) {\n            ret.start_date = assignment.start_date || position.start_date;\n            ret.end_date = assignment.end_date || position.end_date;\n        }\n        // If there is a single wage chunk and the rate matches the session rate,\n        // then just store the number of hours. Otherwise, store the wage chunk(s)\n        if (\n            !Array.isArray(assignment.wage_chunks) ||\n            assignment.wage_chunks.length === 0\n        ) {\n            ret.hours = assignment.hours;\n        } else if (\n            session &&\n            wageChunksMatchPositionAndSession(\n                assignment.wage_chunks,\n                position,\n                session,\n                assignment.hours\n            )\n        ) {\n            // The rate is the same as the session rate, so we don't need to store the\n            // wage chunk details\n            ret.hours = assignment.hours;\n        } else {\n            ret.wage_chunks = assignment.wage_chunks.map((chunk) =>\n                prepareMinimal.wageChunk(chunk)\n            );\n        }\n\n        return ret;\n    },\n    applicant: function (applicant: Applicant): MinimalApplicant {\n        return {\n            first_name: applicant.first_name,\n            last_name: applicant.last_name,\n            utorid: applicant.utorid,\n            email: applicant.email,\n            student_number: applicant.student_number,\n            phone: applicant.phone,\n        };\n    },\n    application: function (application: Application): MinimalApplication {\n        return Object.assign(prepareMinimal.applicant(application.applicant), {\n            annotation: application.annotation,\n            comments: application.comments,\n            department: application.department,\n            gpa: application.gpa,\n            program: application.program,\n            yip: application.yip,\n            previous_experience_summary:\n                application.previous_experience_summary,\n            previous_department_ta: application.previous_department_ta,\n            previous_university_ta: application.previous_university_ta,\n            documents: application.documents,\n            custom_question_answers: application.custom_question_answers,\n            posting: application.posting?.name || null,\n            position_preferences: application.position_preferences.map(\n                (position_preference) => ({\n                    position_code: position_preference.position.position_code,\n                    preference_level: position_preference.preference_level,\n                })\n            ),\n        });\n    },\n    ddah: function (ddah: Ddah): MinimalDdah {\n        const duties = [...ddah.duties];\n        duties.sort((a, b) => a.order - b.order);\n\n        return {\n            position_code: ddah.assignment.position.position_code,\n            applicant: ddah.assignment.applicant.utorid,\n            duties: duties.map((duty) => ({\n                hours: duty.hours,\n                description: duty.description,\n            })),\n        };\n    },\n};\n","import {\n    Applicant,\n    Application,\n    Assignment,\n    Ddah,\n    Instructor,\n    Position,\n    Posting,\n    WageChunk,\n} from \"../../api/defs/types\";\nimport { spreadsheetUndefinedToNull } from \"../import-export/undefinedToNull\";\nimport { prepareMinimal } from \"./prepare-minimal\";\n\n/**\n * Type of a spreadsheet cell\n */\ntype CellType = number | string | null | undefined;\n\n/**\n * Return an array of [hours, duty, hours duty, ...] for the specified `ddah`\n *\n * @param ddah\n * @returns\n */\nfunction flattenDuties(ddah: Ddah) {\n    const ret = [];\n    const duties = [...ddah.duties];\n    duties.sort((a, b) => a.order - b.order);\n\n    for (const duty of duties) {\n        ret.push(duty.hours);\n        ret.push(duty.description);\n    }\n\n    return ret;\n}\n\n/**\n * Format a date as YYYY-MM-DD for inserting into a spreadsheet\n *\n * @param {*} date\n * @returns\n */\nfunction formatDateForSpreadsheet(date: string | number | null | undefined) {\n    try {\n        return date && new Date(date).toJSON().slice(0, 10);\n    } catch (e) {\n        return \"\";\n    }\n}\n\ntype BasicWageChunk = ({ hours: number } & Record<string, any>)[];\ninterface HasWageChunk extends Record<string, any> {\n    wage_chunks: BasicWageChunk | undefined;\n}\n\n/**\n * Create header columns for a spreadsheet containing information about every pay period.\n *\n * @param {*} assignments\n * @returns\n */\nfunction createPayPeriodHeaders(assignments: HasWageChunk[]) {\n    const ret: string[] = [];\n    if (!assignments) {\n        return ret;\n    }\n    const maxNumPeriods = Math.max(\n        ...assignments.map((assignment) => assignment.wage_chunks?.length || 0),\n        0\n    );\n\n    for (let i = 0; i < maxNumPeriods; i++) {\n        ret.push(\n            `Period ${i + 1} Rate`,\n            `Period ${i + 1} Hours`,\n            `Period ${i + 1} Start Date`,\n            `Period ${i + 1} End Date`\n        );\n    }\n    return ret;\n}\n\n/**\n * Create formatted rows providing information about each wage chunk.\n *\n * @param {*} wageChunks\n * @returns\n */\nfunction formatWageChunksToList(\n    wageChunks: Omit<WageChunk, \"id\">[] | null | undefined\n) {\n    const ret: (string | number | undefined | null)[] = [];\n    if (!wageChunks) {\n        return ret;\n    }\n\n    ret.push(wageChunks.length);\n    for (const chunk of wageChunks) {\n        ret.push(\n            chunk.rate,\n            chunk.hours,\n            formatDateForSpreadsheet(chunk.start_date),\n            formatDateForSpreadsheet(chunk.end_date)\n        );\n    }\n    return ret;\n}\n\n/**\n * Functions which turns an array of objects into an Array of Arrays suitable\n * for converting into a spreadsheet.\n */\nexport const prepareSpreadsheet = {\n    instructor: function (instructors: Instructor[]) {\n        return spreadsheetUndefinedToNull(\n            ([\n                [\"Last Name\", \"First Name\", \"UTORid\", \"email\"],\n            ] as CellType[][]).concat(\n                instructors.map((instructor) => [\n                    instructor.last_name,\n                    instructor.first_name,\n                    instructor.utorid,\n                    instructor.email,\n                ])\n            )\n        );\n    },\n    applicant: function (applicants: Applicant[]) {\n        return spreadsheetUndefinedToNull(\n            ([\n                [\n                    \"Last Name\",\n                    \"First Name\",\n                    \"UTORid\",\n                    \"Student Number\",\n                    \"email\",\n                    \"Phone\",\n                ],\n            ] as CellType[][]).concat(\n                applicants.map((applicant) => [\n                    applicant.last_name,\n                    applicant.first_name,\n                    applicant.utorid,\n                    applicant.student_number,\n                    applicant.email,\n                    applicant.phone,\n                ])\n            )\n        );\n    },\n    application: function (applications: Application[]) {\n        const minApps = applications.map(prepareMinimal.application);\n        const baseUrl = document.location.origin;\n        return spreadsheetUndefinedToNull(\n            ([\n                [\n                    \"Last Name\",\n                    \"First Name\",\n                    \"UTORid\",\n                    \"Student Number\",\n                    \"email\",\n                    \"Phone\",\n                    \"Annotation\",\n                    \"Department\",\n                    \"Program\",\n                    \"YIP\",\n                    \"GPA\",\n                    \"Posting\",\n                    \"Position Preferences\",\n                    \"Previous Experience Summary\",\n                    \"Comments\",\n                    \"Documents\",\n                    \"Custom Question Answers\",\n                ],\n            ] as CellType[][]).concat(\n                minApps.map((application) => [\n                    application.last_name,\n                    application.first_name,\n                    application.utorid,\n                    application.student_number,\n                    application.email,\n                    application.phone,\n                    application.annotation,\n                    application.department,\n                    application.program,\n                    application.yip,\n                    application.gpa,\n                    application.posting,\n                    application.position_preferences\n                        .map(\n                            (position_preference) =>\n                                `${position_preference.preference_level}:${position_preference.position_code}`\n                        )\n                        .join(\"; \"),\n                    application.previous_experience_summary,\n                    application.comments,\n                    application.documents\n                        .map(\n                            (document) =>\n                                new URL(\n                                    `${baseUrl}/public/files/${document.url_token}`\n                                ).href\n                        )\n                        .join(\" \"),\n                    application.custom_question_answers\n                        ? JSON.stringify(application.custom_question_answers)\n                        : null,\n                ])\n            )\n        );\n    },\n    position: function (positions: Position[]) {\n        return spreadsheetUndefinedToNull(\n            ([\n                [\n                    \"Position Code\",\n                    \"Position Title\",\n                    \"Start Date\",\n                    \"End Date\",\n                    \"Hours Per Assignment\",\n                    \"Number of Assignments\",\n                    \"Contract Template\",\n                    \"Instructors\",\n                    \"Duties\",\n                    \"Qualifications\",\n                    \"Current Enrollment\",\n                    \"Current Waitlist\",\n                ],\n            ] as CellType[][]).concat(\n                positions.map((position) => [\n                    position.position_code,\n                    position.position_title,\n                    position.start_date &&\n                        new Date(position.start_date).toJSON().slice(0, 10),\n                    position.end_date &&\n                        new Date(position.end_date).toJSON().slice(0, 10),\n                    position.hours_per_assignment,\n                    position.desired_num_assignments,\n                    position.contract_template.template_name,\n                    position.instructors\n                        .map(\n                            (instructor) =>\n                                `${instructor.last_name}, ${instructor.first_name}`\n                        )\n                        .join(\"; \"),\n                    position.duties || \"\",\n                    position.qualifications || \"\",\n                    position.current_enrollment,\n                    position.current_waitlisted,\n                ])\n            )\n        );\n    },\n    posting: function (posting: Posting) {\n        // Most of the information about the posting is exported in the first row of the spreadsheet.\n        // However, the PostingPositions take many rows. In the additional rows we fill cells with\n        // `null` so that they show up empty in the spreadsheet.\n        const firstItems = [\n            posting.name,\n            posting.open_date,\n            posting.close_date,\n        ];\n        const lastItems = [\n            posting.intro_text,\n            JSON.stringify(posting.custom_questions),\n        ];\n        const emptyFirstItems = [null, null, null];\n        const emptyLastItems = [null, null];\n        return spreadsheetUndefinedToNull(\n            ([\n                [\n                    \"Name\",\n                    \"Open Date\",\n                    \"Close Date\",\n                    \"Position Code\",\n                    \"Num Positions\",\n                    \"Hours per Assignment\",\n                    \"Intro Text\",\n                    \"Custom Questions\",\n                ],\n            ] as CellType[][]).concat(\n                Array.from(\n                    { length: Math.max(posting.posting_positions.length, 1) },\n                    (_, i) => {\n                        const first = i === 0 ? firstItems : emptyFirstItems;\n                        const last = i === 0 ? lastItems : emptyLastItems;\n                        const postingPosition = posting.posting_positions[i];\n\n                        return [\n                            ...first,\n                            postingPosition?.position?.position_code,\n                            postingPosition?.num_positions,\n                            postingPosition?.hours,\n                            ...last,\n                        ];\n                    }\n                )\n            )\n        );\n    },\n    ddah: function prepareDdahsSpreadsheet(ddahs: Ddah[]) {\n        // Compute the maximum number of duties, because each duty gets a column.\n        const maxDuties = Math.max(\n            ...ddahs.map((ddah) => ddah.duties.length || 0),\n            0\n        );\n        // Create headers for the duty columns\n        const dutyHeaders = Array.from({ length: maxDuties * 2 }, (_, i) => {\n            if (i % 2 === 0) {\n                return `Hours ${i / 2 + 1}`;\n            }\n            return `Duty ${(i - 1) / 2 + 1}`;\n        });\n\n        return spreadsheetUndefinedToNull(\n            ([\n                [\n                    \"Position\",\n                    \"Last Name\",\n                    \"First Name\",\n                    \"email\",\n                    \"Assignment Hours\",\n                    \"Offer Status\",\n                    \"\",\n                ].concat(dutyHeaders),\n            ] as CellType[][]).concat(\n                ddahs.map((ddah) =>\n                    [\n                        ddah.assignment.position.position_code,\n                        ddah.assignment.applicant.last_name,\n                        ddah.assignment.applicant.first_name,\n                        ddah.assignment.applicant.email,\n                        ddah.assignment.hours,\n                        ddah.assignment.active_offer_status,\n                        \"\",\n                    ].concat(flattenDuties(ddah))\n                )\n            )\n        );\n    },\n    assignment: function (assignments: Assignment[]) {\n        // We want to flatten a lot of the data in `assignments` and only include the information\n        // we need.\n        const assignmentsForSpreadsheet = assignments.map((assignment) => ({\n            first_name: assignment.applicant.first_name,\n            last_name: assignment.applicant.last_name,\n            utorid: assignment.applicant.utorid,\n            email: assignment.applicant.email,\n            position_code: assignment.position.position_code,\n            start_date: assignment.start_date,\n            end_date: assignment.end_date,\n            contract_template: assignment.contract_override_pdf\n                ? null\n                : assignment.position.contract_template.template_name,\n            contract_override_pdf: assignment.contract_override_pdf,\n            hours: assignment.hours,\n            active_offer_status: assignment.active_offer_status,\n            active_offer_recent_activity_date:\n                assignment.active_offer_recent_activity_date,\n            wage_chunks: assignment.wage_chunks?.map((chunk) => ({\n                hours: chunk.hours,\n                rate: chunk.rate,\n                start_date: chunk.start_date,\n                end_date: chunk.end_date,\n            })),\n        }));\n        return spreadsheetUndefinedToNull(\n            ([\n                [\n                    \"Last Name\",\n                    \"First Name\",\n                    \"UTORid\",\n                    \"Email\",\n                    \"Position Code\",\n                    \"Start Date\",\n                    \"End Date\",\n                    \"Hours\",\n                    \"Contract Template\",\n                    \"Contract Override PDF\",\n                    \"Offer Status\",\n                    \"Recent Activity Date\",\n                    \"\",\n                    \"Number of Pay Periods\",\n                    ...createPayPeriodHeaders(assignmentsForSpreadsheet),\n                ],\n            ] as CellType[][]).concat(\n                assignmentsForSpreadsheet.map((assignment) => [\n                    assignment.last_name,\n                    assignment.first_name,\n                    assignment.utorid,\n                    assignment.email,\n                    assignment.position_code,\n                    formatDateForSpreadsheet(assignment.start_date),\n                    formatDateForSpreadsheet(assignment.end_date),\n                    assignment.hours,\n                    assignment.contract_template,\n                    assignment.contract_override_pdf,\n                    assignment.active_offer_status,\n                    null,\n                    assignment.active_offer_recent_activity_date,\n                    ...formatWageChunksToList(assignment.wage_chunks),\n                ])\n            )\n        );\n    },\n};\n","import { dataToFile } from \"./data-to-file\";\nimport { prepareSpreadsheet } from \"./prepare-spreadsheet\";\nimport { prepareMinimal } from \"./prepare-minimal\";\nimport type {\n    Applicant,\n    Application,\n    Assignment,\n    Ddah,\n    Instructor,\n    Position,\n    Posting,\n    Session,\n} from \"../../api/defs/types\";\nimport type { ExportFormat } from \"./data-to-file\";\n\nexport type PrepareDataFunc<T> = (data: T[], dataFormat: ExportFormat) => File;\ntype FilterFunc<T> = ((array: T[]) => T[]) | null;\n\n/**\n * Make a function that converts a list of applications into a `File` object.\n *\n * @export\n * @param {Applicant[]} applications\n * @param {\"csv\" | \"json\" | \"xlsx\"} dataFormat\n * @returns\n */\nexport function prepareApplicationData(\n    applications: Application[],\n    dataFormat: ExportFormat\n) {\n    return dataToFile(\n        {\n            toSpreadsheet: () => prepareSpreadsheet.application(applications),\n            toJson: () => ({\n                applications: applications.map((application) =>\n                    prepareMinimal.application(application)\n                ),\n            }),\n        },\n        dataFormat,\n        \"applications\"\n    );\n}\n\n/**\n * Make a function that converts a posting into a `File` object.\n *\n * @export\n * @param {Posting} posting\n * @param {\"csv\" | \"json\" | \"xlsx\"} dataFormat\n * @returns\n */\nexport function preparePostingData(posting: Posting, dataFormat: ExportFormat) {\n    return dataToFile(\n        {\n            toSpreadsheet: () => prepareSpreadsheet.posting(posting),\n            toJson: () => ({\n                postings: [prepareMinimal.posting(posting)],\n            }),\n        },\n        dataFormat,\n        \"postings\"\n    );\n}\n\n/**\n * Make a function that converts a list of applicants into a `File` object.\n *\n * @export\n * @param {Applicant[]} applicants\n * @param {\"csv\" | \"json\" | \"xlsx\"} dataFormat\n * @returns\n */\nexport function prepareApplicantData(\n    applicants: Applicant[],\n    dataFormat: ExportFormat\n) {\n    return dataToFile(\n        {\n            toSpreadsheet: () => prepareSpreadsheet.applicant(applicants),\n            toJson: () => ({\n                applicants: applicants.map((applicant) =>\n                    prepareMinimal.applicant(applicant)\n                ),\n            }),\n        },\n        dataFormat,\n        \"applicants\"\n    );\n}\n\n/**\n * A factory function which produces assignment prepareData function,\n *\n * @export\n * @param session\n * @param assignmentFilter\n * @returns\n */\nexport function prepareAssignmentDataFactory(\n    session: Session,\n    assignmentFilter: FilterFunc<Assignment> = null\n) {\n    // Make a function that converts a list of assignments into a `File` object.\n    return function prepareData(\n        assignments: Assignment[],\n        dataFormat: ExportFormat\n    ) {\n        if (assignmentFilter instanceof Function) {\n            assignments = assignmentFilter(assignments);\n        }\n        return dataToFile(\n            {\n                toSpreadsheet: () => prepareSpreadsheet.assignment(assignments),\n                toJson: () => ({\n                    assignments: assignments.map((assignment) =>\n                        prepareMinimal.assignment(assignment, session)\n                    ),\n                }),\n            },\n            dataFormat,\n            \"assignments\"\n        );\n    };\n}\n\n/**\n * A factory function which produces ddah prepareData function,\n *\n * @export\n * @param ddahFilter\n * @returns\n */\nexport function prepareDdahDataFactory(ddahFilter: FilterFunc<Ddah>) {\n    // Make a function that converts a list of ddahs into a `File` object.\n    return function prepareData(ddahs: Ddah[], dataFormat: ExportFormat) {\n        if (ddahFilter instanceof Function) {\n            ddahs = ddahFilter(ddahs);\n        }\n        return dataToFile(\n            {\n                toSpreadsheet: () => prepareSpreadsheet.ddah(ddahs),\n                toJson: () => ({\n                    ddahs: ddahs.map((ddah) => prepareMinimal.ddah(ddah)),\n                }),\n            },\n            dataFormat,\n            \"ddahs\"\n        );\n    };\n}\n\n/**\n * Make a function that converts a list of instructors into a `File` object.\n *\n * @export\n * @param {Instructor[]} instructors\n * @param {\"csv\" | \"json\" | \"xlsx\"} dataFormat\n * @returns\n */\nexport function prepareInstructorData(\n    instructors: Instructor[],\n    dataFormat: ExportFormat\n) {\n    return dataToFile(\n        {\n            toSpreadsheet: () => prepareSpreadsheet.instructor(instructors),\n            toJson: () => ({\n                instructors: instructors.map((instructor) =>\n                    prepareMinimal.instructor(instructor)\n                ),\n            }),\n        },\n        dataFormat,\n        \"instructors\"\n    );\n}\n\n/**\n * Make a function that converts a list of positions into a `File` object.\n *\n * @export\n * @param {Position[]} positions\n * @param {\"csv\" | \"json\" | \"xlsx\"} dataFormat\n * @returns\n */\nexport function preparePositionData(\n    positions: Position[],\n    dataFormat: ExportFormat\n) {\n    return dataToFile(\n        {\n            toSpreadsheet: () => prepareSpreadsheet.position(positions),\n            toJson: () => ({\n                positions: positions.map((position) =>\n                    prepareMinimal.position(position)\n                ),\n            }),\n        },\n        dataFormat,\n        \"positions\"\n    );\n}\n","import FuzzySet from \"fuzzyset\";\nimport { NormalizationSchema } from \"../schema\";\n\n/**\n * Delete all properties from `keyMap` that have `value` as\n * their value. This function mutates `keyMap`.\n *\n * @param {*} value\n * @param {*} keyMap\n * @returns\n */\nfunction deleteReferences(value: any, keyMap: Record<any, any>) {\n    for (const key in keyMap) {\n        if (keyMap[key] === value) {\n            delete keyMap[key];\n        }\n    }\n    return keyMap;\n}\n\n/**\n * Do fuzzy matching looking for the best approximation of\n * `keyMap[targetKey]`. E.g., if `keyMap = { foo: \"bar\" }`,\n * then `findMatchingKey(\"Foo\", keyMap)` would return `\"bar\"`.\n *\n * If no fuzzy match is found, `null` is returned.\n *\n * @param targetKey\n * @param [keyMap={}]\n * @returns\n */\nfunction findMatchingKey(\n    targetKey: string,\n    keyMap: Record<string, string | number> = {}\n) {\n    if (targetKey in keyMap) {\n        return keyMap[targetKey];\n    }\n    const fuzzySet = FuzzySet(Object.keys(keyMap));\n    // We set a 70% match threshold to prevent mismatches.\n    const matches = (fuzzySet.get as any)(targetKey, null, 0.7);\n    if (matches) {\n        // Since we already checked for 100% matches, `matches` will\n        // always be an array of results of the form [[<%match>, <value matched>]]\n        const matchedKey = matches[0][1];\n        return keyMap[matchedKey];\n    }\n\n    return null;\n}\n\n/**\n * Given a `schema`, use fuzzy matching to match column names to\n * schema values.\n *\n * @class SpreadsheetRowMapper\n */\nexport class SpreadsheetRowMapper<\n    T extends Pick<NormalizationSchema<string[]>, \"keys\" | \"keyMap\">\n> {\n    keys: T[\"keys\"];\n    keyMap: Record<string, string | number>;\n    unmatchedKeys: Record<string, string | number>;\n    empiricalKeyMap: Record<string, string | number>;\n    unknownKeys: Record<string, boolean>;\n\n    constructor(schema: T) {\n        this.keys = schema.keys;\n        this.keyMap = { ...schema.keyMap };\n        // `keys` are always valid, so make sure they are in the keymap.\n        for (const key of this.keys) {\n            this.keyMap[key] = key;\n        }\n        // Maintain a copy of `this.keyMap`. Items are deleted\n        // from this copy when they are matched (and cached). That\n        // way we don't accidentally double-match an item.\n        this.unmatchedKeys = { ...this.keyMap };\n\n        // This stores associations that we've found in\n        // the spreadsheet already.\n        this.empiricalKeyMap = {};\n        this.unknownKeys = {};\n    }\n    /**\n     * Inputs an object, e.g. `{\"First Name\": \"Joe\", \"Last Name\": \"Smith\"}`\n     * and returns a formatted object where the keys have been replaced by\n     * keys from the schema. E.g., this function might return `{first_name: \"Joe\", last_name: \"Smith\"}`.\n     *\n     * The search for appropriate keys is done with a fuzzy matching algorithm, so\n     * the processed spreadsheet headers don't need to exactly match what's given.\n     *\n     * @param row\n     * @param log - whether or not to show lookups using `console.log`\n     * @memberof SpreadsheetRowMapper\n     */\n    formatRow(row: Record<string, any>, log = true) {\n        const ret: Record<string, any> = {};\n        for (const [key, value] of Object.entries(row)) {\n            // If we've found this key before, use the cached version.\n            if (key in this.empiricalKeyMap) {\n                ret[this.empiricalKeyMap[key]] = value;\n                continue;\n            }\n            // If we have cached that we don't know a key, continue\n            if (key in this.unknownKeys) {\n                continue;\n            }\n            const matchedKey = findMatchingKey(key, this.unmatchedKeys);\n            if (matchedKey == null) {\n                if (log) {\n                    console.log(\n                        \"Could not find a key corresponding to spreadsheet column\",\n                        `\"${key}\"`\n                    );\n                }\n                this.unknownKeys[key] = true;\n                continue;\n            }\n            if (log) {\n                console.log(\n                    \"Assuming association between spreadsheet column\",\n                    `\"${key}\"`,\n                    \"and the key\",\n                    `\"${matchedKey}\"`\n                );\n            }\n            this.empiricalKeyMap[key] = matchedKey;\n            deleteReferences(matchedKey, this.unmatchedKeys);\n            ret[matchedKey] = value;\n        }\n\n        return ret;\n    }\n}\n","import FuzzySet from \"fuzzyset\";\n\ninterface Person {\n    utorid: string;\n    first_name: string;\n    last_name: string | null;\n}\n\n/**\n * Find a suitable match in the `people` array for `name`. `name` can\n * be a utorid or a string `\"Last, First\"` or a string `\"First Last\"`.\n * If no suitable match is found, an error is thrown.\n *\n * @export\n * @param {string} name\n * @param {{utorid: string, first_name: string, last_name: string}[]} people\n * @returns\n */\nexport function matchByUtoridOrName<T extends Person>(\n    name: string,\n    people: T[]\n): T {\n    let match = people.find((x) => x.utorid === name);\n    if (match) {\n        // We found an exact match by UTORid\n        return match;\n    }\n\n    const nameHash: Record<string, T> = {};\n    for (const person of people) {\n        // We want to be able to match no matter the order in which the names are specified.\n        nameHash[`${person.last_name}, ${person.first_name}`] = person;\n        nameHash[`${person.first_name} ${person.last_name}`] = person;\n    }\n\n    const fuzzySet = FuzzySet(Object.keys(nameHash));\n    let fuzzyMatch: [number, string][] | string = (fuzzySet.get as any)(\n        name,\n        null,\n        0.7\n    );\n    if (fuzzyMatch) {\n        // If we get an array as a result, it will be of the form [[<%match>, <value matched>]]\n        let matchedKey = Array.isArray(fuzzyMatch)\n            ? fuzzyMatch[0][1]\n            : fuzzyMatch;\n        return nameHash[matchedKey];\n    }\n\n    throw new Error(`Could not find a match for \"${name}\"`);\n}\n","import { NormalizationSchema } from \"../schema\";\n\n/**\n * Validates `data` based on the specified `schema`. At the moment this\n * function only checks that every key specified by `schema.requiredKeys` is\n * non-null.\n *\n * @export\n * @param {*} data\n * @param {*} schema\n */\nexport function validate(data: any[], schema: NormalizationSchema<string[]>) {\n    const { requiredKeys, keys } = schema;\n    for (const item of data) {\n        for (const key of requiredKeys) {\n            if (item[key] == null) {\n                throw new Error(\n                    `Item \"${JSON.stringify(\n                        item\n                    )}\" missing required property \"${key}\"`\n                );\n            }\n        }\n        // convert all undefined values to null inside normalized object\n        for (const key of keys) {\n            if (item[key] === undefined) {\n                item[key] = null;\n            }\n        }\n    }\n}\n","import * as chrono from \"chrono-node\";\nimport { NormalizationSchema } from \"../schema\";\nimport { SpreadsheetRowMapper } from \"./spreadsheet-row-mapper\";\nimport { validate } from \"./validate\";\n\n/**\n * Parse a date string or integer and return a normalized date string.\n *\n * @param str - input date; either a string or an excel date integer\n * @returns date in YYYY-MM-DD:T00:00:00.000 format\n */\nfunction parseDate(str: string | number) {\n    // Dates parsed from excel will come in as a number. Convert those to an appropriate string first.\n    if (typeof str === \"number\") {\n        // Convert to seconds since epoch\n        const sec = Math.round((str - 25569) * 86400 * 1000);\n        // Excel ignores timezone information, so we need to parse this and\n        // remove the timezone tag.\n        str = new Date(sec).toJSON().replace(\"Z\", \"\");\n    }\n    // Parse the date accepting many different formats\n    let date = chrono.parseDate(str);\n    // We need to jump through some hoops to remove all the timezone information.\n    try {\n        return date.toJSON().replace(/T.*/, \"T00:00:00.000Z\");\n    } catch (e) {\n        throw new Error(`Cannot parse \"${str}\" as date`);\n    }\n}\n\nexport type DataFormat =\n    | { fileType: \"json\"; data: any }\n    | { fileType: \"spreadsheet\"; data: any[][] };\n\n/**\n * Use `schema` to normalize `data` to be an array of objects specified\n * by `schema`. `data` is expected to be an object with `fileType`\n * and `data` attributes. `data.fileType` may be `\"json\"` or `\"spreadsheet\"`.\n * `\"json\"` data is expected to already match the schema. `\"spreadsheet\"` data\n * is converted to match the schema using fuzzy matching on column names (if needed).\n *\n * @export\n * @returns\n */\nexport function normalizeImport(\n    dataWrapper: DataFormat,\n    schema: NormalizationSchema<string[]> = {\n        keys: [],\n        requiredKeys: [],\n        dateColumns: [],\n        keyMap: {},\n        primaryKey: \"\",\n        baseName: \"\",\n    },\n    log = true\n) {\n    const { keys, baseName } = schema;\n    let ret = [];\n    if (dataWrapper.fileType === \"json\") {\n        // Unwrap data so that it's just an array\n        let data = dataWrapper.data;\n        if (data[baseName]) {\n            data = data[baseName];\n        }\n        for (const item of data) {\n            const newItem: Record<string, any> = {};\n            for (const key of keys) {\n                newItem[key] = item[key];\n            }\n            ret.push(newItem);\n        }\n    }\n\n    if (dataWrapper.fileType === \"spreadsheet\") {\n        // `data` should be an array of objects indexed by column name.\n        // E.g., [{\"First Name\": \"Joe\", \"Last Name\": \"Smith\"}, ...]\n        let data = dataWrapper.data;\n\n        const rowMapper = new SpreadsheetRowMapper(schema);\n\n        for (const row of data) {\n            ret.push(rowMapper.formatRow(row, log));\n        }\n    }\n\n    if (schema.dateColumns && schema.dateColumns.length > 0) {\n        ret = ret.map((row) => {\n            const newRow = { ...row };\n            for (const col of schema.dateColumns) {\n                if (newRow[col] != null) {\n                    newRow[col] = parseDate(newRow[col]);\n                }\n            }\n            return newRow;\n        });\n    }\n\n    validate(ret, schema);\n\n    return ret;\n}\n","import {\n    WageChunk,\n    Position,\n    Assignment,\n    MinimalWageChunk,\n    MinimalSession,\n    MinimalPosition,\n    MinimalInstructor,\n    MinimalAssignment,\n    MinimalContractTemplate,\n    MinimalApplicant,\n    MinimalDdah,\n    Session,\n    Instructor,\n    ContractTemplate,\n    Applicant,\n    Ddah,\n    MinimalPosting,\n    Posting,\n    PostingPosition,\n} from \"../../api/defs/types\";\n\n/**\n * The function type of a function that creates an upsertable\n * object. I.e., it may or may not have an ID field.\n *\n * @interface PrepareUpsertable\n * @template T - Minimal representation\n * @template U - Full representation\n * @template V - Context attributes that are required to create a full representation\n */\n\ninterface PrepareUpsertable<T, U, Context> {\n    (minimal: T, context: Omit<Context, \"id\">): Omit<U, \"id\">;\n    (minimal: T, context: Context): U;\n}\n\ninterface Context {\n    session: Session;\n    instructors: Instructor[];\n    contractTemplates: ContractTemplate[];\n    positions: Position[];\n    applicants: Applicant[];\n}\n\nexport interface IdContext extends Context {\n    id: number;\n}\n\nexport interface PrepareFull {\n    session: PrepareUpsertable<MinimalSession, Session, { id: number }>;\n    contractTemplate: PrepareUpsertable<\n        MinimalContractTemplate,\n        ContractTemplate,\n        { id: number }\n    >;\n    instructor: PrepareUpsertable<\n        MinimalInstructor,\n        Instructor,\n        { id: number }\n    >;\n    applicant: PrepareUpsertable<MinimalApplicant, Applicant, { id: number }>;\n    position: PrepareUpsertable<\n        MinimalPosition,\n        Position,\n        {\n            id: number;\n            contractTemplates: ContractTemplate[];\n            instructors: Instructor[];\n        }\n    >;\n    wageChunk: PrepareUpsertable<MinimalWageChunk, WageChunk, { id: number }>;\n    assignment: PrepareUpsertable<\n        MinimalAssignment,\n        Assignment,\n        {\n            id: number;\n            session: Session;\n            applicants: Applicant[];\n            positions: Position[];\n        }\n    >;\n    ddah: PrepareUpsertable<\n        MinimalDdah,\n        Ddah,\n        {\n            id: number;\n            assignments: Assignment[];\n        }\n    >;\n    posting: PrepareUpsertable<\n        MinimalPosting,\n        Posting,\n        {\n            id: number;\n            positions: Position[];\n        }\n    >;\n}\n\nexport const prepareFull: PrepareFull = {\n    session: function (minSession: MinimalSession, context?: any): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minSession };\n        }\n        return minSession;\n    },\n    contractTemplate: function (\n        minContractTemplate: MinimalContractTemplate,\n        context?: any\n    ): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minContractTemplate };\n        }\n        return minContractTemplate;\n    },\n    instructor: function (\n        minInstructor: MinimalInstructor,\n        context?: any\n    ): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minInstructor };\n        }\n        return minInstructor;\n    },\n    applicant: function (minApplicant: MinimalApplicant, context?: any): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minApplicant };\n        }\n        return minApplicant;\n    },\n    position: function (minPosition: MinimalPosition, context?: any): any {\n        const { id, instructors, contractTemplates }: Partial<IdContext> =\n            context || {};\n        if (!Array.isArray(instructors)) {\n            throw new Error(\n                \"You must pass an array of instructors to reconstruct a position\"\n            );\n        }\n        if (!Array.isArray(contractTemplates)) {\n            throw new Error(\n                \"You must pass an array of contract templates to reconstruct a position\"\n            );\n        }\n\n        const ret: Partial<Position> = {\n            position_code: minPosition.position_code,\n            position_title: minPosition.position_title,\n            hours_per_assignment: minPosition.hours_per_assignment,\n            start_date: minPosition.start_date,\n            end_date: minPosition.end_date,\n            duties: minPosition.duties,\n            qualifications: minPosition.qualifications,\n            desired_num_assignments: minPosition.desired_num_assignments,\n            current_enrollment: minPosition.current_enrollment,\n            current_waitlisted: minPosition.current_waitlisted,\n        };\n\n        // Add in the id if we have it\n        if (id != null) {\n            ret.id = id;\n        }\n\n        // Search for and add the contract template\n        const contract_template = contractTemplates.find(\n            (template) =>\n                template.template_name === minPosition.contract_template\n        );\n        if (contract_template == null) {\n            throw new Error(\n                `Couldn't find contract template with name \"${minPosition.contract_template}\"`\n            );\n        }\n        ret.contract_template = contract_template;\n\n        // Search for an add the list of instructors\n        const instructorList = minPosition.instructors.map((utorid) => {\n            const match = instructors.find((x) => x.utorid === utorid);\n            if (match == null) {\n                throw new Error(\n                    `Could not find instructor with utorid \"${utorid}\"`\n                );\n            }\n            return match;\n        });\n        ret.instructors = instructorList;\n\n        return ret;\n    },\n    wageChunk: function (minWageChunk: MinimalWageChunk, context?: any): any {\n        const { id } = context || {};\n        if (id != null) {\n            return { id, ...minWageChunk };\n        }\n        return minWageChunk;\n    },\n    assignment: function (\n        minAssignment: MinimalAssignment,\n        context?: any\n    ): any {\n        const { id, positions, applicants, session }: Partial<IdContext> =\n            context || {};\n        if (!Array.isArray(positions)) {\n            throw new Error(\n                \"You must pass an array of positions to reconstruct an assignment\"\n            );\n        }\n        if (!Array.isArray(applicants)) {\n            throw new Error(\n                \"You must pass an array of applicants to reconstruct an assignment\"\n            );\n        }\n        if (!session) {\n            throw new Error(\n                \"You must pass a session to reconstruct an assignment\"\n            );\n        }\n\n        const ret: Partial<Assignment> = {\n            contract_override_pdf: minAssignment.contract_override_pdf,\n        };\n\n        // Add in the id if we have it\n        if (id != null) {\n            ret.id = id;\n        }\n\n        if (minAssignment.hours != null) {\n            ret.hours = minAssignment.hours;\n        }\n\n        // Attach the position\n        const position = positions.find(\n            (x) => x.position_code === minAssignment.position_code\n        );\n        if (position == null) {\n            throw new Error(\n                `Cannot find position with position code \"${minAssignment.position_code}\"`\n            );\n        }\n        ret.position = position;\n\n        // Attach the applicant\n        const applicant = applicants.find(\n            (x) => x.utorid === minAssignment.utorid\n        );\n        if (applicant == null) {\n            throw new Error(\n                `Couldn't find applicant with UTORid \"${minAssignment.utorid}\"`\n            );\n        }\n        ret.applicant = applicant;\n\n        // Attach the wage chunks\n        if (Array.isArray(minAssignment.wage_chunks)) {\n            let hours = 0;\n            for (const chunk of minAssignment.wage_chunks) {\n                hours += chunk.hours;\n            }\n            ret.hours = hours;\n            ret.wage_chunks = minAssignment.wage_chunks as WageChunk[];\n        }\n\n        // Compute the start and end dates\n        ret.start_date = minAssignment.start_date || position.start_date;\n        ret.end_date = minAssignment.end_date || position.end_date;\n\n        return ret;\n    },\n    ddah: function (minDdah: MinimalDdah, context?: any): any {\n        const { id, assignments }: { id?: number; assignments?: Assignment[] } =\n            context || {};\n        if (!Array.isArray(assignments)) {\n            throw new Error(\n                \"You must pass an array of assignments to reconstruct a ddah\"\n            );\n        }\n        const matchingAssignment = assignments.find(\n            (assignment) =>\n                assignment.applicant.utorid === minDdah.applicant &&\n                assignment.position.position_code === minDdah.position_code\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Cannot find assignment corresponding to '${minDdah.position_code}' and UTORid '${minDdah.applicant}'`\n            );\n        }\n        const duties = minDdah.duties.map((duty, i) => ({\n            ...duty,\n            order: i + 1,\n        }));\n\n        let total_hours = 0;\n        for (const duty of duties) {\n            total_hours += duty.hours;\n        }\n\n        if (id == null) {\n            return {\n                assignment: matchingAssignment,\n                duties,\n                total_hours,\n                status: null,\n            };\n        }\n        return {\n            id,\n            assignment: matchingAssignment,\n            duties,\n            total_hours,\n            // We cannot import \"signed\" DDAHs, so the `status` is always null\n            status: null,\n        };\n    },\n    posting: function (minPosting: MinimalPosting, context?: any): any {\n        const { id, positions }: { id?: number; positions: Position[] } =\n            context || {};\n        if (!Array.isArray(positions)) {\n            throw new Error(\n                \"You must pass a positions list to create a posting\"\n            );\n        }\n        // We may or may not have an id. We lie to Typescript to keep it from complaining,\n        // since we create a posting without an id first and then update it to have an id\n        // if needed.\n        const ret: Posting = ({\n            name: minPosting.name,\n            applications: [],\n            availability: \"auto\",\n            open_date: minPosting.open_date,\n            close_date: minPosting.close_date,\n            custom_questions: minPosting.custom_questions,\n            intro_text: minPosting.intro_text,\n            url_token: \"\",\n            posting_positions: [],\n        } as unknown) as Posting;\n        let postingPositions: PostingPosition[] = minPosting.posting_positions.map(\n            (minPostingPosition) => {\n                const position = positions.find(\n                    (position) =>\n                        position.position_code ===\n                        minPostingPosition.position_code\n                );\n                if (position == null) {\n                    throw new Error(\n                        `Could not find position corresponding to \"${minPostingPosition.position_code}\"`\n                    );\n                }\n                return {\n                    hours: minPostingPosition.hours,\n                    num_positions: minPostingPosition.num_positions,\n                    position,\n                    posting: ret as Posting,\n                };\n            }\n        );\n        if (id != null) {\n            ret.id = id;\n        }\n        ret.posting_positions = postingPositions;\n        return ret;\n    },\n};\n","import { Applicant, MinimalDdah } from \"../../api/defs/types\";\nimport {\n    SpreadsheetRowMapper,\n    matchByUtoridOrName,\n} from \"../../libs/import-export\";\n\n/**\n * Convert imported spreadsheet or JSON data into an\n * array of minimal DDAH objects.\n *\n * @param {({\n *     fileType: \"json\" | \"spreadsheet\";\n *     data: any;\n * })} data\n * @param {Applicant[]} applicants\n * @returns {MinimalDdah[]}\n */\nexport function normalizeDdahImports(\n    data: {\n        fileType: \"json\" | \"spreadsheet\";\n        data: any;\n    },\n    applicants: Applicant[],\n    log = true\n): MinimalDdah[] {\n    let ret: MinimalDdah[] = [];\n\n    if (data.fileType === \"json\") {\n        let unwrapped: MinimalDdah[] = data.data;\n        if ((unwrapped as any).ddahs) {\n            unwrapped = (unwrapped as any).ddahs;\n        }\n        for (const ddah of unwrapped) {\n            ret.push(ddah);\n        }\n    }\n\n    if (data.fileType === \"spreadsheet\") {\n        const unwrapped = data.data;\n        // Get an upper bound for the maximum number of duties that the spreadsheet might have\n        let maxDuties = Math.round(\n            Math.max(\n                ...unwrapped.map((row: object) => Object.keys(row).length),\n                0\n            ) / 2\n        );\n        // If cells are blank, SheetJS does not import them. Therefore,\n        // the max number of cells found will be an under-count. This\n        // caused issue https://github.com/uoft-tapp/tapp/issues/575\n        // As an ugly hack, we just assume there's no more than 50 additional duties.\n        maxDuties += 50;\n\n        // We need to generate a keymap for all the likely column names\n        const keyMap: { [key: string]: string } = {\n            Position: \"position_code\",\n            \"First Name\": \"first_name\",\n            \"Given Name\": \"first_name\",\n            First: \"first_name\",\n            \"Last Name\": \"last_name\",\n            Surname: \"last_name\",\n            \"Family Name\": \"last_name\",\n            Last: \"last_name\",\n        };\n        // We will also add `Hours #` and `Duty #` to the keymap for the number of duties in our range\n        for (let i = 0; i <= maxDuties; i++) {\n            keyMap[`Duty ${i}`] = `duty_${i}`;\n            keyMap[`Hours ${i}`] = `hours_${i}`;\n            if (i < 10) {\n                keyMap[`Duty 0${i}`] = `duty_${i}`;\n                keyMap[`Hours 0${i}`] = `hours_${i}`;\n            }\n        }\n\n        // SpreadsheetRowMapper will perform fuzzy matching of column names for us.\n        const rowMapper = new SpreadsheetRowMapper({\n            keys: [\"position_code\", \"first_name\", \"last_name\", \"utorid\"],\n            keyMap,\n        });\n\n        for (const row of unwrapped) {\n            const normalized: {\n                [key: string]: any;\n            } = rowMapper.formatRow(row, log);\n            if (normalized.utorid == null) {\n                // If a UTORid column was not specified, we need to manually search the applicants for\n                // someone matching the first/last name. `matchByUtoridOrName` will succeed or throw an error,\n                // so if we make it past this line of code, we've successfully found a match.\n                const applicant = matchByUtoridOrName(\n                    `${normalized.first_name} ${normalized.last_name}`,\n                    applicants\n                ) as Applicant;\n                normalized.utorid = applicant.utorid;\n                delete normalized.first_name;\n                delete normalized.last_name;\n            }\n            // Now we need to condense duties to a list\n            // The easiest way is to just hunt for them\n            const duties: { description: string; hours: number }[] = [];\n            for (let i = 0; i <= maxDuties; i++) {\n                const duty = normalized[`duty_${i}`];\n                const hours = normalized[`hours_${i}`];\n                if (duty != null || hours != null) {\n                    duties.push({ description: duty || \"\", hours: hours || 0 });\n                    delete normalized[`duty_${i}`];\n                    delete normalized[`hours_${i}`];\n                }\n            }\n            ret.push({\n                position_code: normalized.position_code,\n                applicant: normalized.utorid,\n                duties,\n            });\n        }\n    }\n\n    return ret;\n}\n","import {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, HasId, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { instructorsReducer } from \"../reducers/instructors\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\nimport { Instructor, RawInstructor } from \"../defs/types\";\nimport { ExportFormat, PrepareDataFunc } from \"../../libs/import-export\";\n\n// actions\nexport const fetchInstructorsSuccess = actionFactory<RawInstructor[]>(\n    FETCH_INSTRUCTORS_SUCCESS\n);\nconst fetchOneInstructorSuccess = actionFactory<RawInstructor>(\n    FETCH_ONE_INSTRUCTOR_SUCCESS\n);\nconst upsertOneInstructorSuccess = actionFactory<RawInstructor>(\n    UPSERT_ONE_INSTRUCTOR_SUCCESS\n);\nconst deleteOneInstructorSuccess = actionFactory<RawInstructor>(\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n);\n\n// dispatchers\nexport const fetchInstructors = validatedApiDispatcher({\n    name: \"fetchInstructors\",\n    description: \"Fetch instructors\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(`/${role}/instructors`)) as RawInstructor[];\n        dispatch(fetchInstructorsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchInstructor = validatedApiDispatcher({\n    name: \"fetchInstructor\",\n    description: \"Fetch instructor\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/instructors/${payload.id}`\n        )) as RawInstructor;\n        dispatch(fetchOneInstructorSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertInstructor = validatedApiDispatcher({\n    name: \"upsertInstructor\",\n    description: \"Add/insert instructor\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<Instructor>) => async (\n        dispatch,\n        getState\n    ) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/instructors`,\n            payload\n        )) as RawInstructor;\n        dispatch(upsertOneInstructorSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteInstructor = validatedApiDispatcher({\n    name: \"deleteInstructor\",\n    description: \"Delete instructor\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/instructors/delete`,\n            payload\n        )) as RawInstructor;\n        dispatch(deleteOneInstructorSuccess(data));\n    },\n});\n\nexport const exportInstructors = validatedApiDispatcher({\n    name: \"exportInstructors\",\n    description: \"Export instructors\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (\n        formatter: PrepareDataFunc<Instructor>,\n        format: ExportFormat = \"spreadsheet\"\n    ) => async (dispatch, getState) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all instructors from the server in case things happened to be out of sync.\n        await dispatch(fetchInstructors());\n        const instructors = instructorsSelector(getState());\n\n        return formatter(instructors, format);\n    },\n});\n\nexport const upsertInstructors = validatedApiDispatcher({\n    name: \"upsertInstructors\",\n    description: \"Upsert instructors\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (instructors: Partial<Instructor>[]) => async (dispatch) => {\n        if (instructors.length === 0) {\n            return;\n        }\n        const dispatchers = instructors.map((instructor) =>\n            dispatch(upsertInstructor(instructor))\n        );\n        await Promise.all(dispatchers);\n        // Re-fetch all instructors from the server in case things happened to be out of sync.\n        return await dispatch(fetchInstructors());\n    },\n});\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nconst localStoreSelector = instructorsReducer._localStoreSelector;\nexport const instructorsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData as Instructor[]\n);\n","import {\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, HasId, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { contractTemplatesReducer } from \"../reducers/contract_templates\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\nimport { bytesToBase64 } from \"../mockAPI/utils\";\nimport { activeSessionSelector } from \"./sessions\";\nimport {\n    ContractTemplate,\n    RawAttachment,\n    RawContractTemplate,\n} from \"../defs/types\";\n\n// actions\nexport const fetchContractTemplatesSuccess = actionFactory(\n    FETCH_CONTRACT_TEMPLATES_SUCCESS\n);\nconst fetchAllContractTemplatesSuccess = actionFactory(\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\n);\nconst upsertOneContractTemplateSuccess = actionFactory(\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\nconst deleteOneContractTemplateSuccess = actionFactory(\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\n\nconst MissingActiveSessionError = new Error(\n    \"Cannot interact with Contract Templates without an active session\"\n);\n// dispatchers\nexport const fetchContractTemplates = validatedApiDispatcher({\n    name: \"fetchContractTemplates\",\n    description: \"Fetch contract_templates\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw MissingActiveSessionError;\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/contract_templates`\n        )) as RawContractTemplate[];\n        dispatch(fetchContractTemplatesSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertContractTemplate = validatedApiDispatcher({\n    name: \"upsertContractTemplate\",\n    description: \"Add/insert contract_template\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<ContractTemplate>) => async (\n        dispatch,\n        getState\n    ) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw MissingActiveSessionError;\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates`,\n            payload\n        )) as RawContractTemplate;\n        dispatch(upsertOneContractTemplateSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteContractTemplate = validatedApiDispatcher({\n    name: \"deleteContractTemplate\",\n    description: \"Delete contract_template from a session\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw MissingActiveSessionError;\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates/delete`,\n            payload\n        )) as RawContractTemplate;\n        dispatch(deleteOneContractTemplateSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchAllContractTemplates = validatedApiDispatcher({\n    name: \"fetchAllContractTemplates\",\n    description: \"Fetch all available contract_templates\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/available_contract_templates`\n        )) as { template_file: string }[];\n        dispatch(fetchAllContractTemplatesSuccess(data));\n        return data;\n    },\n});\n\nexport const previewContractTemplate = validatedApiDispatcher({\n    name: \"previewContractTemplate\",\n    description:\n        \"Preview the html content of a contract template. No redux state is set by this call, but the contents of the template is returned.\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (template_id: number) => async (_dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/contract_templates/${template_id}/view`\n        )) as string;\n        return data;\n    },\n});\n\nexport const downloadContractTemplate = validatedApiDispatcher({\n    name: \"downloadContractTemplate\",\n    description:\n        \"Download the content of a contract template. No redux state is set by this call, but a `File` object with the contents of the template is returned.\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (template_id: number) => async (_dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/contract_templates/${template_id}/download`\n        )) as RawAttachment;\n        // The data comes in encoded as base64, so we decode it as binary data.\n        const content = new Uint8Array(\n            atob(data.content)\n                .split(\"\")\n                .map((x) => x.charCodeAt(0))\n        );\n        return new File([content], data.file_name, {\n            type: data.mime_type,\n        });\n    },\n});\n\nexport const uploadContractTemplate = validatedApiDispatcher({\n    name: \"uploadContractTemplate\",\n    description: \"Upload the `File` object as a contract template\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (file: File) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n\n        // We are expected to upload data in base64, so convert the file\n        // object to base64.\n        const file_name = file.name;\n        const rawContent = new Uint8Array(await file.arrayBuffer());\n        const content = bytesToBase64(rawContent);\n\n        const data = await apiPOST(`/${role}/contract_templates/upload`, {\n            file_name,\n            content,\n        });\n\n        dispatch(fetchAllContractTemplatesSuccess(data));\n        return data;\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nconst localStoreSelector = contractTemplatesReducer._localStoreSelector;\nexport const contractTemplatesSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData as ContractTemplate[]\n);\nexport const allContractTemplatesSelector = createSelector(\n    localStoreSelector,\n    (state) => state.all\n);\n","/*\n * A collection of utility functions for interfacing with urls\n */\n\n/**\n * Try to parse `s` as a native javascript type. E.g., \"45.6\" will\n * be parsed as a number, \"true\" will be parsed as `true`, \"[]\"\n * will be parsed as an empty array.\n *\n * @param {string} s\n * @returns\n */\nfunction stringToNativeType(s: string) {\n    if (typeof s === \"string\" && s !== \"\" && !Number.isNaN(+s)) {\n        return +s;\n    }\n    try {\n        return JSON.parse(s);\n    } catch (e) {\n        return s;\n    }\n}\n\nfunction parseURLSearchString(s: string) {\n    const searchParams = new URLSearchParams(s);\n    const ret: Record<string, any> = {};\n    for (const [key, val] of searchParams.entries()) {\n        ret[key] = stringToNativeType(val);\n    }\n    return ret;\n}\n\nexport { stringToNativeType, parseURLSearchString };\n","import {\n    FETCH_DDAHS_SUCCESS,\n    FETCH_ONE_DDAH_SUCCESS,\n    UPSERT_ONE_DDAH_SUCCESS,\n    DELETE_ONE_DDAH_SUCCESS,\n    DDAH_APPROVE_SUCCESS,\n    DDAH_EMAIL_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n    HasId,\n    hasSubIdField,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\nimport { ddahsReducer } from \"../reducers\";\nimport { assignmentsSelector } from \"./assignments\";\nimport type { Ddah, RawAttachment, RawDdah } from \"../defs/types\";\nimport { activeSessionSelector } from \"./sessions\";\n\n// actions\nconst fetchDdahsSuccess = actionFactory<RawDdah[]>(FETCH_DDAHS_SUCCESS);\nconst fetchOneDdahSuccess = actionFactory<RawDdah>(FETCH_ONE_DDAH_SUCCESS);\nconst upsertOneDdahSuccess = actionFactory<RawDdah>(UPSERT_ONE_DDAH_SUCCESS);\nconst deleteOneDdahSuccess = actionFactory<RawDdah>(DELETE_ONE_DDAH_SUCCESS);\nconst approveOneDdahSuccess = actionFactory<RawDdah>(DDAH_APPROVE_SUCCESS);\nconst emailOneDdahSuccess = actionFactory<RawDdah>(DDAH_EMAIL_SUCCESS);\n\n// dispatchers\nexport const fetchDdahs = validatedApiDispatcher({\n    name: \"fetchDdahs\",\n    description: \"Fetch DDAHs\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw new Error(\"Cannot fetch DDAHs without an active session\");\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/ddahs`\n        )) as RawDdah[];\n        dispatch(fetchDdahsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchDdah = validatedApiDispatcher({\n    name: \"fetchDdah\",\n    description: \"Fetch a DDAH\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(`/${role}/ddahs/${payload.id}`)) as RawDdah;\n        dispatch(fetchOneDdahSuccess(data));\n        return data;\n    },\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst assignmentToAssignmentId = flattenIdFactory<\n    \"assignment\",\n    \"assignment_id\"\n>(\"assignment\", \"assignment_id\");\nfunction prepForApi(data: Partial<Ddah>) {\n    if (hasSubIdField(data, \"assignment\")) {\n        return assignmentToAssignmentId(data);\n    }\n    return data;\n}\n\nexport const approveDdah = validatedApiDispatcher({\n    name: \"approveDdah\",\n    description: \"Set a DDAH's status to approved\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        let data = (await apiPOST(\n            `/${role}/ddahs/${payload.id}/approve`\n        )) as RawDdah;\n        dispatch(approveOneDdahSuccess(data));\n        // The previous action doesn't actually update the redux store,\n        // so we dispatch a fake upsert action to make sure the store gets updated\n        // with the new data.\n        dispatch(upsertOneDdahSuccess(data));\n        return data;\n    },\n});\n\nexport const emailDdah = validatedApiDispatcher({\n    name: \"emailDdah\",\n    description: \"Email a DDAH\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        let data = (await apiPOST(\n            `/${role}/ddahs/${payload.id}/email`\n        )) as RawDdah;\n        dispatch(emailOneDdahSuccess(data));\n        // The previous action doesn't actually update the redux store,\n        // so we dispatch a fake upsert action to make sure the store gets updated\n        // with the new data.\n        dispatch(upsertOneDdahSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertDdah = validatedApiDispatcher({\n    name: \"upsertDdah\",\n    description: \"Add/insert a DDAH\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<Ddah>) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        let data = (await apiPOST(\n            `/${role}/ddahs`,\n            prepForApi(payload)\n        )) as RawDdah;\n        dispatch(upsertOneDdahSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteDdah = validatedApiDispatcher({\n    name: \"deleteDdah\",\n    description: \"Delete a DDAH\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/ddahs/${payload.id}/delete`,\n            prepForApi(payload)\n        )) as RawDdah;\n        dispatch(deleteOneDdahSuccess(data));\n    },\n});\n\nexport const exportDdahs = validatedApiDispatcher({\n    name: \"exportDdahs\",\n    description: \"Export DDAHs\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (formatter, format = \"spreadsheet\") => async (\n        dispatch,\n        getState\n    ) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all assignments from the server in case things happened to be out of sync.\n        await dispatch(fetchDdahs());\n        const ddahs = ddahsSelector(getState());\n\n        return formatter(ddahs, format);\n    },\n});\n\nexport const upsertDdahs = validatedApiDispatcher({\n    name: \"upsertDdahs\",\n    description: \"Upsert a list of DDAHs\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (ddahs: Partial<Ddah>[]) => async (dispatch) => {\n        if (ddahs.length === 0) {\n            return;\n        }\n        const dispatchers = ddahs.map((ddah) => dispatch(upsertDdah(ddah)));\n        await Promise.all(dispatchers);\n        // Re-fetch all assignments from the server in case things happened to be out of sync.\n        await dispatch(fetchDdahs());\n    },\n});\n\nexport const downloadDdahAcceptedList = validatedApiDispatcher({\n    name: \"downloadDdahAcceptedList\",\n    description: \"Download a pdf list of accepted DDAHs for the active session\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (_dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw new Error(\"Cannot fetch DDAHs without an active session\");\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/ddahs/accepted_list.pdf`\n        )) as RawAttachment;\n\n        // The data comes in encoded as base64, so we decode it as binary data.\n        const content = new Uint8Array(\n            atob(data.content)\n                .split(\"\")\n                .map((x) => x.charCodeAt(0))\n        );\n        return new File([content], data.file_name, {\n            type: data.mime_type,\n        });\n    },\n});\n\n// selectors\n\n/**\n * Compute the status of a DDAH (e.g., accepted/rejected)\n *\n * @param {*} ddah\n * @returns\n */\nfunction computeDdahStatus(ddah: Pick<Ddah, \"accepted_date\" | \"emailed_date\">) {\n    if (ddah.accepted_date) {\n        return \"accepted\";\n    }\n    if (ddah.emailed_date) {\n        return \"emailed\";\n    }\n    return null;\n}\n\n/**\n * Compute the total number of hours for all duties for the current DDAH\n *\n * @param {*} ddah\n * @returns\n */\nfunction computeDdahHours(ddah: Pick<Ddah, \"duties\">) {\n    let ret = 0;\n    for (const duty of ddah.duties) {\n        ret += duty.hours;\n    }\n    return ret;\n}\n\n// Each reducer is given an isolated state; instead of needing to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = ddahsReducer._localStoreSelector;\n/**\n * Get just the ddah data as it appears in the store; i.e., it has references to\n * id's of assignments.\n */\nconst _ddahsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData as RawDdah[]\n);\n/**\n * Get the current ddahs. This selector is memoized and will only\n * be recomputed when ddahs or assignments change.\n */\nexport const ddahsSelector = createSelector(\n    [_ddahsSelector, assignmentsSelector],\n    (ddahs, assignments) => {\n        if (ddahs.length === 0) {\n            return [];\n        }\n        const assignmentsHash = arrayToHash(assignments);\n        return ddahs.map(({ assignment_id, ...rest }) => ({\n            ...rest,\n            status: computeDdahStatus(rest),\n            total_hours: computeDdahHours(rest),\n            assignment: assignmentsHash[assignment_id] || {},\n        })) as Ddah[];\n    }\n);\n","import { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\n// actions\nexport const apiInteractionStart = (id: string, message: string) => ({\n    type: API_INTERACTION_START,\n    payload: { id, message },\n});\nexport const apiInteractionEnd = (id: string) => ({\n    type: API_INTERACTION_END,\n    payload: { id },\n});\n","import {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    arrayToHash,\n    validatedApiDispatcher,\n    flattenIdFactory,\n    HasId,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { applicationsReducer } from \"../reducers/applications\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector, fetchApplicants } from \"./applicants\";\nimport { activeRoleSelector } from \"./users\";\nimport type { Application, RawApplication } from \"../defs/types\";\nimport { activeSessionSelector } from \"./sessions\";\nimport { fetchPostings, postingsSelector } from \"./postings\";\nimport { positionsSelector } from \"./positions\";\nimport { ExportFormat, PrepareDataFunc } from \"../../libs/import-export\";\n\n// actions\nexport const fetchApplicationsSuccess = actionFactory<RawApplication[]>(\n    FETCH_APPLICATIONS_SUCCESS\n);\nconst fetchOneApplicationSuccess = actionFactory<RawApplication>(\n    FETCH_ONE_APPLICATION_SUCCESS\n);\nconst upsertOneApplicationSuccess = actionFactory<RawApplication>(\n    UPSERT_ONE_APPLICATION_SUCCESS\n);\nconst deleteOneApplicationSuccess = actionFactory<RawApplication>(\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nconst applicantToApplicantId = flattenIdFactory<\"applicant\", \"applicant_id\">(\n    \"applicant\",\n    \"applicant_id\"\n);\n\nfunction prepApplicationForApi(data: Partial<Application>) {\n    return applicantToApplicantId(data as any);\n}\n\n// dispatchers\nexport const fetchApplications = validatedApiDispatcher({\n    name: \"fetchApplications\",\n    description: \"Fetch applications\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw new Error(\n                \"Cannot fetch Applications without an active session\"\n            );\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications`\n        )) as RawApplication[];\n        dispatch(fetchApplicationsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchApplication = validatedApiDispatcher({\n    name: \"fetchApplication\",\n    description: \"Fetch application\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw new Error(\n                \"Cannot fetch Applications without an active session\"\n            );\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications/${payload.id}`\n        )) as RawApplication;\n        dispatch(fetchOneApplicationSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertApplication = validatedApiDispatcher({\n    name: \"upsertApplication\",\n    description: \"Add/insert application\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<Application>) => async (\n        dispatch,\n        getState\n    ) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw new Error(\n                \"Cannot upsert Applications without an active session\"\n            );\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications`,\n            prepApplicationForApi(payload)\n        )) as RawApplication;\n        dispatch(upsertOneApplicationSuccess(data));\n        return data;\n    },\n});\n\nexport const deleteApplication = validatedApiDispatcher({\n    name: \"deleteApplication\",\n    description: \"Delete application\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = activeSessionSelector(getState());\n        if (activeSession == null) {\n            throw new Error(\n                \"Cannot delete Applications without an active session\"\n            );\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications/delete`,\n            prepApplicationForApi(payload)\n        )) as RawApplication;\n        dispatch(deleteOneApplicationSuccess(data));\n    },\n});\n\nexport const exportApplications = validatedApiDispatcher({\n    name: \"exportApplications\",\n    description: \"Export applications\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (\n        formatter: PrepareDataFunc<Application>,\n        format: ExportFormat = \"spreadsheet\"\n    ) => async (dispatch, getState) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all applicants from the server in case things happened to be out of sync.\n        await Promise.all([\n            dispatch(fetchApplicants()),\n            dispatch(fetchPostings()),\n            dispatch(fetchApplications()),\n        ]);\n        const applications = applicationsSelector(getState());\n\n        return formatter(applications, format);\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nconst localStoreSelector = applicationsReducer._localStoreSelector;\nexport const _applicationsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n\n// Get the current list of applications and recompute `applicant_id` and `position_id`\n// to have corresponding `applicant` and `position` objects\nexport const applicationsSelector = createSelector(\n    [\n        _applicationsSelector,\n        applicantsSelector,\n        postingsSelector,\n        positionsSelector,\n    ],\n    (applications, applicants, postings, positions) => {\n        if (applications.length === 0) {\n            return [];\n        }\n\n        const applicantsById = arrayToHash(applicants);\n        const postingsById = arrayToHash(postings);\n        const positionsById = arrayToHash(positions);\n\n        // Change `applicant_id` to the corresponding `applicant` object\n        // and similarly, change each `position_id` in each entry of\n        // `position_preferences` to corresponding `position` object.\n        return applications.map(\n            ({ posting_id, applicant_id, position_preferences, ...rest }) =>\n                (({\n                    ...rest,\n                    applicant: applicantsById[applicant_id] || {},\n                    posting:\n                        posting_id != null\n                            ? postingsById[posting_id] || {}\n                            : null,\n                    position_preferences: position_preferences\n                        .map(({ position_id, preference_level }) => ({\n                            position: positionsById[position_id],\n                            preference_level,\n                        }))\n                        .filter((x) => x.position != null),\n                } as unknown) as Application)\n        );\n    }\n);\n","import { createSelector } from \"reselect\";\nimport {\n    FETCH_POSTINGS_SUCCESS,\n    FETCH_ONE_POSTING_SUCCESS,\n    UPSERT_ONE_POSTING_SUCCESS,\n    DELETE_ONE_POSTING_SUCCESS,\n    FETCH_POSTING_POSITIONS_SUCCESS,\n    FETCH_ONE_POSTING_POSITION_SUCCESS,\n    UPSERT_ONE_POSTING_POSITION_SUCCESS,\n    DELETE_ONE_POSTING_POSITION_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    HasId,\n    splitObjByProps,\n    validatedApiDispatcher,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { postingsReducer } from \"../reducers/postings\";\nimport { activeRoleSelector } from \"./users\";\nimport { postingPositionsReducer } from \"../reducers/posting_positions\";\nimport type {\n    Position,\n    Posting,\n    PostingPosition,\n    RawPosting,\n    RawPostingPosition,\n    RequireSome,\n} from \"../defs/types\";\nimport { positionsSelector } from \"./positions\";\nimport { ExportFormat } from \"../../libs/import-export\";\n\n// actions\nconst fetchPostingsSuccess = actionFactory<RawPosting[]>(\n    FETCH_POSTINGS_SUCCESS\n);\nconst fetchOnePostingSuccess = actionFactory<RawPosting>(\n    FETCH_ONE_POSTING_SUCCESS\n);\nconst upsertOnePostingSuccess = actionFactory<RawPosting>(\n    UPSERT_ONE_POSTING_SUCCESS\n);\nconst deleteOnePostingSuccess = actionFactory<RawPosting>(\n    DELETE_ONE_POSTING_SUCCESS\n);\n\n// PostingPosition actions\nconst fetchPostingPositionsSuccess = actionFactory<RawPostingPosition[]>(\n    FETCH_POSTING_POSITIONS_SUCCESS\n);\nconst fetchOnePostingPositionSuccess = actionFactory<RawPostingPosition>(\n    FETCH_ONE_POSTING_POSITION_SUCCESS\n);\nconst upsertOnePostingPositionSuccess = actionFactory<RawPostingPosition>(\n    UPSERT_ONE_POSTING_POSITION_SUCCESS\n);\nconst deleteOnePostingPositionSuccess = actionFactory<RawPostingPosition>(\n    DELETE_ONE_POSTING_POSITION_SUCCESS\n);\n\n// dispatchers\nexport const fetchPostings = validatedApiDispatcher({\n    name: \"fetchPostings\",\n    description: \"Fetch postings\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const activeSession = getState().model.sessions.activeSession;\n        if (activeSession == null) {\n            throw new Error(\"Cannot fetch Postings without an active session\");\n        }\n        const { id: activeSessionId } = activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/postings` as const\n        );\n        dispatch(fetchPostingsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchPosting = validatedApiDispatcher({\n    name: \"fetchPosting\",\n    description: \"Fetch posting\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/postings/${payload.id}`\n        )) as RawPosting;\n        dispatch(fetchOnePostingSuccess(data));\n        return data;\n    },\n});\n\nfunction prepPostingForApi(posting: Partial<Posting>): Partial<RawPosting> {\n    // eslint warns about unused variables by default. We want to ignore that warning in this case.\n    // eslint-disable-next-line\n    const [ret, _rest] = splitObjByProps(posting, [\n        \"posting_positions\",\n        \"applications\",\n    ]);\n    return ret;\n}\n\nexport const upsertPosting = validatedApiDispatcher({\n    name: \"upsertPosting\",\n    description: \"Add/insert posting\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: Partial<RawPosting> | Partial<Posting>) => async (\n        dispatch,\n        getState\n    ) => {\n        const role = activeRoleSelector(getState());\n        const activeSession = getState().model.sessions.activeSession;\n        if (activeSession == null) {\n            throw new Error(\"Cannot fetch Postings without an active session\");\n        }\n        const { id: activeSessionId } = activeSession;\n        const data = (await apiPOST(\n            `/${role}/sessions/${activeSessionId}/postings`,\n            prepPostingForApi(payload)\n        )) as RawPosting;\n        dispatch(upsertOnePostingSuccess(data));\n\n        // If there are posting_positions included with the posting, upsert them too\n        const posting_positions = (payload as Partial<Posting>)\n            .posting_positions;\n        if (Array.isArray(posting_positions)) {\n            const posting_id = data.id;\n            await Promise.all(\n                posting_positions.map((postingPosition) =>\n                    dispatch(\n                        upsertPostingPosition({\n                            ...postingPosition,\n                            // Since we may be upserting into a newly-created posting, the supplied data\n                            // might not have the posting id. Insert it just to be sure it's there.\n                            posting_id,\n                            posting: {\n                                ...postingPosition.posting,\n                                id: posting_id,\n                            },\n                        })\n                    )\n                )\n            );\n            // TODO: we currently don't check to see if there are any PostingPositions that we should delete.\n        }\n        return data;\n    },\n});\n\nexport const deletePosting = validatedApiDispatcher({\n    name: \"deletePosting\",\n    description: \"Delete posting\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/postings/delete`,\n            payload\n        )) as RawPosting;\n        dispatch(deleteOnePostingSuccess(data));\n    },\n});\n\nexport const fetchSurvey = validatedApiDispatcher({\n    name: \"fetchSurvey\",\n    description: \"Fetch the survey associated with a posting\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (_dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/postings/${payload.id}/survey`\n        )) as any;\n        return data;\n    },\n});\n\n// PostingPosition dispatchers\nexport const fetchPostingPositions = validatedApiDispatcher({\n    name: \"fetchPostingPositions\",\n    description: \"Fetch posting_positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const activeSession = getState().model.sessions.activeSession;\n        if (activeSession == null) {\n            throw new Error(\n                \"Cannot fetch PostingPositions without an active session\"\n            );\n        }\n        const { id: activeSessionId } = activeSession;\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/sessions/${activeSessionId}/posting_positions`\n        )) as RawPostingPosition[];\n        dispatch(fetchPostingPositionsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchPostingPositionsForPosting = validatedApiDispatcher({\n    name: \"fetchPostingPositionsForPosting\",\n    description: \"Fetch posting_positions for a particular posting\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (posting: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/postings/${posting.id}/posting_positions`\n        )) as RawPostingPosition[];\n        dispatch(fetchPostingPositionsSuccess(data));\n        return data;\n    },\n});\n\nexport const fetchPostingPosition = validatedApiDispatcher({\n    name: \"fetchPostingPosition\",\n    description: \"Fetch posting_position\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/posting_positions/${payload.id}`\n        )) as RawPostingPosition;\n        dispatch(fetchOnePostingPositionSuccess(data));\n        return data;\n    },\n});\n\nexport const upsertPostingPosition = validatedApiDispatcher({\n    name: \"upsertPostingPosition\",\n    description: \"Add/insert posting_position\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (\n        payload:\n            | RequireSome<RawPostingPosition, \"position_id\" | \"posting_id\">\n            | RequireSome<PostingPosition, \"position\" | \"posting\">\n    ) => async (dispatch, getState) => {\n        const rawPostingPosition = prepPostingPositionForApi(payload);\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/posting_positions`,\n            rawPostingPosition\n        )) as RawPostingPosition;\n        dispatch(upsertOnePostingPositionSuccess(data));\n        return data;\n    },\n});\n\nexport const deletePostingPosition = validatedApiDispatcher({\n    name: \"deletePostingPosition\",\n    description: \"Delete posting_position\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (\n        payload:\n            | RequireSome<RawPostingPosition, \"position_id\" | \"posting_id\">\n            | RequireSome<PostingPosition, \"position\" | \"posting\">\n    ) => async (dispatch, getState) => {\n        const rawPostingPosition = prepPostingPositionForApi(payload);\n        const role = activeRoleSelector(getState());\n        const data = (await apiPOST(\n            `/${role}/posting_positions/delete`,\n            rawPostingPosition\n        )) as RawPostingPosition;\n        dispatch(deleteOnePostingPositionSuccess(data));\n    },\n});\n\nexport const exportPosting = validatedApiDispatcher({\n    name: \"exportPosting\",\n    description: \"Export a posting\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (\n        postingId: number,\n        formatter: (posting: Posting, exportFormat: ExportFormat) => File,\n        format: ExportFormat = \"spreadsheet\"\n    ) => async (dispatch, getState) => {\n        if (!(formatter instanceof Function)) {\n            throw new Error(\n                `\"formatter\" must be a function when using the export action.`\n            );\n        }\n        // Re-fetch all applicants from the server in case things happened to be out of sync.\n        await Promise.all([dispatch(fetchPostings())]);\n        const postings = postingsSelector(getState());\n        const posting = postings.find((posting) => posting.id === postingId);\n\n        if (posting == null) {\n            throw new Error(`Could not find posting with id ${postingId}`);\n        }\n\n        return formatter(posting, format);\n    },\n});\n\nfunction isRawPostingPosition(\n    obj: any\n): obj is RequireSome<RawPostingPosition, \"position_id\" | \"posting_id\"> {\n    if (\n        obj != null &&\n        typeof obj === \"object\" &&\n        \"posting_id\" in obj &&\n        \"position_id\" in obj\n    ) {\n        return true;\n    }\n    return false;\n}\n\nfunction prepPostingPositionForApi(\n    obj:\n        | RequireSome<PostingPosition, \"position\" | \"posting\">\n        | RequireSome<RawPostingPosition, \"position_id\" | \"posting_id\">\n): RequireSome<RawPostingPosition, \"position_id\" | \"posting_id\"> {\n    if (isRawPostingPosition(obj)) {\n        return obj;\n    }\n    const [core, rest] = splitObjByProps(obj, [\"position\", \"posting\"]);\n    return {\n        ...core,\n        position_id: rest.position.id,\n        posting_id: rest.posting.id,\n    };\n}\n\n// selectors\n/**\n * Since Postings and PostingPositions reference each other,\n * we need a function that can create both at the same time.\n *\n * @param {RawPosting} rawPosting\n * @param {RawPostingPosition[]} rawPostingPositions\n * @param {Position[]} positions\n * @returns\n */\nfunction combinePostingAndPostingPosition(\n    rawPosting: RawPosting,\n    rawPostingPositions: RawPostingPosition[],\n    positions: Position[]\n) {\n    const positionsMap = new Map(\n        positions.map((position) => [position.id, position])\n    );\n    // eslint-disable-next-line\n    const [partialPosting, _postingRest] = splitObjByProps(rawPosting, [\n        \"application_ids\",\n    ]);\n    const posting: Posting = {\n        ...partialPosting,\n        applications: [],\n        posting_positions: [],\n    };\n    const postingPositions = rawPostingPositions\n        // We only want PostingPositions associated with the given posting\n        .filter(\n            (rawPostingPosition) =>\n                rawPostingPosition.posting_id === rawPosting.id\n        )\n        // We only want PostingPositions whose corresponding position has been loaded/exits\n        .filter((rawPostingPosition) =>\n            positionsMap.has(rawPostingPosition.position_id)\n        )\n        .map<PostingPosition>((rawPostingPosition) => {\n            const [\n                partialPostingPosition,\n                rest,\n            ] = splitObjByProps(rawPostingPosition, [\n                \"position_id\",\n                \"posting_id\",\n            ]);\n            return {\n                ...partialPostingPosition,\n                position: positionsMap.get(rest.position_id)!,\n                posting,\n            };\n        });\n\n    posting.posting_positions = postingPositions;\n\n    return { posting, postingPositions };\n}\n\nconst localStoreSelector = postingsReducer._localStoreSelector;\nconst localStoreSelector2 = postingPositionsReducer._localStoreSelector;\nexport const postingsSelector = createSelector(\n    localStoreSelector,\n    localStoreSelector2,\n    positionsSelector,\n    (postingsState, postingPositionsState, positions) => {\n        const rawPostingPositions = postingPositionsState._modelData;\n        return postingsState._modelData\n            .map((rawPosting) =>\n                combinePostingAndPostingPosition(\n                    rawPosting,\n                    rawPostingPositions,\n                    positions\n                )\n            )\n            .map((processed) => processed.posting);\n    }\n);\n\nexport const postingPositionsSelector = createSelector(\n    localStoreSelector2,\n    localStoreSelector,\n    positionsSelector,\n    (postingPositionsState, postingsState, positions) => {\n        const rawPostingPositions = postingPositionsState._modelData;\n        return (\n            postingsState._modelData\n                .map((rawPosting) =>\n                    combinePostingAndPostingPosition(\n                        rawPosting,\n                        rawPostingPositions,\n                        positions\n                    )\n                )\n                .map((processed) => processed.postingPositions)\n                // A PostingPosition is uniquely determined by its Position and Posting, so\n                // it is impossible to have duplicates when we call `.flat()`\n                .flat()\n        );\n    }\n);\n","import {\n    UPSERT_ONE_WAGE_CHUNK_SUCCESS,\n    DELETE_ONE_WAGE_CHUNK_SUCCESS,\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, HasId, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { createSelector } from \"reselect\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\nimport {\n    Assignment,\n    RawAssignment,\n    RawWageChunk,\n    WageChunk,\n} from \"../defs/types\";\n\n// actions\nconst fetchWageChunksForAssignmentSuccess = actionFactory<RawWageChunk[]>(\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertWageChunksForAssignmentSuccess = actionFactory<RawWageChunk[]>(\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertOneWageChunkSuccess = actionFactory<RawWageChunk>(\n    UPSERT_ONE_WAGE_CHUNK_SUCCESS\n);\nconst deleteOneWageChunkSuccess = actionFactory<RawWageChunk>(\n    DELETE_ONE_WAGE_CHUNK_SUCCESS\n);\n\n// dispatchers\nexport const fetchWageChunksForAssignment = validatedApiDispatcher({\n    name: \"fetchWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = payload;\n        const data = (await apiGET(\n            `/${role}/assignments/${assignmentId}/wage_chunks`\n        )) as RawWageChunk[];\n        dispatch(fetchWageChunksForAssignmentSuccess(data));\n    },\n});\n\nexport const upsertWageChunksForAssignment = validatedApiDispatcher({\n    name: \"upsertWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (\n        assignment: Assignment | RawAssignment,\n        payload: WageChunk[]\n    ) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = assignment;\n        const data = (await apiPOST(\n            `/${role}/assignments/${assignmentId}/wage_chunks`,\n            payload\n        )) as RawWageChunk[];\n        dispatch(upsertWageChunksForAssignmentSuccess(data));\n        // After we update a wage chunk, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const upsertWageChunk = validatedApiDispatcher({\n    name: \"upsertWageChunk\",\n    description: \"Add/insert wage chunk\",\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload: WageChunk) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks`, payload);\n        dispatch(upsertOneWageChunkSuccess(data));\n    },\n});\n\nexport const deleteWageChunk = validatedApiDispatcher({\n    name: \"deleteWageChunk\",\n    description: \"Delete a wage chunk\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks/delete`, payload);\n        dispatch(deleteOneWageChunkSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\n\n// wage chunk data is stored with the assignments in the redux store\nconst localStoreSelector = assignmentsReducer._localStoreSelector;\nexport const wageChunksByAssignmentSelector = createSelector(\n    localStoreSelector,\n    (state) =>\n        function (assignment: Assignment | RawAssignment) {\n            const assignment_id = assignment.id;\n            if (!state._wageChunksByAssignmentId[assignment_id]) {\n                return [];\n            }\n            return state._wageChunksByAssignmentId[\n                assignment_id\n            ] as WageChunk[];\n        }\n);\n","import { validatedApiDispatcher } from \"./utils\";\nimport { apiError } from \"./errors\";\nimport { activeSessionSelector } from \"./sessions\";\nimport { initFromStage } from \"./init\";\nimport { RootState } from \"../../rootReducer\";\n\nexport const setGlobals = validatedApiDispatcher({\n    name: \"setGlobals\",\n    description: \"Sets global variables\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload: Record<string, any>) => async (\n        dispatch,\n        getState\n    ) => {\n        const globals = { ...globalsSelector(getState()), ...payload };\n\n        // Store the globals in the URL\n        await dispatch(setGlobalsInUrl(globals));\n\n        // Now store the globals in the Redux store\n        dispatch({ type: \"SET_GLOBALS\", payload: globals });\n    },\n});\n\n/**\n * Sets the specified values to be part of the URL\n */\nexport const setGlobalsInUrl = validatedApiDispatcher({\n    name: \"setGlobalsInUrl\",\n    description: \"Stores global variables in the URL\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload: Record<string, any>) => async () => {\n        // Create a new URL with the globals set in it\n        const searchParams = new URLSearchParams();\n        for (const [key, val] of Object.entries(payload)) {\n            searchParams.append(key, JSON.stringify(val));\n        }\n\n        // If we have globals to store, push them onto the url\n        if (window.history.pushState && (\"\" + searchParams).length > 0) {\n            let newUrl = new URL(\"\" + window.location);\n            newUrl.search = \"?\" + searchParams;\n            let url = \"\" + newUrl;\n            if (\"\" + url !== \"\" + window.location) {\n                window.history.pushState({ path: url }, \"\", url);\n            }\n        }\n    },\n});\n\nexport const setMockAPIState = validatedApiDispatcher({\n    name: \"setMockAPIState\",\n    description: \"Activates or deactivates the mockAPI\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (\n        payload: boolean,\n        options: { skipInit?: boolean } = { skipInit: false }\n    ) => async (dispatch) => {\n        await dispatch(setGlobals({ mockAPI: payload }));\n\n        if (!options.skipInit) {\n            await dispatch(initFromStage(\"toggleMockAPI\"));\n        }\n    },\n});\n\nexport const globalsSelector = (state: RootState): Record<string, any> => {\n    // Peel off the `activeSession` if it is stored in globals.\n    // We want to always use the \"real\" active session and want\n    // to avoid multiple sources of truth.\n    // eslint-disable-next-line\n    const { activeSession, ...otherGlobals } = state.ui.globals;\n    const storedActiveSession = activeSessionSelector(state);\n    if (storedActiveSession != null && storedActiveSession.id != null) {\n        return { ...otherGlobals, activeSession: storedActiveSession.id };\n    }\n    return otherGlobals;\n};\n","// a collection of key-mapping between imported JSON keys/ Spreadsheet Column names and\n// actual keys of an object\n\nexport interface NormalizationSchema<T extends string[]> {\n    keys: T;\n    keyMap: Record<string, T[number]>;\n    requiredKeys: T[number][];\n    primaryKey: T[number] | T[number][];\n    dateColumns: T[number][];\n    baseName: string;\n}\n\nexport const instructorSchema: NormalizationSchema<\n    [\"first_name\", \"last_name\", \"utorid\", \"email\"]\n> = {\n    keys: [\"first_name\", \"last_name\", \"utorid\", \"email\"],\n    keyMap: {\n        \"First Name\": \"first_name\",\n        \"Given Name\": \"first_name\",\n        First: \"first_name\",\n        \"Last Name\": \"last_name\",\n        Surname: \"last_name\",\n        \"Family Name\": \"last_name\",\n        Last: \"last_name\",\n    },\n    requiredKeys: [\"utorid\"],\n    primaryKey: \"utorid\",\n    dateColumns: [],\n    baseName: \"instructors\",\n};\n\nexport const applicantSchema: NormalizationSchema<\n    [\"first_name\", \"last_name\", \"utorid\", \"email\", \"student_number\", \"phone\"]\n> = {\n    keys: [\n        \"first_name\",\n        \"last_name\",\n        \"utorid\",\n        \"email\",\n        \"student_number\",\n        \"phone\",\n    ],\n    keyMap: {\n        \"First Name\": \"first_name\",\n        \"Given Name\": \"first_name\",\n        First: \"first_name\",\n        \"Last Name\": \"last_name\",\n        Surname: \"last_name\",\n        \"Family Name\": \"last_name\",\n        Last: \"last_name\",\n        \"Student Number\": \"student_number\",\n    },\n    requiredKeys: [\"utorid\"],\n    primaryKey: \"utorid\",\n    dateColumns: [],\n    baseName: \"applicants\",\n};\n\nexport const postingSchema: NormalizationSchema<\n    [\n        \"name\",\n        \"open_date\",\n        \"close_date\",\n        \"intro_text\",\n        \"custom_questions\",\n        \"position_code\",\n        \"num_positions\",\n        \"hours\",\n        \"posting_positions\"\n    ]\n> = {\n    keys: [\n        \"name\",\n        \"open_date\",\n        \"close_date\",\n        \"intro_text\",\n        \"custom_questions\",\n        \"position_code\",\n        \"num_positions\",\n        \"hours\",\n        \"posting_positions\",\n    ],\n    keyMap: {\n        Name: \"name\",\n        \"Open Date\": \"open_date\",\n        \"Close Date\": \"close_date\",\n        \"Intro Text\": \"intro_text\",\n        \"Custom Questions\": \"custom_questions\",\n        \"Position Code\": \"position_code\",\n        \"Num Positions\": \"num_positions\",\n        \"Hours per Assignment\": \"hours\",\n        \"Hours per Position\": \"hours\",\n    },\n    requiredKeys: [],\n    primaryKey: \"name\",\n    dateColumns: [\"open_date\", \"close_date\"],\n    baseName: \"postings\",\n};\n\nexport const positionSchema: NormalizationSchema<\n    [\n        \"position_code\",\n        \"position_title\",\n        \"start_date\",\n        \"end_date\",\n        \"hours_per_assignment\",\n        \"desired_num_assignments\",\n        \"contract_template\",\n        \"instructors\",\n        \"duties\",\n        \"qualifications\",\n        \"current_enrollment\",\n        \"current_waitlisted\",\n        \"ad_open_date\",\n        \"ad_close_date\",\n        \"ad_hours_per_assignment\",\n        \"ad_num_assignments\"\n    ]\n> = {\n    keys: [\n        \"position_code\",\n        \"position_title\",\n        \"start_date\",\n        \"end_date\",\n        \"hours_per_assignment\",\n        \"desired_num_assignments\",\n        \"contract_template\",\n        \"instructors\",\n        \"duties\",\n        \"qualifications\",\n        \"current_enrollment\",\n        \"current_waitlisted\",\n        \"ad_open_date\",\n        \"ad_close_date\",\n        \"ad_hours_per_assignment\",\n        \"ad_num_assignments\",\n    ],\n    keyMap: {\n        \"Position Code\": \"position_code\",\n        \"Course Code\": \"position_code\",\n        \"Course Name\": \"position_code\",\n        \"Position Title\": \"position_title\",\n        \"Start Date\": \"start_date\",\n        Start: \"start_date\",\n        \"End Date\": \"end_date\",\n        End: \"end_date\",\n        \"Hours Per Assignment\": \"hours_per_assignment\",\n        \"Number of Assignments\": \"desired_num_assignments\",\n        \"Contract Template\": \"contract_template\",\n        \"Current Enrollment\": \"current_enrollment\",\n        \"Current Waitlist\": \"current_waitlisted\",\n    },\n    dateColumns: [\"start_date\", \"end_date\"],\n    requiredKeys: [\"position_code\", \"contract_template\"],\n    primaryKey: \"position_code\",\n    baseName: \"positions\",\n};\n\nexport const assignmentSchema: NormalizationSchema<\n    [\n        \"utorid\",\n        \"position_code\",\n        \"start_date\",\n        \"end_date\",\n        \"contract_template\",\n        \"contract_override_pdf\",\n        \"hours\",\n        \"wage_chunks\"\n    ]\n> = {\n    // We don't list \"active_offer_status\" because that cannot be imported. It has to be set\n    // via the TA or manually by the admin.\n    keys: [\n        \"utorid\",\n        \"position_code\",\n        \"start_date\",\n        \"end_date\",\n        \"contract_template\",\n        \"contract_override_pdf\",\n        \"hours\",\n        \"wage_chunks\",\n    ],\n    keyMap: {\n        \"Position Code\": \"position_code\",\n        \"Course Name\": \"position_code\",\n        \"Start Date\": \"start_date\",\n        Start: \"start_date\",\n        \"End Date\": \"end_date\",\n        End: \"end_date\",\n        Hours: \"hours\",\n        \"Contract Override PDF\": \"contract_override_pdf\",\n    },\n    dateColumns: [\"start_date\", \"end_date\"],\n    requiredKeys: [\"position_code\", \"utorid\"],\n    primaryKey: [\"utorid\", \"position_code\"],\n    baseName: \"assignments\",\n};\n","import * as OrigPropTypes from \"prop-types\";\n\n/**\n * Generate proptypes for API responses using the passed-in proptypes function.\n * This is encapsulated so that `PropTypes` can be replaced (for example, with a proxy\n * used for documentation generation).\n *\n * @param {*} PropTypes - a PropTypes function (coming from the `\"prop-types\"` module or elsewhere)\n * @returns an object of PropTypes\n */\nfunction generatePropTypes(PropTypes: typeof OrigPropTypes) {\n    const id = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\n\n    return {\n        apiResponse: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\", \"error\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any,\n        }),\n        apiResponseSuccess: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any,\n        }),\n        apiResponseError: PropTypes.shape({\n            status: PropTypes.oneOf([\"error\"]).isRequired,\n            message: PropTypes.string.isRequired,\n            payload: PropTypes.any,\n        }),\n        idOnly: PropTypes.shape({\n            id,\n        }),\n        session: PropTypes.shape({\n            id,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            name: PropTypes.string.isRequired,\n        }),\n        contractTemplateMinimal: PropTypes.shape({\n            template_file: PropTypes.string,\n        }),\n        contractTemplate: PropTypes.shape({\n            template_file: PropTypes.string,\n            template_name: PropTypes.string,\n        }),\n        position: PropTypes.shape({\n            position_code: PropTypes.string.isRequired,\n            position_title: PropTypes.string,\n            hours_per_assignment: PropTypes.number,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            contract_template_id: id,\n            duties: PropTypes.string,\n            qualifications: PropTypes.string,\n            desired_num_assignments: PropTypes.number,\n            current_enrollment: PropTypes.number,\n            current_waitlisted: PropTypes.number,\n            instructor_ids: PropTypes.arrayOf(id),\n            instructor_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    applicant_id: id,\n                    instructor_id: id,\n                })\n            ),\n        }),\n        instructor: PropTypes.shape({\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            utorid: PropTypes.string.isRequired,\n        }),\n        assignment: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            note: PropTypes.string,\n            contract_override_pdf: PropTypes.string,\n            applicant_id: id.isRequired,\n            position_id: id.isRequired,\n            active_offer_status: PropTypes.oneOf([\n                \"accepted\",\n                \"rejected\",\n                \"withdrawn\",\n                \"provisional\",\n                \"pending\",\n                \"no_offer\",\n                null,\n            ]),\n            active_offer_url_token: PropTypes.string,\n            active_offer_recent_activity_date: PropTypes.string,\n            active_offer_nag_count: PropTypes.number,\n        }),\n        applicant: PropTypes.shape({\n            utorid: PropTypes.string.isRequired,\n            student_number: PropTypes.string,\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            phone: PropTypes.string,\n        }),\n        wageChunk: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            hours: PropTypes.number,\n            rate: PropTypes.number,\n        }),\n        reportingTag: PropTypes.shape({\n            name: PropTypes.string,\n        }),\n        offer: PropTypes.shape({\n            first_name: PropTypes.string,\n            last_name: PropTypes.string,\n            email: PropTypes.string,\n            position_code: PropTypes.string,\n            position_title: PropTypes.string,\n            position_start_date: PropTypes.string,\n            position_end_date: PropTypes.string,\n            first_time_ta: PropTypes.bool,\n            instructor_contact_desc: PropTypes.string,\n            pay_period_desc: PropTypes.string,\n            installments: PropTypes.number,\n            ta_coordinator_name: PropTypes.string,\n            ta_coordinator_email: PropTypes.string,\n            emailed_date: PropTypes.string,\n            status: PropTypes.string,\n            accepted_date: PropTypes.string,\n            rejected_date: PropTypes.string,\n            withdrawn_date: PropTypes.string,\n            url_token: PropTypes.string,\n            nag_count: PropTypes.number,\n        }),\n        application: PropTypes.shape({\n            posting_id: id,\n            applicant_id: id,\n            comments: PropTypes.string,\n            program: PropTypes.string,\n            department: PropTypes.string,\n            previous_department_ta: PropTypes.bool,\n            previous_university_ta: PropTypes.bool,\n            previous_experience_summary: PropTypes.string,\n            yip: PropTypes.number,\n            annotation: PropTypes.string,\n            position_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    position_id: id,\n                })\n            ),\n        }),\n        user: PropTypes.shape({\n            utorid: PropTypes.string,\n            roles: PropTypes.arrayOf(PropTypes.string),\n        }),\n        ddah: PropTypes.shape({\n            assignment_id: id,\n            signature: PropTypes.string,\n            approved_date: PropTypes.string,\n            accepted_date: PropTypes.string,\n            revised_date: PropTypes.string,\n            emailed_date: PropTypes.string,\n            url_token: PropTypes.string,\n            duties: PropTypes.arrayOf(\n                PropTypes.shape({\n                    description: PropTypes.string,\n                    hours: PropTypes.number,\n                    order: PropTypes.number,\n                })\n            ),\n        }),\n        posting: PropTypes.shape({\n            name: PropTypes.string,\n            intro_text: PropTypes.string,\n            open_date: PropTypes.string,\n            close_date: PropTypes.string,\n            availability: PropTypes.oneOf([\"auto\", \"open\", \"closed\"]),\n            custom_questions: PropTypes.any,\n            application_ids: PropTypes.arrayOf(id),\n        }),\n        posting_position: PropTypes.shape({\n            hours: PropTypes.number,\n            num_positions: PropTypes.number,\n            position_id: id,\n            posting_id: id,\n        }),\n        survey: PropTypes.shape({\n            title: PropTypes.string,\n            pages: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    elements: PropTypes.arrayOf(\n                        PropTypes.shape({\n                            type: PropTypes.string,\n                            name: PropTypes.string,\n                            title: PropTypes.string,\n                        })\n                    ),\n                })\n            ),\n        }),\n    };\n}\n\nconst apiPropTypes = generatePropTypes(OrigPropTypes);\n\nexport { apiPropTypes, generatePropTypes };\n","const contract_templates_by_filename = {\n    \"/math/default.html\": `<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Offer Letter</title>\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n            html {\n                margin: 0;\n                padding: 0;\n            }\n            body {\n                width: 8.5in;\n                margin: 0;\n                padding-left: 0.75in;\n                padding-right: 0.75in;\n                hyphens: auto;\n                text-align: justify;\n                box-sizing: border-box;\n                font-family: Helvetica, sans-serif;\n                font-size: 12pt;\n            }\n            .i {\n                font-style: italic;\n            }\n            .emphcolor {\n                color: red;\n            }\n            table.appointment-summary {\n                margin-left: 1in;\n                font-size: 0.9em;\n            }\n            .appointment-summary th {\n                padding-right: 0.5em;\n                text-align: right;\n                font-weight: normal;\n            }\n            .letter-head p {\n                margin-bottom: 0.5in;\n            }\n            .letter-foot {\n                margin-top: 1in;\n            }\n            .signature {\n                font-family: alex_brushregular, cursive;\n                font-size: 30pt;\n                margin-left: 0.5in;\n                margin-bottom: 0.1in;\n            }\n            .applicant .signature {\n                border-bottom: 1px solid black;\n                min-width: 2.5in;\n                display: inline-block;\n                margin-left: 0;\n            }\n            .checkbox {\n                font-size: 18pt;\n            }\n\n            @media only screen and (max-width: 9in) {\n                /* when printed, these styles won't show\n\t\t\t\tbecause the \"screen\" is 8.5in */\n                body {\n                    width: unset;\n                    padding-bottom: 0.5in;\n                    padding-left: 2em;\n                    padding-right: 2em;\n                }\n            }\n        </style>\n        <link rel=\"stylesheet\" href=\"font.css\" />\n        <link rel=\"stylesheet\" href=\"header.css\" />\n        <!-- for rendering with wkhtmltopdf styles need to be inlined; when rendered directly in a browser,\n\tthis will just be invalid CSS -->\n        <style>\n            {{ style_font }}\n        </style>\n        <style>\n            {{ style_header }}\n        </style>\n    </head>\n    <body>\n        <div class=\"letter-head\">\n            <div class=\"uoftlogo\"></div>\n            <p>{{ date }}</p>\n            <p>\n                {{ first_name }} {{ last_name }}<br />\n                c/o Some Department<br />\n                University of Toronto\n            </p>\n            <p>Dear {{ first_name }},</p>\n        </div>\n        <div class=\"letter-body\">\n            <p>\n                I am pleased to offer you an appointment as a Teaching Assistant\n                in Some Department. The starting date of your appointment will\n                be {{ start_date | date: \"%b %d, %Y\" }} and this appointment\n                will end on {{ end_date | date: \"%b %d, %Y\" }} with no further\n                notice to you.\n            </p>\n            <h3 class=\"i\">Appointment Summary</h3>\n            <table class=\"appointment-summary\">\n                <tr>\n                    <th>Appointment:</th>\n                    <td class=\"emphcolor\">\n                        {{ position_code }} {{ position_title }}\n                    </td>\n                </tr>\n                <tr>\n                    <th>Hours:</th>\n                    <td class=\"emphcolor\">{{ hours }}</td>\n                </tr>\n                <tr>\n                    <th>Start Date:</th>\n                    <td>{{ start_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>End Date:</th>\n                    <td>{{ end_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>Rate:</th>\n                    <td>{{ pay_period_desc }}</td>\n                </tr>\n            </table>\n\n            <p>\n                Your appointment will be for {{ hours }} hours for {{\n                position_code }}. Your Course Coordinator(s) {{\n                instructor_contact_desc }} will be in contact with you. You will\n                be paid {{ pay_period_desc }} for this position. You will be\n                paid in {{ installments }} instalments, once per month for the\n                period of your appointment. Your salary will be paid by direct\n                deposit.\n            </p>\n            Your payroll documentation will be available online through the\n            University’s Employee Self-Service (ESS) at\n            <a href=\"http://ess.hrandequity.utoronto.ca/\"\n                >ess.hrandequity.utoronto.ca/</a\n            >. This includes electronic delivery of your pay statement, tax\n            documentation, and other payroll documentation as made available\n            from time to time. You are able to print copies of these documents\n            directly from ESS.\n            <p>\n                By signing this Employment Agreement, you authorize the\n                University to provide your T4 slips electronically and not in a\n                paper format. If you wish to discuss an alternative format,\n                please contact Central Payroll Services at\n                payroll.hr@utoronto.ca.\n            </p>\n            <p>\n                This appointment is being granted on the basis that you are a\n                student or Post-Doctoral Fellow (PDF) at the University of\n                Toronto on the starting date of the appointment. If you are not\n                a student or PDF on the starting date of this appointment, this\n                offer is revoked and the University will have no obligations\n                under this letter.\n            </p>\n            <p>\n                As a Teaching Assistant, you will be a member of the Canadian\n                Union of Public Employees (CUPE) Local 3902, Unit 1 bargaining\n                unit. Your employment will be governed by the terms and\n                conditions of the collective agreement between the University of\n                Toronto and CUPE Local 3902, which may be found on the web at\n                <br />\n                <a\n                    href=\"http://agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1\"\n                    >agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1</a\n                >\n                <br />\n                Once you accept the offer of employment, a copy of the agreement\n                will be given to you if you do not already have one. A statement\n                about the Union, along with other information about the Union,\n                can be found on the Union's website (<a\n                    href=\"http://www.cupe3902.org/unit-1/\"\n                    >http://www.cupe3902.org/unit-1/</a\n                >). All of this information is that of the Union, represents the\n                views of the Union, and has not been approved or endorsed by the\n                University.\n            </p>\n            <h3>Required Training</h3>\n            <p>\n                You are required to take the following training:\n            </p>\n            <ul>\n                <li>\n                    U of T AODA Online Training, provided by the Accessibility\n                    for Ontarians with Disabilities Act (AODA) Office, available\n                    at\n                    <a href=\"http://aoda.hrandequity.utoronto.ca/\"\n                        >aoda.hrandequity.utoronto.ca/</a\n                    >\n                </li>\n            </ul>\n            <p>\n                If you are new to the University, or have not previously\n                completed the training, you will be notified by email when the\n                training module becomes available for your completion, normally\n                one month after the start date of this appointment. Completion\n                of this training will be automatically captured in the system\n                and you will be paid for this training in accordance with the\n                rates set out in your collective agreement. Please note that you\n                only need to complete the above training program once with the\n                University.\n            </p>\n            <h3>Policies & Procedures</h3>\n            <p>\n                You will also be subject to and bound by University policies of\n                general application and their related guidelines. The policies\n                are listed on the Governing Council website at\n                <a\n                    href=\"http://www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm\"\n                    >www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm</a\n                >\n                For convenience, a partial list of policies, those applicable to\n                all employees, and related guidelines can be found on the Human\n                Resources and Equity website at policies.hrandequity.utoronto.ca\n                Printed versions will be provided, upon request, through Human\n                Resources or your supervisor.\n            </p>\n            <p>\n                You should pay particular attention to those policies which\n                confirm the University’s commitment to, and your obligation to\n                support, a workplace that is free from discrimination and\n                harassment as set out in the Human Rights Code, is safe as set\n                out in the Occupational Health and Safety Act, and that respects\n                the University's commitment to equity and to workplace civility.\n            </p>\n            <p>\n                All of the applicable policies may be amended and/or new\n                policies may be introduced from time to time. When this happens,\n                if notice is required you will be given notice as the University\n                deems necessary and the amendments will become binding terms of\n                your employment contract with the University.\n            </p>\n            <h3>Accessibility</h3>\n            <p>\n                The University has a number of programs and services available\n                to employees who have need of accommodation due to disability\n                through its Health & Well-being Programs and Services (<a\n                    href=\"http://www.hrandequity.utoronto.ca/about-hr-equity/health.htm\"\n                    >www.hrandequity.utoronto.ca/about-hr-equity/health.htm</a\n                >). A description of the accommodation process is available in\n                the Accommodation for Employees with Disabilities: U of T\n                Guidelines, which may be found at:\n                <br />\n                <a\n                    href=\"http://well-being.hrandequity.utoronto.ca/services/#accommodation\"\n                    >well-being.hrandequity.utoronto.ca/services/#accommodation</a\n                >\n                <br />\n                In the event that you have a disability that would impact upon\n                how you would respond to an emergency in the workplace (e.g.,\n                situations requiring evacuation), you should contact Health &\n                Well-being Programs & Services at 416.978.2149 as soon as\n                possible so that you can be provided with information regarding\n                an individualized emergency response plan.\n            </p>\n            <p>\n                The law requires the Employment Standards Act Poster to be\n                provided to all employees; it is available on the HR & Equity\n                website at\n                <a\n                    href=\"http://www.hrandequity.utoronto.ca/news/employment-standards-ontario\"\n                    >www.hrandequity.utoronto.ca/news/employment-standards-ontario</a\n                >\n                This poster describes the minimum rights and obligations\n                contained in the Employment Standards Act. Please note that in\n                many respects this offer of employment exceeds the minimum\n                requirements set out in the Act.\n            </p>\n            <p>\n                Your duties may include all or any combination of the following:\n                grading, scheduled tutorials, office hours, Math Aid Centre\n                hours, and test and exam invigilation. You will be expected to\n                complete all grading for all student work that is completed\n                during the term of the appointment, up to and including final\n                exams.\n            </p>\n            <p>\n                Within 15 working days after the date of this letter, you will\n                be given the opportunity to review the Description of Duties and\n                Allocation of Hours (DDAH) form, which will set out more\n                specifically the duties of your position, and the hours assigned\n                to each.\n            </p>\n            <p>\n                Please sign below to indicate your acceptance of this offer, and\n                return a copy of this letter to me as soon as possible but no\n                later than 2 days after you have been provided with the DDAH\n                form. If we have not heard from you by this deadline, this offer\n                may be withdrawn. If you are unable to accept this offer, please\n                advise me immediately.\n            </p>\n            <p>\n                If you have any questions, please contact me via email at\n                <a href=\"mailto:tacoord@toronto.edu\">tacoord@toronto.edu</a>\n            </p>\n        </div>\n        <div class=\"letter-foot tacoordinator\">\n            <p>Yours sincerely,</p>\n            <div class=\"signature\">Tom Tomson</div>\n            <div class=\"details\">\n                Tom Tomson<br />TA Coordinator<br />Some Department\n            </div>\n        </div>\n        <div>\n            <p>\n                <span class=\"checkbox\"\n                    >{% if signature == blank %}☐{% else %}☑{% endif %}</span\n                >\n                I confirm that I will be registered as a University of Toronto\n                student or PDF on the date that this appointment begins. I\n                understand that if I should cease to be registered as a\n                University of Toronto student or PDF during the period of this\n                appointment, for any reason other than convocation, I must\n                immediately notify my supervisor, and my appointment may be\n                terminated.\n            </p>\n        </div>\n        <div class=\"letter-foot applicant\">\n            <p>Please sign below to accept this offer.</p>\n            <div class=\"signature\">{{ signature }}</div>\n            <div class=\"details\">\n                Applicant Signature\n            </div>\n        </div>\n    </body>\n</html>`,\n    \"/math/oto.html\": `<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Offer Letter</title>\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n            html {\n                margin: 0;\n                padding: 0;\n            }\n            body {\n                width: 8.5in;\n                margin: 0;\n                padding-left: 0.75in;\n                padding-right: 0.75in;\n                hyphens: auto;\n                text-align: justify;\n                box-sizing: border-box;\n                font-family: Helvetica, sans-serif;\n                font-size: 12pt;\n            }\n            .i {\n                font-style: italic;\n            }\n            .emphcolor {\n                color: red;\n            }\n            table.appointment-summary {\n                margin-left: 1in;\n                font-size: 0.9em;\n            }\n            .appointment-summary th {\n                padding-right: 0.5em;\n                text-align: right;\n                font-weight: normal;\n            }\n            .letter-head p {\n                margin-bottom: 0.5in;\n            }\n            .letter-foot {\n                margin-top: 1in;\n            }\n            .signature {\n                font-family: alex_brushregular, cursive;\n                font-size: 30pt;\n                margin-left: 0.5in;\n                margin-bottom: 0.1in;\n            }\n            .applicant .signature {\n                border-bottom: 1px solid black;\n                min-width: 2.5in;\n                display: inline-block;\n                margin-left: 0;\n            }\n            .checkbox {\n                font-size: 18pt;\n            }\n\n            @media only screen and (max-width: 9in) {\n                /* when printed, these styles won't show\n\t\t\t\tbecause the \"screen\" is 8.5in */\n                body {\n                    width: unset;\n                    padding-bottom: 0.5in;\n                    padding-left: 2em;\n                    padding-right: 2em;\n                }\n            }\n        </style>\n        <link rel=\"stylesheet\" href=\"font.css\" />\n        <link rel=\"stylesheet\" href=\"header.css\" />\n        <!-- for rendering with wkhtmltopdf styles need to be inlined; when rendered directly in a browser,\n\tthis will just be invalid CSS -->\n        <style>\n            {{ style_font }}\n        </style>\n        <style>\n            {{ style_header }}\n        </style>\n    </head>\n    <body>\n        <div class=\"letter-head\">\n            <div class=\"uoftlogo\"></div>\n            <p>{{ date }}</p>\n            <p>\n                {{ first_name }} {{ last_name }}<br />\n                c/o Some Department<br />\n                University of Toronto\n            </p>\n            <p>Dear {{ first_name }},</p>\n        </div>\n        <div class=\"letter-body\">\n            <p>\n                I am pleased to offer you an appointment as a Teaching Assistant\n                in Some Department. The starting date of your appointment will\n                be {{ start_date | date: \"%b %d, %Y\" }} and this appointment\n                will end on {{ end_date | date: \"%b %d, %Y\" }} with no further\n                notice to you.\n            </p>\n            <h3 class=\"i\">Appointment Summary</h3>\n            <table class=\"appointment-summary\">\n                <tr>\n                    <th>Appointment:</th>\n                    <td class=\"emphcolor\">\n                        {{ position_code }} {{ position_title }}\n                    </td>\n                </tr>\n                <tr>\n                    <th>Hours:</th>\n                    <td class=\"emphcolor\">{{ hours }}</td>\n                </tr>\n                <tr>\n                    <th>Start Date:</th>\n                    <td>{{ start_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>End Date:</th>\n                    <td>{{ end_date | date: \"%b %d, %Y\" }}</td>\n                </tr>\n                <tr>\n                    <th>Rate:</th>\n                    <td>{{ pay_period_desc }}</td>\n                </tr>\n            </table>\n\n            <p>\n                Your appointment will be for {{ hours }} hours for {{\n                position_code }}. This is a ONE TIME ONLY appointment. Your Course Coordinator(s) {{\n                instructor_contact_desc }} will be in contact with you. You will\n                be paid {{ pay_period_desc }} for this position. You will be\n                paid in one instalment. Your salary will be paid by direct\n                deposit.\n            </p>\n            Your payroll documentation will be available online through the\n            University’s Employee Self-Service (ESS) at\n            <a href=\"http://ess.hrandequity.utoronto.ca/\"\n                >ess.hrandequity.utoronto.ca/</a\n            >. This includes electronic delivery of your pay statement, tax\n            documentation, and other payroll documentation as made available\n            from time to time. You are able to print copies of these documents\n            directly from ESS.\n            <p>\n                By signing this Employment Agreement, you authorize the\n                University to provide your T4 slips electronically and not in a\n                paper format. If you wish to discuss an alternative format,\n                please contact Central Payroll Services at\n                payroll.hr@utoronto.ca.\n            </p>\n            <p>\n                This appointment is being granted on the basis that you are a\n                student or Post-Doctoral Fellow (PDF) at the University of\n                Toronto on the starting date of the appointment. If you are not\n                a student or PDF on the starting date of this appointment, this\n                offer is revoked and the University will have no obligations\n                under this letter.\n            </p>\n            <p>\n                As a Teaching Assistant, you will be a member of the Canadian\n                Union of Public Employees (CUPE) Local 3902, Unit 1 bargaining\n                unit. Your employment will be governed by the terms and\n                conditions of the collective agreement between the University of\n                Toronto and CUPE Local 3902, which may be found on the web at\n                <br />\n                <a\n                    href=\"http://agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1\"\n                    >agreements.hrandequity.utoronto.ca/#CUPE3902_Unit1</a\n                >\n                <br />\n                Once you accept the offer of employment, a copy of the agreement\n                will be given to you if you do not already have one. A statement\n                about the Union, along with other information about the Union,\n                can be found on the Union's website (<a\n                    href=\"http://www.cupe3902.org/unit-1/\"\n                    >http://www.cupe3902.org/unit-1/</a\n                >). All of this information is that of the Union, represents the\n                views of the Union, and has not been approved or endorsed by the\n                University.\n            </p>\n            <h3>Required Training</h3>\n            <p>\n                You are required to take the following training:\n            </p>\n            <ul>\n                <li>\n                    U of T AODA Online Training, provided by the Accessibility\n                    for Ontarians with Disabilities Act (AODA) Office, available\n                    at\n                    <a href=\"http://aoda.hrandequity.utoronto.ca/\"\n                        >aoda.hrandequity.utoronto.ca/</a\n                    >\n                </li>\n            </ul>\n            <p>\n                If you are new to the University, or have not previously\n                completed the training, you will be notified by email when the\n                training module becomes available for your completion, normally\n                one month after the start date of this appointment. Completion\n                of this training will be automatically captured in the system\n                and you will be paid for this training in accordance with the\n                rates set out in your collective agreement. Please note that you\n                only need to complete the above training program once with the\n                University.\n            </p>\n            <h3>Policies & Procedures</h3>\n            <p>\n                You will also be subject to and bound by University policies of\n                general application and their related guidelines. The policies\n                are listed on the Governing Council website at\n                <a\n                    href=\"http://www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm\"\n                    >www.governingcouncil.utoronto.ca/Governing_Council/Policies.htm</a\n                >\n                For convenience, a partial list of policies, those applicable to\n                all employees, and related guidelines can be found on the Human\n                Resources and Equity website at policies.hrandequity.utoronto.ca\n                Printed versions will be provided, upon request, through Human\n                Resources or your supervisor.\n            </p>\n            <p>\n                You should pay particular attention to those policies which\n                confirm the University’s commitment to, and your obligation to\n                support, a workplace that is free from discrimination and\n                harassment as set out in the Human Rights Code, is safe as set\n                out in the Occupational Health and Safety Act, and that respects\n                the University's commitment to equity and to workplace civility.\n            </p>\n            <p>\n                All of the applicable policies may be amended and/or new\n                policies may be introduced from time to time. When this happens,\n                if notice is required you will be given notice as the University\n                deems necessary and the amendments will become binding terms of\n                your employment contract with the University.\n            </p>\n            <h3>Accessibility</h3>\n            <p>\n                The University has a number of programs and services available\n                to employees who have need of accommodation due to disability\n                through its Health & Well-being Programs and Services (<a\n                    href=\"http://www.hrandequity.utoronto.ca/about-hr-equity/health.htm\"\n                    >www.hrandequity.utoronto.ca/about-hr-equity/health.htm</a\n                >). A description of the accommodation process is available in\n                the Accommodation for Employees with Disabilities: U of T\n                Guidelines, which may be found at:\n                <br />\n                <a\n                    href=\"http://well-being.hrandequity.utoronto.ca/services/#accommodation\"\n                    >well-being.hrandequity.utoronto.ca/services/#accommodation</a\n                >\n                <br />\n                In the event that you have a disability that would impact upon\n                how you would respond to an emergency in the workplace (e.g.,\n                situations requiring evacuation), you should contact Health &\n                Well-being Programs & Services at 416.978.2149 as soon as\n                possible so that you can be provided with information regarding\n                an individualized emergency response plan.\n            </p>\n            <p>\n                The law requires the Employment Standards Act Poster to be\n                provided to all employees; it is available on the HR & Equity\n                website at\n                <a\n                    href=\"http://www.hrandequity.utoronto.ca/news/employment-standards-ontario\"\n                    >www.hrandequity.utoronto.ca/news/employment-standards-ontario</a\n                >\n                This poster describes the minimum rights and obligations\n                contained in the Employment Standards Act. Please note that in\n                many respects this offer of employment exceeds the minimum\n                requirements set out in the Act.\n            </p>\n            <p>\n                Your duties may include all or any combination of the following:\n                grading, scheduled tutorials, office hours, Math Aid Centre\n                hours, and test and exam invigilation. You will be expected to\n                complete all grading for all student work that is completed\n                during the term of the appointment, up to and including final\n                exams.\n            </p>\n            <p>\n                Within 15 working days after the date of this letter, you will\n                be given the opportunity to review the Description of Duties and\n                Allocation of Hours (DDAH) form, which will set out more\n                specifically the duties of your position, and the hours assigned\n                to each.\n            </p>\n            <p>\n                Please sign below to indicate your acceptance of this offer, and\n                return a copy of this letter to me as soon as possible but no\n                later than 2 days after you have been provided with the DDAH\n                form. If we have not heard from you by this deadline, this offer\n                may be withdrawn. If you are unable to accept this offer, please\n                advise me immediately.\n            </p>\n            <p>\n                If you have any questions, please contact me via email at\n                <a href=\"mailto:tacoord@toronto.edu\">tacoord@toronto.edu</a>\n            </p>\n        </div>\n        <div class=\"letter-foot tacoordinator\">\n            <p>Yours sincerely,</p>\n            <div class=\"signature\">Tom Tomson</div>\n            <div class=\"details\">\n                Tom Tomson<br />TA Coordinator<br />Some Department\n            </div>\n        </div>\n        <div>\n            <p>\n                <span class=\"checkbox\"\n                    >{% if signature == blank %}☐{% else %}☑{% endif %}</span\n                >\n                I confirm that I will be registered as a University of Toronto\n                student or PDF on the date that this appointment begins. I\n                understand that if I should cease to be registered as a\n                University of Toronto student or PDF during the period of this\n                appointment, for any reason other than convocation, I must\n                immediately notify my supervisor, and my appointment may be\n                terminated.\n            </p>\n        </div>\n        <div class=\"letter-foot applicant\">\n            <p>Please sign below to accept this offer.</p>\n            <div class=\"signature\">{{ signature }}</div>\n            <div class=\"details\">\n                Applicant Signature\n            </div>\n        </div>\n    </body>\n</html>`,\n};\n// It's not important to store separate HTML templates for each of these\n// so just duplicate an existing template.\ncontract_templates_by_filename[\"/math/default2018.html\"] =\n    contract_templates_by_filename[\"/math/default.html\"];\ncontract_templates_by_filename[\"/math/invigilate.html\"] =\n    contract_templates_by_filename[\"/math/default.html\"];\ncontract_templates_by_filename[\"/math/invigilate2014.html\"] =\n    contract_templates_by_filename[\"/math/default.html\"];\n\nexport const mockData = {\n    sessions: [\n        {\n            id: 1,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            name: \"2019 Fall\",\n            rate1: 45.55,\n            rate2: 47.33,\n        },\n        {\n            id: 2,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-30T00:00:00.000Z\",\n            name: \"2021 Spring\",\n            rate1: 45.55,\n            rate2: null,\n        },\n    ],\n    available_contract_templates: [\n        {\n            template_file: \"/math/default.html\",\n        },\n        {\n            template_file: \"/math/default2018.html\",\n        },\n        {\n            template_file: \"/math/invigilate.html\",\n        },\n        {\n            template_file: \"/math/invigilate2014.html\",\n        },\n        {\n            template_file: \"/math/oto.html\",\n        },\n    ],\n    contract_templates: [\n        {\n            id: 1,\n            template_name: \"standard\",\n            template_file: \"/math/default.html\",\n        },\n        {\n            id: 2,\n            template_name: \"oto\",\n            template_file: \"/math/oto.html\",\n        },\n        {\n            id: 3,\n            template_name: \"standard\",\n            template_file: \"/math/default2018.html\",\n        },\n        {\n            id: 4,\n            template_name: \"invigilate\",\n            template_file: \"/math/invigilate.html\",\n        },\n    ],\n    contract_templates_by_session: {\n        1: [1, 2],\n        2: [3, 4],\n    },\n    contract_templates_by_filename: contract_templates_by_filename,\n    instructors: [\n        {\n            id: 1000,\n            last_name: \"Smith\",\n            first_name: \"Henry\",\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\",\n        },\n        {\n            id: 1001,\n            last_name: \"Garcia\",\n            first_name: \"Emily\",\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\",\n        },\n        {\n            id: 1002,\n            last_name: \"Miller\",\n            first_name: \"Megan\",\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\",\n        },\n        {\n            id: 1003,\n            last_name: \"Beera\",\n            first_name: \"Lizzy\",\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\",\n        },\n    ],\n    positions_by_session: {\n        1: [10, 11, 14, 15, 16],\n        2: [12, 13],\n    },\n    positions: [\n        {\n            id: 10,\n            position_code: \"MAT135H1F\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 1,\n            duties: \"Tutorials\",\n            qualifications: \"Teaching skill\",\n            desired_num_assignments: 15,\n            current_enrollment: 1200,\n            current_waitlisted: 200,\n            instructor_ids: [1000, 1001],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1001,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1001,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1001,\n                },\n            ],\n        },\n        {\n            id: 11,\n            position_code: \"MAT136H1F\",\n            position_title: \"Calculus II\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 2,\n            instructor_ids: [],\n        },\n        {\n            id: 12,\n            position_code: \"CSC135H1F\",\n            position_title: \"Computer Fun\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            duties: \"Tutorials\",\n            contract_template_id: 3,\n            instructor_ids: [1000],\n            instructor_preferences: [\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 2,\n                    applicant_id: 2001,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1000,\n                },\n            ],\n        },\n        {\n            id: 13,\n            position_code: \"MAT235H1F\",\n            position_title: \"Calculus III\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 3,\n            instructor_ids: [1002],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1002,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1002,\n                },\n            ],\n        },\n        {\n            instructor_ids: [1002],\n            position_code: \"CSC100H1S\",\n            position_title: \"Computers for Humans\",\n            hours_per_assignment: 100,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 14,\n        },\n        {\n            instructor_ids: [1000],\n            position_code: \"MAT137Y1Y\",\n            position_title: \"Calculus!\",\n            hours_per_assignment: 250,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            qualifications: \"Skilled Proofs Reader\",\n            current_enrollment: 1500,\n            current_waitlisted: 78,\n            desired_num_assignments: 22,\n            id: 15,\n        },\n        {\n            instructor_ids: [1001],\n            position_code: \"MAT135H1F Head TA\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 225,\n            duties: \"Top-notch Head TA Stuff\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            desired_num_assignments: 3,\n            id: 16,\n        },\n    ],\n    applicants: [\n        {\n            id: 2000,\n            utorid: \"weasleyr\",\n            student_number: \"89013443\",\n            first_name: \"Ron\",\n            last_name: \"Weasley\",\n            email: \"ron@potter.com\",\n            phone: \"543-223-9993\",\n        },\n        {\n            id: 2001,\n            utorid: \"potterh\",\n            student_number: \"999666999\",\n            first_name: \"Harry\",\n            last_name: \"Potter\",\n            email: \"harry@potter.com\",\n        },\n        {\n            id: 2002,\n            utorid: \"smithb\",\n            email: \"smithb@mail.utoronto.ca\",\n            first_name: \"Bethany\",\n            last_name: \"Smith\",\n            student_number: \"131382748\",\n        },\n        {\n            id: 2003,\n            utorid: \"wilsonh\",\n            email: \"wilsonh@mail.utoronto.ca\",\n            first_name: \"Hanna\",\n            last_name: \"Wilson\",\n            student_number: \"600366904\",\n        },\n        {\n            id: 2004,\n            utorid: \"molinat\",\n            email: \"molinat@mail.utoronto.ca\",\n            first_name: \"Troy\",\n            last_name: \"Molina\",\n            student_number: \"328333023\",\n        },\n        {\n            id: 2005,\n            utorid: \"howeyb\",\n            email: \"howeyb@mail.utoronto.ca\",\n            first_name: \"Brett\",\n            last_name: \"Howey\",\n            student_number: \"329613524\",\n        },\n        {\n            id: 2006,\n            utorid: \"brownd\",\n            email: \"brownd@mail.utoronto.ca\",\n            first_name: \"David\",\n            last_name: \"Brown\",\n            student_number: \"29151485\",\n        },\n    ],\n    assignments_by_session: {\n        1: [100, 101, 102, 103, 104, 105, 106, 107, 108, 109],\n        2: [],\n    },\n    assignments: [\n        {\n            id: 100,\n            position_id: 10,\n            applicant_id: 2001,\n            hours: 90,\n        },\n        {\n            id: 101,\n            position_id: 10,\n            applicant_id: 2005,\n            hours: 95,\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 102,\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 103,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2001,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 104,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 105,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2005,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 106,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 107,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2006,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 108,\n        },\n        {\n            note: \"\",\n            position_id: 14,\n            applicant_id: 2002,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 109,\n        },\n    ],\n    wage_chunks: [\n        {\n            id: 3000,\n            assignment_id: 100,\n            hours: 20,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            rate: 10.01,\n        },\n        {\n            id: 3001,\n            assignment_id: 100,\n            hours: 35,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: 12.02,\n        },\n        {\n            id: 3002,\n            assignment_id: 101,\n            hours: 95,\n            start_date: \"2019-09-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: null,\n        },\n        {\n            id: 3003,\n            assignment_id: 102,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n        },\n        {\n            id: 3004,\n            assignment_id: 103,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n        },\n        {\n            id: 3005,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3006,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3007,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3008,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3009,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3010,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3011,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3012,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3013,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3014,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3015,\n            assignment_id: 109,\n            hours: 100,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n    ],\n    offers: [\n        {\n            id: 10000,\n            assignment_id: 100,\n            status: \"withdrawn\",\n        },\n        {\n            id: 10001,\n            assignment_id: 100,\n            status: \"pending\",\n        },\n        {\n            id: 10002,\n            assignment_id: 101,\n            status: \"accepted\",\n        },\n        {\n            id: 10003,\n            assignment_id: 102,\n            status: \"withdrawn\",\n        },\n    ],\n    applications: [\n        {\n            id: 15000,\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_experience_summary: \"Last year I TAed a bunch\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2000,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 15,\n                },\n            ],\n        },\n        {\n            id: 15001,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_experience_summary: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2001,\n            position_preferences: [\n                {\n                    preference_level: 0,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n            ],\n        },\n        {\n            id: 15002,\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Math\",\n            previous_experience_summary: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15003,\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_experience_summary: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2005,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 1,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15004,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_experience_summary: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2006,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n            ],\n        },\n        {\n            id: 15005,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Math\",\n            previous_experience_summary: \"\",\n            yip: 3,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15006,\n            comments: \"\",\n            program: \"MSc\",\n            department: \"Computer Science\",\n            previous_experience_summary: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2003,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            id: 15007,\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_experience_summary: \"\",\n            yip: 4,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2004,\n            position_preferences: [\n                {\n                    preference_level: 1,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n            ],\n        },\n    ],\n    ddahs: [\n        {\n            id: 700,\n            assignment_id: 100,\n            signature: null,\n            approved_date: null,\n            accepted_date: null,\n            revised_date: null,\n            emailed_date: null,\n            url_token: \"DJAKSLJLFD\",\n            duties: [\n                {\n                    order: 2,\n                    hours: 25,\n                    description: \"marking:Marking the midterm\",\n                },\n                {\n                    order: 1,\n                    hours: 4,\n                    description: \"training:Initial training\",\n                },\n                {\n                    order: 3,\n                    hours: 40,\n                    description: \"contact:Running tutorials\",\n                },\n            ],\n        },\n        {\n            id: 701,\n            assignment_id: 101,\n            signature: \"Brett Howey\",\n            approved_date: null,\n            accepted_date: \"2019-09-02T00:00:00.000Z\",\n            revised_date: null,\n            emailed_date: \"2019-09-02T00:00:00.000Z\",\n            url_token: \"somerandomtoken\",\n            duties: [\n                {\n                    order: 2,\n                    hours: 50,\n                    description: \"marking:Marking the midterm\",\n                },\n                {\n                    order: 1,\n                    hours: 6,\n                    description: \"training:Initial training\",\n                },\n            ],\n        },\n    ],\n    users: [\n        {\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\",\n            roles: [\"admin\", \"instructor\"],\n        },\n        {\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\",\n            roles: [\"instructor\"],\n        },\n        {\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\",\n            roles: [\"instructor\"],\n        },\n        {\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\",\n            roles: [\"instructor\"],\n        },\n    ],\n    active_user: \"smithh\",\n};\n","import {\n    getAttributesCheckMessage,\n    MockAPIController,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n    RouteParams,\n} from \"../defs/doc-generation\";\nimport { Session as SessionType } from \"../defs/types\";\n\nexport class Session extends MockAPIController {\n    constructor(data: any) {\n        super(data, data.sessions);\n    }\n    create(session: Partial<SessionType>): SessionType {\n        const newSession = super.create(session) as SessionType;\n        // If we insert a new session, we need to make sure we create\n        // a corresponding assignments_by_session array\n        this.data.assignments_by_session[newSession.id] = [];\n        return newSession;\n    }\n    findAll(...args: any[]): SessionType[] {\n        return super.findAll(...args) as SessionType[];\n    }\n    validateNew(session: Partial<SessionType>) {\n        // if we're here, we need to create a new session\n        // but check if the session name is empty or duplicate\n        const message = getAttributesCheckMessage(session, this.ownData, {\n            name: { required: true, unique: true },\n        } as any);\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    validateProp(prop: keyof SessionType, value: any, id: number) {\n        if (prop === \"name\") {\n            // check if `name` is empty\n            if (value === undefined || value.length === 0) {\n                throw new Error(\n                    `Property ${prop} cannot be empty or undefined.`\n                );\n            }\n            // if `name` is not empty, make sure it is unique after the update\n            // by filtering out the request session\n            const filteredData = this.findAll().filter(\n                (item) => item.id !== id\n            );\n            // and make sure `name` is unique to the rest\n            const message = getAttributesCheckMessage(\n                { name: value },\n                filteredData,\n                {\n                    name: { unique: true },\n                } as any\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport const sessionsRoutes = {\n    get: {\n        \"/sessions\": documentCallback({\n            func: (data: any) => new Session(data).findAll(),\n            summary: \"Get all available sessions\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.session),\n        }),\n    },\n    post: {\n        \"/sessions\": documentCallback({\n            func: (\n                data: any,\n                params: RouteParams,\n                body: Partial<SessionType>\n            ) => {\n                errorUnlessRole(params, \"admin\");\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                return new Session(data).upsert(body);\n            },\n            summary: \"Upsert a session\",\n            returns: docApiPropTypes.session,\n            posts: docApiPropTypes.session,\n        }),\n        \"/sessions/delete\": documentCallback({\n            func: (\n                data: any,\n                params: RouteParams,\n                body: Partial<SessionType>\n            ) => {\n                errorUnlessRole(params, \"admin\");\n                return new Session(data).delete(body as any);\n            },\n            summary: \"Delete a session\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController,\n    bytesToBase64,\n    errorUnlessRole,\n    base64decode,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class ContractTemplate extends MockAPIController {\n    constructor(data) {\n        super(data);\n        this.ownData = this.data.contract_templates;\n    }\n    validateNew(template, session = null) {\n        // The name and file are required\n        const message = getAttributesCheckMessage(template, this.ownData, {\n            template_name: { required: true },\n            template_file: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n        // If we're inserting to a session, the name must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                template,\n                this.findAllBySession(session),\n                {\n                    template_name: { required: true, unique: true },\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    upload({ file_contents, file_name }) {\n        if (file_name in this.data.contract_templates_by_filename) {\n            throw new Error(\n                `Template with filename '${file_name}' already exists.`\n            );\n        }\n        this.data.contract_templates_by_filename[file_name] = file_contents;\n        this.data.available_contract_templates.push({\n            template_file: file_name,\n        });\n    }\n    getTemplateHtml(template) {\n        template = new ContractTemplate(this.data).find(template);\n        if (\n            !(\n                template.template_file in\n                this.data.contract_templates_by_filename\n            )\n        ) {\n            throw new Error(\n                `Could not find Html for template ${template.template_file}`\n            );\n        }\n        return this.data.contract_templates_by_filename[template.template_file];\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.contract_templates_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).find(session);\n        // If this is not an upsert, validate the parameters. Otherwise, don't validate.\n        if (!this.find(obj)) {\n            this.validateNew(obj, matchingSession);\n        }\n        const newTemplate = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.contract_templates_by_session[matchingSession.id] =\n            this.data.contract_templates_by_session[matchingSession.id] || [];\n        this.data.contract_templates_by_session[matchingSession.id].push(\n            newTemplate.id\n        );\n        return newTemplate;\n    }\n}\n\nexport const templatesRoutes = {\n    get: {\n        \"/available_contract_templates\": documentCallback({\n            func: (data) => [...data.available_contract_templates],\n            summary:\n                \"Get all available contract templates (these are literal files on the server).\",\n            returns: wrappedPropTypes.arrayOf(\n                docApiPropTypes.contractTemplateMinimal\n            ),\n        }),\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params) =>\n                new ContractTemplate(data).findAllBySession(params.session_id),\n            summary: \"Get contract templates associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.contractTemplate),\n        }),\n        \"/contract_templates/:template_id/view\": documentCallback({\n            func: (data, params) =>\n                new ContractTemplate(data).getTemplateHtml(params.template_id),\n            summary:\n                \"Get a preview of the contact template (i.e., the actual HTML).\",\n            returns: wrappedPropTypes.string,\n        }),\n        \"/contract_templates/:template_id/download\": documentCallback({\n            func: (data, params) => {\n                const { template_id } = params;\n                const template = new ContractTemplate(data);\n                const templateContent = template.getTemplateHtml(template_id);\n\n                // We're directly sending binary data, so we need to encode the template\n                // as UTF-8 (rather than native Javascript UTF-16)\n                const encodedContent = new TextEncoder().encode(\n                    templateContent\n                );\n                return {\n                    file_name: template.find(template_id).template_file,\n                    mime_type: \"text/html\",\n                    content: bytesToBase64(encodedContent),\n                };\n            },\n            summary:\n                \"Download the raw HTML template associated with the contract-template. No substitutions are made to this file. The `content` filed is encoded in Base64 and may be a binary file (e.g., a zip file).\",\n            returns: wrappedPropTypes.shape({\n                file_name: wrappedPropTypes.string,\n                mime_type: wrappedPropTypes.string,\n                content: wrappedPropTypes.string,\n            }),\n        }),\n    },\n    post: {\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params, body) => {\n                return new ContractTemplate(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Associate a position template with a session; this method upserts\",\n            posts: docApiPropTypes.contractTemplate,\n            returns: docApiPropTypes.contractTemplate,\n        }),\n        \"/contract_templates/upload\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                const { file_name, content } = body;\n                const file_contents = base64decode(content);\n                new ContractTemplate(data).upload({ file_contents, file_name });\n                return [...data.available_contract_templates];\n            },\n            summary:\n                \"Upload a base64-encoded contract template. (The contract template should be utf-8 encoded HTML).\",\n            posts: wrappedPropTypes.shape({\n                file_name: wrappedPropTypes.string,\n                content: wrappedPropTypes.string,\n            }),\n            returns: wrappedPropTypes.arrayOf(\n                docApiPropTypes.contractTemplateMinimal\n            ),\n        }),\n        \"/contract_templates/delete\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Delete a contract template\",\n            posts: docApiPropTypes.contractTemplate,\n            returns: docApiPropTypes.contractTemplate,\n        }),\n        \"/contract_templates\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Update a contract template\",\n            posts: docApiPropTypes.contractTemplate,\n            returns: docApiPropTypes.contractTemplate,\n        }),\n    },\n};\n","import { MockAPIController, find, getAttributesCheckMessage } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\n\nexport class User extends MockAPIController {\n    constructor(data) {\n        super(data, data.users);\n    }\n    validateNew(user) {\n        const message = getAttributesCheckMessage(user, this.ownData, {\n            utorid: { required: true, unique: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        // If we pass an `id`, rely on that, otherwise,\n        // use the `utorid`.\n        if (query.id != null) {\n            return find(query, this.ownData);\n        }\n        if (query.utorid != null) {\n            return find(query, this.ownData, \"utorid\");\n        }\n        return find({ utorid: query }, this.ownData, \"utorid\");\n    }\n    setActiveUser(user) {\n        const matchingUser = this.find(user);\n        if (!matchingUser) {\n            throw new Error(\n                `Cannot find user ${JSON.stringify(user)} to set as active`\n            );\n        }\n        this.data.active_user = matchingUser.utorid;\n    }\n    getActiveUser() {\n        return this.find(this.data.active_user);\n    }\n}\n\nexport const activeUserRoutes = {\n    get: {\n        \"/users\": documentCallback({\n            func: (data) => new User(data).findAll(),\n            summary: \"Get all available users.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n        }),\n        \"/active_user\": documentCallback({\n            func: (data) => new User(data).getActiveUser(),\n            summary: \"Gets the currently active user.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            roles: [\"instructor\", \"ta\"],\n        }),\n    },\n    post: {\n        \"/users\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary: \"Upserts user info\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    deleteInArray,\n    MockAPIController,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { User } from \"./active_user\";\nimport { Position } from \"./positions\";\n\nexport class Instructor extends MockAPIController {\n    constructor(data) {\n        super(data, data.instructors);\n    }\n    validateNew(instructor) {\n        const message = getAttributesCheckMessage(instructor, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    delete(instructor) {\n        const matchingInstructor = this.find(instructor);\n        if (!matchingInstructor) {\n            throw new Error(\n                `Cannot find instructor matching ${JSON.stringify(instructor)}`\n            );\n        }\n        super.delete(matchingInstructor);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const position of this.data.positions) {\n            if (\n                (position.instructor_ids || []).includes(matchingInstructor.id)\n            ) {\n                deleteInArray(matchingInstructor.id, position.instructor_ids);\n            }\n        }\n        return matchingInstructor;\n    }\n    /**\n     * Returns the instructor object corresponding to the active user,\n     * or null if the active user doesn't correspond to an instructor.\n     *\n     * @returns {Instructor | null}\n     * @memberof Instructor\n     */\n    getFromActiveUser() {\n        const activeUser = new User(this.data).getActiveUser();\n        const activeInstructor = new Instructor(this.data)\n            .findAll()\n            .find((instructor) => instructor.utorid === activeUser.utorid);\n        return activeInstructor;\n    }\n}\n\nexport const instructorsRoutes = {\n    get: {\n        \"/instructors\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Instructor(data).findAll();\n                }\n                if (params.role === \"instructor\") {\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    const instructorPositions = new Position(\n                        data\n                    ).getForInstructor(activeInstructor);\n                    const instructorIdsSet = new Set();\n                    for (const position of instructorPositions) {\n                        for (const id of position.instructor_ids) {\n                            instructorIdsSet.add(id);\n                        }\n                    }\n\n                    return new Instructor(data)\n                        .findAll()\n                        .filter((instructor) =>\n                            instructorIdsSet.has(instructor.id)\n                        );\n                }\n                // Always error if we've made it to this point\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get a list of all instructors\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.instructor),\n        }),\n    },\n    post: {\n        \"/instructors\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Instructor(data).upsert(body);\n            },\n            summary: \"Upsert an instructor\",\n            posts: docApiPropTypes.instructor,\n            returns: docApiPropTypes.instructor,\n        }),\n        \"/instructors/delete\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Instructor(data).delete(body);\n            },\n            summary: \"Delete an instructor (removes from all positions)\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.instructor,\n        }),\n    },\n};\n","import {\n    find,\n    getAttributesCheckMessage,\n    deleteInArray,\n    findAllById,\n    MockAPIController,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\nimport { ContractTemplate } from \"./contract_templates\";\nimport { Instructor } from \"./instructors\";\n\nexport class Position extends MockAPIController {\n    constructor(data) {\n        super(data, data.positions);\n    }\n    validateNew(position, session = null) {\n        // If we're inserting to a session, the position_code must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                position,\n                this.findAllBySession(session),\n                {\n                    position_code: { required: true, unique: true },\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    find(query) {\n        const rawPosition = this.rawFind(query);\n        // Find which session we're part of\n\n        let session_id = null;\n        for (const [_session_id, assignment_ids] of Object.entries(\n            this.data.positions_by_session\n        )) {\n            if (assignment_ids.includes(rawPosition.id)) {\n                session_id = _session_id;\n                break;\n            }\n        }\n        return { ...rawPosition, session_id };\n    }\n    getSession(position) {\n        return new Session(this.data).find({\n            id: position.session_id,\n        });\n    }\n    getContractTemplate(position) {\n        return new ContractTemplate(this.data).find({\n            id: position.contract_template_id,\n        });\n    }\n    getInstructors(position) {\n        if (!position.instructor_ids) {\n            return [];\n        }\n        return position.instructor_ids.map((id) =>\n            new Instructor(this.data).find({ id })\n        );\n    }\n    /**\n     * Returns a list of positions that the specified `instructor` is an instructor for.\n     *\n     * @param {*} instructor\n     * @memberof Position\n     */\n    getForInstructor(instructor) {\n        instructor = new Instructor(this.data).find(instructor);\n        if (!instructor) {\n            throw new Error(`Cannot find a matching instructor`);\n        }\n        const positions = this.findAll();\n        return positions.filter((position) =>\n            (position.instructor_ids || []).includes(instructor.id)\n        );\n    }\n    delete(position) {\n        const matchingPosition = this.rawFind(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Cannot find position matching ${JSON.stringify(position)}`\n            );\n        }\n        super.delete(matchingPosition);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const bySessionsList of Object.values(\n            this.data.positions_by_session\n        )) {\n            if (bySessionsList.includes(matchingPosition.id)) {\n                deleteInArray(matchingPosition.id, bySessionsList);\n            }\n        }\n        return matchingPosition;\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.positions_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        // If this is not an upsert, validate the parameters. Otherwise, don't validate.\n        if (!this.rawFind(obj)) {\n            this.validateNew(obj, matchingSession);\n\n            // if the start/end date is not set,\n            // use the session dates\n            obj.start_date =\n                obj.start_date === undefined\n                    ? matchingSession.start_date\n                    : obj.start_date;\n            obj.end_date =\n                obj.end_date === undefined\n                    ? matchingSession.end_date\n                    : obj.end_date;\n        }\n        const newPosition = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.positions_by_session[matchingSession.id] =\n            this.data.positions_by_session[matchingSession.id] || [];\n        this.data.positions_by_session[matchingSession.id].push(newPosition.id);\n        return newPosition;\n    }\n    findAssociatedSession(position) {\n        const matchingPosition = this.find(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Could not associated session because there is no position matching ${JSON.stringify(\n                    position\n                )}`\n            );\n        }\n        const ret = Object.keys(this.data.positions_by_session).find((x) =>\n            this.data.positions_by_session[x].includes(matchingPosition.id)\n        );\n        // Make sure we recast the id as an int\n        return ret != null ? +ret : ret;\n    }\n}\n\nexport const positionsRoutes = {\n    get: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Position(data).findAllBySession(\n                        params.session_id\n                    );\n                }\n                if (params.role === \"instructor\") {\n                    // Only return the the positions belonging to the current session\n                    // for which the activeUser is an instructor.\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    return new Position(data)\n                        .findAllBySession(params.session_id)\n                        .filter((position) =>\n                            position.instructor_ids.includes(\n                                activeInstructor.id\n                            )\n                        );\n                }\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get positions associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.position),\n        }),\n    },\n    post: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params, body) => {\n                return new Position(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Upsert a position associated with a session. If a new position is created, it will be automatically associated with the given session\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position,\n        }),\n        \"/positions\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                const positions = data.positions;\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingPosition = find(body, positions);\n                if (matchingPosition) {\n                    return Object.assign(matchingPosition, body);\n                }\n                throw new Error(`Cannot find position with id=${body.id}`);\n            },\n            summary: \"Update a position\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position,\n        }),\n        \"/positions/delete\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Position(data).delete(body);\n            },\n            summary: \"Delete a position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.position,\n        }),\n    },\n};\n","import { documentCallback, docApiPropTypes } from \"../defs/doc-generation\";\nimport { find, MockAPIController, findAllById } from \"./utils\";\nimport { Assignment } from \"./assignments\";\nimport { Position } from \"./positions\";\n\nexport class WageChunk extends MockAPIController {\n    constructor(data) {\n        super(data, data.wage_chunks);\n    }\n    validateNew() {\n        // There is nothing to validate for a wage chunk\n    }\n    findAllByAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        // Make sure we apply `this.find` so that the rates are computed.\n        return findAllById(\n            [matchingAssignment.id],\n            this.ownData,\n            \"assignment_id\"\n        ).map((x) => this.find(x));\n    }\n    find(wageChunk) {\n        const rawWageChunk = this.rawFind(wageChunk);\n        const ret = { ...rawWageChunk };\n        if (ret.rate == null) {\n            // If the rate is not set, look it up from the session\n            const session = this.getSession(wageChunk);\n            if (session.rate2 == null) {\n                ret.rate = session.rate1;\n            } else {\n                // Rates switch from session.rate1 to session.rate2 on January 1 of\n                // the year following the session start date.\n                const start_date = new Date(wageChunk.start_date);\n                const end_date = new Date(wageChunk.end_date);\n                const session_start_date = new Date(session.start_date);\n                // For `Date`, 11 is december\n                const december = new Date(\n                    session_start_date.getFullYear(),\n                    11,\n                    31\n                );\n                if (start_date <= december && end_date <= december) {\n                    ret.rate = session.rate1;\n                } else {\n                    ret.rate = session.rate2;\n                }\n            }\n        }\n        return ret;\n    }\n    getSession(wageChunk) {\n        const rawWageChunk = this.rawFind(wageChunk);\n        const assignment = new Assignment(this.data).rawFind({\n            id: rawWageChunk.assignment_id,\n        });\n        const position = new Assignment(this.data).getPosition(assignment);\n        return new Position(this.data).getSession(position);\n    }\n    upsertByAssignment(wageChunk, assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return this.upsert({\n            ...wageChunk,\n            assignment_id: matchingAssignment.id,\n        });\n    }\n    /**\n     * Sets the list of wage chunks associated with a given assignment to `wageChunks`.\n     * Any wage chunks omitted from the list are deleted.\n     *\n     * @param {*} wageChunks\n     * @param {*} assignment\n     * @returns\n     * @memberof WageChunk\n     */\n    setAllByAssignment(wageChunks, assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        const existingWageChunks = this.findAllByAssignment(assignment);\n        // Now we can upsert all the wageChunks\n        wageChunks.forEach((chunk) =>\n            this.upsertByAssignment(chunk, matchingAssignment)\n        );\n        // every wage chunk that is not in the `wageChunks` list gets deleted\n        for (const wageChunk of existingWageChunks) {\n            if (!find(wageChunk, wageChunks)) {\n                this.delete(wageChunk);\n            }\n        }\n        // Recompute the wage chunks list. This is \"needless\"\n        // logically, but it might catch some bugs at some point.\n        return this.findAllByAssignment(matchingAssignment);\n    }\n}\n\nexport const wageChunkRoutes = {\n    get: {},\n    post: {\n        \"/wage_chunks\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).upsert(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Upsert a wage_chunk\",\n            returns: docApiPropTypes.wageChunk,\n        }),\n        \"/wage_chunks/delete\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).delete(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Delete a wage_chunk. Must have a valid id specified.\",\n            returns: docApiPropTypes.wageChunk,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    MockAPIController,\n    findAllById,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class Application extends MockAPIController {\n    constructor(data) {\n        super(data, data.applications);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            session_id: { required: true },\n            applicant_id: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an application for this session\n        return findAllById([matchingSession.id], this.ownData, \"session_id\");\n    }\n}\n\nexport const applicationsRoutes = {\n    get: {\n        \"/sessions/:session_id/applications\": documentCallback({\n            func: (data, params) =>\n                new Application(data).findAllBySession(params.session_id),\n            summary: \"Get all applications associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.application),\n        }),\n    },\n    post: {\n        \"/applications\": documentCallback({\n            func: (data, params, body) => new Application(data).upsert(body),\n            summary: \"Upsert an application\",\n            posts: docApiPropTypes.application,\n            returns: docApiPropTypes.application,\n        }),\n        \"/sessions/:session_id/applications\": documentCallback({\n            func: (data, params, body) => new Application(data).upsert(body),\n            summary: \"Upsert an application\",\n            posts: docApiPropTypes.application,\n            returns: docApiPropTypes.application,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController,\n    filterNullProps,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\nimport { Application } from \"./applications\";\nimport { Assignment } from \"./assignments\";\nimport { stringToNativeType } from \"../../libs/urls\";\nimport { Instructor } from \"./instructors\";\n\nexport class Applicant extends MockAPIController {\n    constructor(data) {\n        super(data, data.applicants);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an\n        // application for this session or those who have an assignment in this\n        // session.\n        const applications = new Application(this.data).findAllBySession(\n            matchingSession\n        );\n        const assignments = new Assignment(this.data).findAllBySession(\n            matchingSession\n        );\n        // Get a unique list of applicant ids\n        const applicantIds = Array.from(\n            new Set(\n                applications\n                    .map((x) => x.applicant_id)\n                    .concat(assignments.map((x) => x.applicant_id))\n            )\n        );\n        return findAllById(applicantIds, this.ownData);\n    }\n}\n\nexport const applicantsRoutes = {\n    get: {\n        \"/sessions/:session_id/applicants\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Applicant(data).findAllBySession(\n                        params.session_id\n                    );\n                }\n                if (params.role === \"instructor\") {\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    const applicantIds = new Assignment(data)\n                        .findAllBySessionAndInstructor(\n                            params.session_id,\n                            activeInstructor\n                        )\n                        .map((assignment) => assignment.applicant_id);\n                    // Only return applicants for positions that the instructor is instructing\n                    return new Applicant(data)\n                        .findAll()\n                        .filter((applicant) =>\n                            applicantIds.includes(applicant.id)\n                        );\n                }\n\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get all applicants associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n        \"/applicants\": documentCallback({\n            func: (data) => new Applicant(data).findAll(),\n            summary: \"Get all applicants\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n        \"/applicants/:applicant_id\": documentCallback({\n            func: (data, params) =>\n                new Applicant(data).find(params.applicant_id),\n            summary: \"Get an applicant\",\n            returns: docApiPropTypes.applicant,\n        }),\n    },\n    post: {\n        \"/applicants\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Applicant(data).upsert(body);\n            },\n            summary: \"Upsert an applicant\",\n            posts: docApiPropTypes.applicant,\n            returns: docApiPropTypes.applicant,\n        }),\n        \"/sessions/:session_id/applicants\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                const applicants = new Applicant(data).findAll();\n                // If we didn't specify an `id` but we did specify a `utorid`,\n                // try to look up the applicant by `utorid`\n                const existingApplicant =\n                    applicants.find(\n                        (x) => x.id === body.id || x.utorid === body.utorid\n                    ) || {};\n                const applicant = new Applicant(data).upsert({\n                    ...existingApplicant,\n                    ...filterNullProps(body),\n                });\n                const applications = new Application(data).findAllBySession(\n                    params.session_id\n                );\n                // First search for an applicant with a matching `id`\n                let match = applications.find(\n                    (application) => application.applicant_id === applicant.id\n                );\n                if (!match) {\n                    // We need to create an application for this applicant\n                    new Application(data).upsert({\n                        session_id: stringToNativeType(params.session_id),\n                        applicant_id: applicant.id,\n                        comment: \"<Autogenerated>\",\n                    });\n                }\n\n                return applicant;\n            },\n            summary:\n                \"Upsert an applicant. If they have no application associated with the current session, an application is created.\",\n            posts: docApiPropTypes.applicant,\n            returns: docApiPropTypes.applicant,\n        }),\n        \"/applicants/delete\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new Applicant(data).delete(body);\n            },\n            summary: \"Delete an applicant\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.applicant,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport {\n    getAttributesCheckMessage,\n    findAllById,\n    sum,\n    splitDateRangeAtNewYear,\n    MockAPIController,\n    wageChunkArrayToStartAndEndDates,\n    formatInstructorsContact,\n    wageChunkArrayToPayPeriodDescription,\n    errorUnlessRole,\n} from \"./utils\";\nimport { Session } from \"./sessions\";\nimport { Position } from \"./positions\";\nimport { WageChunk } from \"./wage_chunks\";\nimport { Applicant } from \"./applicants\";\nimport { Instructor } from \"./instructors\";\n\nexport class Assignment extends MockAPIController {\n    constructor(data) {\n        super(data, data.assignments);\n    }\n    validateNew(assignment) {\n        // No uniqueness required, so pass in an empty array ([]) to the verifier\n        const message = getAttributesCheckMessage(assignment, [], {\n            position_id: { required: true },\n            applicant_id: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        return findAllById(\n            this.data.assignments_by_session[matchingSession.id] || [],\n            this.ownData\n            // Call \"find\" again to make sure every item gets packaged appropriately\n        ).map((x) => new Assignment(this.data).find(x));\n    }\n    getPosition(assignment) {\n        return new Position(this.data).find({\n            id: assignment.position_id,\n        });\n    }\n    getApplicant(assignment) {\n        return new Applicant(this.data).find({\n            id: assignment.applicant_id,\n        });\n    }\n    /**\n     * Grabs a bunch of data from the wage chunks related to an assignment\n     *\n     * @param {string} assignment\n     * @returnType {{hours: number, wage_chunks: object[]}}\n     */\n    getWageChunkInfo(assignment) {\n        const wageChunks = new WageChunk(this.data).findAllByAssignment(\n            assignment\n        );\n        const hours = sum(...wageChunks.map((x) => x.hours));\n        return { hours, wageChunks };\n    }\n    /**\n     * Grab the active offer for an assignment\n     *\n     * @param {number} matchingAssignment.id\n     * @param {object} this.data\n     * @returns {({}|null)} - an offer object or `undefined`\n     */\n    getActiveOffer(assignment) {\n        return new ActiveOffer(this.data).findByAssignment(assignment);\n    }\n    /**\n     * Pieces together all the details of an assignment from the mockAPI data\n     *\n     * @param {object} matchingAssignment - an assignment\n     * @returns\n     */\n    find(assignment) {\n        const matchingAssignment = this.rawFind(assignment);\n        if (!matchingAssignment) {\n            return matchingAssignment;\n        }\n        const ret = { ...matchingAssignment };\n        // compute the hours from wage chunks\n        const { hours } = this.getWageChunkInfo(matchingAssignment);\n        ret.hours = hours;\n        // compute offer_status\n        const activeOffer = this.getActiveOffer(matchingAssignment);\n        if (activeOffer) {\n            ret.active_offer_status = activeOffer.status;\n            ret.active_offer_url_token = activeOffer.url_token;\n        }\n        // Add position start and end dates if they are not defined\n        const position = this.getPosition(matchingAssignment);\n        if (!matchingAssignment.start_date) {\n            ret.start_date = position.start_date;\n        }\n        if (!matchingAssignment.end_date) {\n            ret.end_date = position.end_date;\n        }\n\n        return ret;\n    }\n    upsert(assignment) {\n        // Call `find` to make sure the `hours` field is computed\n        const upsertedAssignment = this.find(super.upsert(assignment));\n\n        // Make sure the assignment is in the assignments_by_session list\n        const session_id = new Position(this.data).findAssociatedSession(\n            upsertedAssignment.position_id\n        );\n        if (session_id) {\n            this.data.assignments_by_session[session_id].push(\n                upsertedAssignment.id\n            );\n        }\n\n        // If `hours` is passed into the assignment, we need to modify the wage chunks\n        // associated with the assignment (but only if the hours differ).\n        if (\n            assignment.hours == null ||\n            +upsertedAssignment.hours === +assignment.hours\n        ) {\n            return upsertedAssignment;\n        }\n\n        let wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        // If there are no wage chunks, we need to create some\n        if (wageChunks.length === 0) {\n            const dateRanges = splitDateRangeAtNewYear(\n                upsertedAssignment.start_date,\n                upsertedAssignment.end_date\n            );\n            // create the wage chunks with zero hours, because it will be updated soon\n            for (const range of dateRanges) {\n                new WageChunk(this.data).upsertByAssignment(\n                    {\n                        hours: 0,\n                        start_date: range.start_date,\n                        end_date: range.end_date,\n                    },\n                    upsertedAssignment\n                );\n            }\n        }\n\n        // Now we are guaranteed to have wage chunks, so set them to the correct number\n        // of hours\n        wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        const delta =\n            +assignment.hours - +(this.find(upsertedAssignment).hours || 0);\n        const perChunkDelta = delta / wageChunks.length;\n        for (const chunk of wageChunks) {\n            new WageChunk(this.data).upsert({\n                ...chunk,\n                hours: (chunk.hours || 0) + perChunkDelta,\n            });\n        }\n\n        // Find the assignment again, to make sure all computed fields are properly computed\n        return this.find(upsertedAssignment);\n    }\n    /**\n     * Returns the list of all assignments for positions that are (a) for the\n     * specified session, and (b) taught by the specified instructor.\n     *\n     * @param {*} session\n     * @param {*} instructor\n     * @returns\n     * @memberof Assignment\n     */\n    findAllBySessionAndInstructor(session, instructor) {\n        session = new Session(this.data).find(session);\n        instructor = new Instructor(this.data).find(instructor);\n        const instructorPositions = new Position(this.data).getForInstructor(\n            instructor\n        );\n        const assignments = this.findAllBySession(session);\n        const positionIds = instructorPositions.map((position) => position.id);\n\n        // Only return assignments for positions that the instructor is instructing\n        return assignments.filter((assignment) =>\n            positionIds.includes(assignment.position_id)\n        );\n    }\n}\n\nclass ActiveOffer extends MockAPIController {\n    constructor(data) {\n        super(data, data.offers);\n    }\n    findByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n\n        // As a hack, a `_noActiveOffer` flag is added to an assignment\n        // if the active offer should be ignore.\n        if (matchingAssignment && matchingAssignment._noActiveOffer) {\n            return null;\n        }\n\n        // offers are never deleted, only added to the table, so\n        // picking the last one is the same as picking the \"newest\"\n        const offers = findAllById(\n            [matchingAssignment.id],\n            this.data.offers,\n            \"assignment_id\"\n        );\n        const activeOffer = offers[offers.length - 1];\n        return activeOffer || null;\n    }\n    findAllByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n\n        // As a hack, a `_noActiveOffer` flag is added to an assignment\n        // if the active offer should be ignore.\n        if (matchingAssignment && matchingAssignment._noActiveOffer) {\n            return null;\n        }\n\n        // offers are never deleted, only added to the table, so\n        // picking the last one is the same as picking the \"newest\"\n        const offers = findAllById(\n            [matchingAssignment.id],\n            this.data.offers,\n            \"assignment_id\"\n        );\n        return offers;\n    }\n    _ensureAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return matchingAssignment;\n    }\n    getAssignment(offer) {\n        return new Assignment(this.data).find({\n            id: offer.assignment_id,\n        });\n    }\n    find(query) {\n        // This is where the magic happens. We create all the data needed for the offer here.\n        const baseOffer = this.rawFind(query);\n        const assignment = this.getAssignment(baseOffer);\n        const { hours, wageChunks } = new Assignment(\n            this.data\n        ).getWageChunkInfo(assignment);\n        const position = new Assignment(this.data).getPosition(assignment);\n        const applicant = new Assignment(this.data).getApplicant(assignment);\n        const instructors = new Position(this.data).getInstructors(position);\n        const contractTemplate = new Position(this.data).getContractTemplate(\n            position\n        );\n\n        const { start_date, end_date } = wageChunkArrayToStartAndEndDates(\n            wageChunks\n        );\n\n        const offer = {\n            accepted_date: null,\n            rejected_date: null,\n            withdrawn_date: null,\n            signature: \"\",\n            nag_count: 0,\n            // All mutable fields should come before `baseOffer` is destructured.\n            // Fields that come after are computed and cannot be directly set.\n            ...baseOffer,\n            contract_template: contractTemplate.template_file,\n            contract_override_pdf: assignment.contract_override_pdf,\n            first_name: applicant.first_name,\n            last_name: applicant.last_name,\n            email: applicant.email,\n            position_code: position.position_code,\n            position_title: position.position_title,\n            position_start_date: start_date,\n            position_end_date: end_date,\n            first_time_ta: null,\n            instructor_contact_desc: formatInstructorsContact(instructors),\n            pay_period_desc: wageChunkArrayToPayPeriodDescription(wageChunks),\n            hours,\n            ta_coordinator_name: \"Dr. Coordinator\",\n            ta_coordinator_email: \"coordinator@utoronto.ca\",\n            url_token: \"mock_api_offer_url_token\",\n        };\n\n        return offer;\n    }\n    withdrawByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"withdrawn\",\n                withdrawn_date: new Date().toISOString(),\n            })\n        );\n    }\n    rejectByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"rejected\",\n                rejected_date: new Date().toISOString(),\n            })\n        );\n    }\n    acceptByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"accepted\",\n                accepted_date: new Date().toISOString(),\n            })\n        );\n    }\n    emailByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"pending\",\n                emailed_date: new Date().toISOString(),\n            })\n        );\n    }\n    nagByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        if (!offer.emailed_date) {\n            throw new Error(\n                `The active offer for assignment with id=${assignment.id} has not been emailed yet, so a nag email cannot be sent`\n            );\n        }\n        return this.find(\n            this.upsert({\n                ...offer,\n                nag_count: (offer.nag_count || 0) + 1,\n            })\n        );\n    }\n    getHistoryByAssignment(assignment) {\n        const offers = this.findAllByAssignment(\n            this._ensureAssignment(assignment)\n        );\n        if (offers.length === 0) {\n            throw new Error(\n                `There is no offer history for assignment with id=${assignment.id}.`\n            );\n        }\n        // Note: allocating memory inside of the sort callback is frowned upon, but this is just a mock API\n        offers.sort(function (a, b) {\n            return new Date(b.emailed_date) - new Date(a.emailed_date);\n        });\n        return offers;\n    }\n    createByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n        const offer = this.findByAssignment(matchingAssignment);\n        if (\n            offer &&\n            [\"pending\", \"accepted\", \"rejected\", \"provisional\"].includes(\n                offer.status\n            )\n        ) {\n            throw new Error(\n                `An offer already exists for assignment=${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n\n        // As a hack, sometimes a `_noActiveOffer` flag is set. Make sure to unset this flag\n        // before creating an offer.\n        new Assignment(this.data).upsert({\n            ...matchingAssignment,\n            _noActiveOffer: false,\n        });\n        return this.upsert(\n            this.find(\n                this.create({\n                    assignment_id: matchingAssignment.id,\n                    status: \"provisional\",\n                })\n            )\n        );\n    }\n}\n\nexport const assignmentsRoutes = {\n    get: {\n        \"/sessions/:session_id/assignments\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Assignment(data).findAllBySession(\n                        params.session_id\n                    );\n                }\n                if (params.role === \"instructor\") {\n                    const activeInstructor = new Instructor(\n                        data\n                    ).getFromActiveUser();\n                    if (!activeInstructor) {\n                        return [];\n                    }\n                    return new Assignment(data).findAllBySessionAndInstructor(\n                        params.session_id,\n                        activeInstructor\n                    );\n                }\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Get assignments associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.assignment),\n        }),\n        \"/assignments/:assignment_id\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).find(params.assignment_id),\n            summary: \"Get an assignment\",\n            returns: docApiPropTypes.assignment,\n        }),\n        \"/assignments/:assignment_id/active_offer\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getActiveOffer(params.assignment_id),\n            summary: \"Get the active offer associated with an assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getWageChunkInfo(params.assignment_id)\n                    .wageChunks,\n            summary: \"Get the wage_chunks associated with an assignment\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n        }),\n        \"/assignments/:assignment_id/active_offer/history\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).getHistoryByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Fetches all offers that have previously been emailed.\",\n            returns: docApiPropTypes.offer,\n        }),\n    },\n    post: {\n        \"/assignments\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                const existingAssignment = new Assignment(data).find(body);\n                if (existingAssignment) {\n                    const activeOffer = new Assignment(data).getActiveOffer(\n                        existingAssignment\n                    );\n                    if (!activeOffer) {\n                        return new Assignment(data).upsert(body);\n                    }\n                    if (\n                        [\"withdrawn\", \"provisional\"].includes(\n                            activeOffer.status\n                        )\n                    ) {\n                        // In this case, we can upsert the assignment, but we remove any active offer\n                        // in the process\n                        return new Assignment(data).upsert({\n                            ...body,\n                            _noActiveOffer: true,\n                        });\n                    }\n                    throw new Error(\n                        `Cannot update an assignment that has an active offer with status '${activeOffer.status}'`\n                    );\n                }\n                return new Assignment(data).upsert(body);\n            },\n            posts: docApiPropTypes.assignment,\n            summary: \"Upsert an assignment\",\n            returns: docApiPropTypes.assignment,\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                return new WageChunk(data).setAllByAssignment(\n                    body,\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Sets the wage chunks of an assignment to the specified list. The contents of the list are upserted. Omitted wage chunks are deleted.\",\n            posts: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n        }),\n        \"/assignments/:assignment_id/active_offer/withdraw\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).withdrawByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Withdraws the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/reject\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).rejectByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Rejects the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/accept\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).acceptByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Accepts the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/create\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).createByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Creates an offer for the specified assignment, provided there are no active offers for this assignment.\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/email\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).emailByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary: \"Emails the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/nag\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                return new ActiveOffer(data).nagByAssignment(\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Sends a nag email for the active offer for the specified assignment which has already been emailed once\",\n            returns: docApiPropTypes.offer,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { User } from \"./active_user\";\n\n// persistent storage for the Debug class\nconst storage = {};\n\nexport class Debug {\n    constructor(data) {\n        this.data = data;\n    }\n    getAllData() {\n        return this.data;\n    }\n    makeSnapshot(name = \"snapshot\") {\n        storage[name] = JSON.stringify(this.getAllData());\n        return this.getAllData();\n    }\n    clearData() {\n        this.makeSnapshot(\"beforeclear\");\n        Object.keys(this.data).forEach((key) => {\n            // Contract templates are supposed to be stored on \"disk\"\n            // and so they shouldn't be cleared when we clear the database\n            if (\n                key === \"available_contract_templates\" ||\n                key === \"contract_templates_by_filename\"\n            ) {\n                return;\n            }\n            this.data[key] = createBlankCopy(this.data[key]);\n        });\n        return this.getAllData();\n    }\n    restoreSnapshot(name = \"snapshot\") {\n        const snapshot = JSON.parse(storage[name] || \"{}\");\n        this.clearData();\n        Object.assign(this.data, snapshot);\n        return this.getAllData();\n    }\n}\n\nexport const debugRoutes = {\n    get: {\n        \"/debug/active_user\": documentCallback({\n            func: (data) => new User(data).getActiveUser(),\n            summary:\n                \"Gets the active user; in debug mode this is specified by posting to `active_user`.\",\n            returns: docApiPropTypes.user,\n        }),\n        \"/debug/users\": documentCallback({\n            func: (data) => new User(data).findAll(),\n            summary: \"Get a list of all users\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n        }),\n        \"/debug/routes\": documentCallback({\n            func: () => {},\n            summary: \"Get a all available routes\",\n        }),\n        \"/debug/serializers\": documentCallback({\n            func: () => {},\n            summary:\n                \"Get a all available serializers and their attributes. These will cover the majority of the payloads that the API can return.\",\n        }),\n    },\n    post: {\n        \"/debug/active_user\": documentCallback({\n            func: (data, params, body) => {\n                const user = new User(data);\n                const found_user = user.find(body);\n                if (!found_user) {\n                    throw new Error(\n                        `Could not find user matching ${JSON.stringify(body)}`\n                    );\n                }\n                user.setActiveUser(found_user);\n                return user.getActiveUser();\n            },\n            summary:\n                \"Sets the active user; this will override whatever credentials are passed to the server.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n        \"/debug/users\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary:\n                \"Adds a user; this is done without any permission checks, so it can be used to bootstrap permissions during debug.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n        \"/debug/clear_data\": documentCallback({\n            func: (data) => {\n                return new Debug(data).clearData();\n            },\n            summary: \"Deletes all data in the database\",\n        }),\n        \"/debug/snapshot\": documentCallback({\n            func: (data) => {\n                return new Debug(data).makeSnapshot();\n            },\n            summary: \"Makes a snapshot of the current state of the database\",\n        }),\n        \"/debug/restore_snapshot\": documentCallback({\n            func: (data) => {\n                return new Debug(data).restoreSnapshot();\n            },\n            summary: \"Restores the last snapshot of the database\",\n        }),\n    },\n};\n\n/**\n * Returns the blank value of the same type\n * as the passed-in data\n *\n * @param {*} data\n * @returns\n */\nfunction createBlankCopy(data) {\n    if (typeof data === \"object\") {\n        if (data instanceof Array) {\n            return [];\n        } else {\n            return {};\n        }\n    } else if (typeof data === \"string\") {\n        return \"\";\n    } else {\n        // If `data` is not of type string, array or object\n        // use the constructor, which will return blank value\n        // of that particular type.\n        return data.constructor();\n    }\n}\n","import {\n    getAttributesCheckMessage,\n    MockAPIController,\n    errorUnlessRole,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\nimport { Assignment } from \"./assignments\";\nimport { stringToNativeType } from \"../../libs/urls\";\n\nexport class Ddah extends MockAPIController {\n    constructor(data) {\n        super(data, data.ddahs);\n    }\n    validateNew(ddah) {\n        const message = getAttributesCheckMessage(ddah, this.ownData, {\n            assignment_id: { required: true, unique: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find DDAHs by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        const assignments = new Assignment(this.data).findAllBySession(\n            matchingSession\n        );\n        const assignmentIds = assignments.map((assignment) => assignment.id);\n        return this.ownData.filter((ddah) =>\n            assignmentIds.includes(ddah.assignment_id)\n        );\n    }\n}\n\nexport const ddahsRoutes = {\n    get: {\n        \"/sessions/:session_id/ddahs\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    return new Ddah(data).findAllBySession(params.session_id);\n                }\n                errorUnlessRole(params, \"\");\n            },\n            summary:\n                \"Get all ddah forms associated with assignments for the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.ddah),\n        }),\n        \"/sessions/:session_id/ddahs/accepted_list\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    throw new Error(\"Not implemented in mock API\");\n                }\n                errorUnlessRole(params, \"\");\n            },\n            summary:\n                \"Get a signature list of all TAs who have acknowledged their DDAH form for this session. Returns a base64 encoded html file.\",\n            returns: wrappedPropTypes.shape({\n                file_name: wrappedPropTypes.string,\n                mime_type: wrappedPropTypes.string,\n                content: wrappedPropTypes.string,\n            }),\n        }),\n        \"/sessions/:session_id/ddahs/accepted_list.pdf\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\") {\n                    throw new Error(\"Not implemented in mock API\");\n                }\n                errorUnlessRole(params, \"\");\n            },\n            summary:\n                \"Get a signature list of all TAs who have acknowledged their DDAH form for this session. Returns a base64 encoded html file.\",\n            returns: wrappedPropTypes.shape({\n                file_name: wrappedPropTypes.string,\n                mime_type: wrappedPropTypes.string,\n                content: wrappedPropTypes.string,\n            }),\n        }),\n        \"/ddahs/:ddah_id\": documentCallback({\n            func: (data, params) => new Ddah(data).find(params.ddah_id),\n            summary: \"Get a ddah\",\n            returns: docApiPropTypes.ddah,\n        }),\n        \"/assignments/:assignment_id/ddah\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\" || params.role === \"instructor\") {\n                    const assignment = new Assignment(data).find(\n                        params.assignment_id\n                    );\n                    if (!assignment) {\n                        throw new Error(\n                            `Cannot create a DDAH because an assignment with id '${params.assignment_id}' cannot be found.`\n                        );\n                    }\n                    return new Ddah(data)\n                        .findAll()\n                        .find((ddah) => ddah.assignment_id === assignment.id);\n                }\n                // If we make it here, we should error because of invalid permissions\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Find a DDAH associated with a specific assignment.\",\n            returns: docApiPropTypes.ddah,\n        }),\n    },\n    post: {\n        \"/ddahs\": documentCallback({\n            func: (data, params, body) => {\n                errorUnlessRole(params, \"admin\");\n                const existingDdah = new Ddah(data).find({ id: body.id });\n                if (!existingDdah || !body.duties) {\n                    // Create a new DDAH if there isn't one already\n                    return new Ddah(data).upsert(body);\n                }\n                // If there is a DDAH already and we change the duties at all, we must\n                // remove the accepted date, the signature, and the approved date.\n                const overwriteFields = {\n                    accepted_date: null,\n                    approved_date: null,\n                    signature: null,\n                };\n                // Since we only care about a change to the duties, a quick-and-dirty way is to\n                // compare the JSONified duties\n                function sortByOrder(a, b) {\n                    return a.order - b.order;\n                }\n                if (\n                    JSON.stringify([...body.duties].sort(sortByOrder)) !==\n                    JSON.stringify([...existingDdah.duties].sort(sortByOrder))\n                ) {\n                    // If the DDAH has been accepted, its new (signatureless)\n                    // state will be \"revised\"\n                    if (\n                        existingDdah.accepted_date ||\n                        existingDdah.emailed_date\n                    ) {\n                        overwriteFields.revised_date = new Date();\n                    }\n                    return new Ddah(data).upsert({\n                        ...body,\n                        ...overwriteFields,\n                    });\n                }\n                return new Ddah(data).upsert(body);\n            },\n            summary: \"Upsert a ddah\",\n            posts: docApiPropTypes.ddah,\n            returns: docApiPropTypes.ddah,\n        }),\n        \"/ddahs/:ddah_id/approve\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                const ddah = new Ddah(data).find({ id: params.ddah_id });\n                if (!ddah) {\n                    throw new Error(\n                        `Could not find DDAH with id '${params.ddah_id}'`\n                    );\n                }\n                return new Ddah(data).upsert({\n                    ...ddah,\n                    approved_date: new Date().toISOString(),\n                });\n            },\n            summary: \"Approve a DDAH\",\n            returns: docApiPropTypes.ddah,\n        }),\n        \"/ddahs/:ddah_id/delete\": documentCallback({\n            func: (data, params) => {\n                errorUnlessRole(params, \"admin\");\n                const ddah = new Ddah(data).find({ id: params.ddah_id });\n                if (!ddah) {\n                    throw new Error(\n                        `Could not find DDAH with id '${params.ddah_id}'`\n                    );\n                }\n                return new Ddah(data).delete({ id: params.ddah_id });\n            },\n            summary: \"Delete a DDAH\",\n            returns: docApiPropTypes.ddah,\n        }),\n        \"/ddahs/:ddah_id/email\": documentCallback({\n            func: (data, params) => {\n                if (params.role === \"admin\" || params.role === \"instructor\") {\n                    const ddah = new Ddah(data).find({ id: params.ddah_id });\n                    if (!ddah) {\n                        throw new Error(\n                            `Could not find DDAH with id '${params.ddah_id}'`\n                        );\n                    }\n                    return new Ddah(data).upsert({\n                        ...ddah,\n                        emailed_date: new Date().toISOString(),\n                    });\n                }\n                // If we make it here, we should error because of invalid permissions\n                errorUnlessRole(params, \"\");\n            },\n            summary: \"Email a DDAH\",\n            returns: docApiPropTypes.ddah,\n        }),\n        \"/assignments/:assignment_id/ddah\": documentCallback({\n            func: (data, params, body) => {\n                if (params.role === \"admin\" || params.role === \"instructor\") {\n                    const assignment = new Assignment(data).find(\n                        params.assignment_id\n                    );\n                    if (!assignment) {\n                        throw new Error(\n                            `Cannot create a DDAH because an assignment with id '${params.assignment_id}' cannot be found.`\n                        );\n                    }\n                    return new Ddah(data).upsert({\n                        ...body,\n                        assignment_id: stringToNativeType(params.assignment_id),\n                    });\n                }\n                // If we make it here, we should error because of invalid permissions\n                errorUnlessRole(params, \"\");\n            },\n            summary:\n                \"Create a DDAH associated with a specific assignment. You may specify the details of the DDAH in th body of this request.\",\n            posts: docApiPropTypes.ddah,\n            returns: docApiPropTypes.ddah,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\n\nexport const reportingTagRoutes = {\n    get: {\n        \"/sessions/:session_id/positions/reporting_tags\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary: \"Get all reporting tags associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.reportingTag),\n        }),\n        \"/sessions/:session_id/wage_chunks/reporting_tags\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary: \"Get all reporting tags associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.reportingTag),\n        }),\n        \"/wage_chunks/:wage_chunk_id/reporting_tags\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary: \"Get all reporting tags associated with a wage chunk\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.reportingTag),\n        }),\n        \"/positions/:position_id/reporting_tags\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary: \"Get all reporting tags associated with a position\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.reportingTag),\n        }),\n    },\n    post: {\n        \"/wage_chunks/:wage_chunk_id/reporting_tags\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary: \"Add a reporting tag associated with a wage chunk\",\n            returns: docApiPropTypes.reportingTag,\n            posts: docApiPropTypes.reportingTag,\n        }),\n        \"/wage_chunks/:wage_chunk_id/reporting_tags/delete\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary:\n                \"Remove an association between a reporting tag and a wage chunk\",\n            returns: docApiPropTypes.reportingTag,\n            posts: docApiPropTypes.reportingTag,\n        }),\n        \"/positions/:position_id/reporting_tags\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary: \"Add a reporting tag associated with a position\",\n            returns: docApiPropTypes.reportingTag,\n            posts: docApiPropTypes.reportingTag,\n        }),\n        \"/positions/:position_id/reporting_tags/delete\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in mock API\");\n            },\n            summary:\n                \"Remove an association between a reporting tag and a position\",\n            returns: docApiPropTypes.reportingTag,\n            posts: docApiPropTypes.reportingTag,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\n\nexport const postingRoutes = {\n    get: {\n        \"/sessions/:session_id/postings\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Get all postings associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.posting),\n        }),\n        \"/sessions/:session_id/posting_positions\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Get all posting_positions associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.posting_position),\n        }),\n        \"/postings/:posting_id/posting_positions\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Get all posting_positions associated with a posting\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.posting_position),\n        }),\n        \"/postings/:posting_id\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Get a single posting\",\n            returns: docApiPropTypes.posting,\n        }),\n        \"/postings/:posting_id/survey\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Get the survey associated with a posting\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/posting_positions/:posting_position_id\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Get a single posting_position\",\n            returns: docApiPropTypes.posting_position,\n        }),\n    },\n    post: {\n        \"/sessions/:session_id/postings\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Upsert a posting\",\n            returns: docApiPropTypes.posting,\n            posts: docApiPropTypes.posting,\n        }),\n        \"/postings\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Upsert a posting\",\n            returns: docApiPropTypes.posting,\n            posts: docApiPropTypes.posting,\n        }),\n        \"/postings/delete\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Delete a posting\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.posting,\n        }),\n        \"/postings/:posting_id/posting_positions\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Upsert a posting_position\",\n            returns: docApiPropTypes.posting_position,\n            posts: docApiPropTypes.posting_position,\n        }),\n        \"/posting_positions\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Upsert a posting_position\",\n            returns: docApiPropTypes.posting_position,\n            posts: docApiPropTypes.posting_position,\n        }),\n        \"/posting_positions/delete\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented\");\n            },\n            summary: \"Delete a posting_position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.posting_position,\n        }),\n    },\n};\n","import { documentCallback, wrappedPropTypes } from \"../defs/doc-generation\";\n\nexport const publicRoutes = {\n    get: {\n        \"/public/ddahs/:token\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Get the contents of ddah as `html` or `pdf`\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/ddahs/:token/view\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"View a ddah with an accept dialog\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/ddahs/:token/details\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Get JSON information about a DDAH\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/contracts/:token\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Get an offer as `html` or `pdf`\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/contracts/:token/view\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"View an offer with an accept dialog\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/contracts/:token/details\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Get a JSON object with all the details about the offer\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/postings/:token\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary:\n                \"Get a JSON object with the survey_js data for the posting\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/files/:token\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Return the file corresponding to the specified token\",\n            returns: wrappedPropTypes.any,\n        }),\n    },\n    post: {\n        \"/public/ddahs/:token/accept\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Set a ddah as accepted\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/contracts/:token/accept\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Accept an offer\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/contracts/:token/reject\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Reject an offer\",\n            returns: wrappedPropTypes.any,\n        }),\n        \"/public/postings/:token/submit\": documentCallback({\n            func: () => {\n                throw new Error(\"Not implemented in Mock API\");\n            },\n            summary: \"Submit survey_js data after filling out a posting\",\n            posts: wrappedPropTypes.any,\n            returns: wrappedPropTypes.any,\n        }),\n    },\n};\n","import Route from \"route-parser\";\nimport { mockData } from \"./data\";\nimport { sessionsRoutes } from \"./sessions\";\nimport { templatesRoutes } from \"./contract_templates\";\nimport { positionsRoutes } from \"./positions\";\nimport { instructorsRoutes } from \"./instructors\";\nimport { documentCallback } from \"../defs/doc-generation\";\nimport { assignmentsRoutes } from \"./assignments\";\nimport { applicantsRoutes } from \"./applicants\";\nimport { applicationsRoutes } from \"./applications\";\nimport { wageChunkRoutes } from \"./wage_chunks\";\nimport { debugRoutes } from \"./debug\";\nimport { activeUserRoutes, User } from \"./active_user\";\nimport { ddahsRoutes } from \"./ddahs\";\nimport { reportingTagRoutes } from \"./reportingTags\";\nimport { postingRoutes } from \"./postings\";\nimport { publicRoutes } from \"./public-routes\";\n\n/**\n * Mock API server that runs locally; useful for demo purposes.\n *\n * @module\n */\n\nexport class MockAPI {\n    routePrefix = \"/api/v1\";\n    // a list of selectors for each route\n    getRoutes = Object.assign(\n        {},\n        sessionsRoutes.get,\n        templatesRoutes.get,\n        positionsRoutes.get,\n        instructorsRoutes.get,\n        assignmentsRoutes.get,\n        applicantsRoutes.get,\n        applicationsRoutes.get,\n        wageChunkRoutes.get,\n        ddahsRoutes.get,\n        reportingTagRoutes.get,\n        debugRoutes.get,\n        activeUserRoutes.get,\n        postingRoutes.get,\n        publicRoutes.get,\n        {\n            \"/all_data\": documentCallback({\n                func: (data) => data,\n                exclude: true,\n            }),\n        }\n    );\n    postRoutes = Object.assign(\n        {},\n        sessionsRoutes.post,\n        templatesRoutes.post,\n        positionsRoutes.post,\n        instructorsRoutes.post,\n        assignmentsRoutes.post,\n        applicantsRoutes.post,\n        applicationsRoutes.post,\n        wageChunkRoutes.post,\n        ddahsRoutes.post,\n        reportingTagRoutes.post,\n        debugRoutes.post,\n        activeUserRoutes.post,\n        postingRoutes.post,\n        publicRoutes.post\n    );\n\n    constructor(seedData) {\n        this.active = false;\n        this.data = seedData;\n        this._getRoutesParsers = Object.keys(this.getRoutes).map((routeStr) => {\n            // We want to peel of the role from the start of the route, but we don't want\n            // to consider it part of the route for documentation purposes. Since `routeStr`\n            // is used to find the callback of the route, we hack `Route` so that `spec`\n            // is the same as `routeStr`.\n            const r = new Route(\"(/:role)\" + routeStr);\n            r.spec = routeStr;\n            return r;\n        });\n        this._postRoutesParsers = Object.keys(this.postRoutes).map(\n            (routeStr) => {\n                // We want to peel of the role from the start of the route, but we don't want\n                // to consider it part of the route for documentation purposes. Since `routeStr`\n                // is used to find the callback of the route, we hack `Route` so that `spec`\n                // is the same as `routeStr`.\n                const r = new Route(\"(/:role)\" + routeStr);\n                r.spec = routeStr;\n                return r;\n            }\n        );\n    }\n\n    /**\n     * Make a mock `apiGET` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     */\n    apiGET = (url) => {\n        for (const route of this._getRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    this.authenticateActiveUserBasedOnRole(match.role);\n                    const payload = this.getRoutes[route.spec](\n                        this.data,\n                        match\n                    );\n\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload,\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`,\n        };\n    };\n\n    /**\n     * Make a mock `apiPOST` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     * @param {object} body The body of a post request. This should be an object, *not* a JSON string.\n     */\n    apiPOST = (url, body) => {\n        for (const route of this._postRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    this.authenticateActiveUserBasedOnRole(match.role);\n                    const payload = this.postRoutes[route.spec](\n                        this.data,\n                        match,\n                        body\n                    );\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload,\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`,\n        };\n    };\n\n    /**\n     * Authenticates the `active_user` as having the role `role`.\n     * If the user is not authenticated, an error is thrown.\n     *\n     * @param {string} role\n     * @returns\n     * @memberof MockAPI\n     */\n    authenticateActiveUserBasedOnRole(role) {\n        if (role == null) {\n            return;\n        }\n        const active_user = new User(this.data).getActiveUser();\n        if (active_user == null) {\n            return;\n        }\n        if (!active_user.roles.includes(role)) {\n            throw new Error(\n                `Not authenticated for accessing routes with prefix /${role}`\n            );\n        }\n    }\n\n    /**\n     * Replaces the global `window.fetch` object with calls to `apiGET` and\n     * `apiPOST`. This means that true network requests will no longer\n     * work.\n     *\n     * @param {number} [delay=1000]\n     * @memberof MockAPI\n     */\n    replaceGlobalFetch(delay = 1000) {\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this._origFetch = fetch;\n        window.fetch = async (url, init = {}) => {\n            // Parse the URL first. We only want the pathname\n            const parsedURL = new URL(url, \"http://dummy.com\");\n            url = parsedURL.pathname;\n            // Make sure the url doesn't start with \"/api/v1\"\n            url = url.startsWith(this.routePrefix)\n                ? url.replace(this.routePrefix, \"\")\n                : url;\n            let mockResponse;\n            if (init.method === \"GET\") {\n                mockResponse = this.apiGET(url);\n            } else {\n                let body = init.body;\n                if (typeof body === \"string\") {\n                    body = JSON.parse(body);\n                }\n                mockResponse = this.apiPOST(url, body);\n            }\n            // eslint-disable-next-line\n            console.log(\n                `MockAPI ${init.method} Request.`,\n                url,\n                init,\n                \"Responding with\",\n                mockResponse\n            );\n            // Create a `Response` object to return so that we fully imitate\n            // the `fetch` api.\n            const responseObj = new Response(\n                new Blob([JSON.stringify(mockResponse)], {\n                    type: \"application/json\",\n                }),\n                { status: 200, statusText: \"OK\" }\n            );\n            return new Promise((resolve) => {\n                window.setTimeout(() => resolve(responseObj), delay);\n            });\n        };\n    }\n\n    /**\n     * Restore the global `window.fetch` to what the browser provides.\n     * If `window.fetch` has not been overridden, this function does nothing.\n     *\n     * @memberof MockAPI\n     */\n    restoreGlobalFetch() {\n        this.active = false;\n        window.fetch = this._origFetch || fetch;\n    }\n}\n\nconst mockAPI = new MockAPI(mockData);\nexport { mockAPI, mockData };\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { setGlobals, globalsSelector } from \"../../api/actions\";\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nlet ToggleMockApi = function ToggleMockApi(props) {\n    const { globals, setMockAPIState } = props;\n    const active = globals.mockAPI;\n\n    return (\n        <span\n            title={\n                \"The Mock API simulates the TAPP API but uses browser-based storage. This allows you to test TAPP functionality without a working server.\"\n            }\n        >\n            Mock API{\" \"}\n            <ButtonGroup>\n                <Button\n                    variant={active ? \"primary\" : \"secondary\"}\n                    onClick={() => setMockAPIState(true)}\n                >\n                    On\n                </Button>\n                <Button\n                    variant={active ? \"secondary\" : \"primary\"}\n                    onClick={() => setMockAPIState(false)}\n                >\n                    Off\n                </Button>\n            </ButtonGroup>\n        </span>\n    );\n};\n\nToggleMockApi = connect((state) => ({ globals: globalsSelector(state) }), {\n    setGlobals,\n})(ToggleMockApi);\n\nexport { ToggleMockApi };\n","import React from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\n\nconst ident = () => {};\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nfunction ActiveUserButton({\n    users = [],\n    activeUser = {},\n    setActiveUser = ident,\n    fetchUsers = ident,\n}) {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n\n    React.useEffect(() => {\n        // Whenever the dropdown is open, fetch a list of all available users.\n        // This would normally not be a good idea, but since this button is only\n        // used in debug mode, it's okay.\n        if (dropdownVisible) {\n            fetchUsers();\n        }\n    }, [dropdownVisible, fetchUsers]);\n\n    return (\n        <span\n            title={\n                \"Set which user you are currently logged in as. This is only available when the server is running in debug mode.\"\n            }\n            className=\"logged-in-as-container\"\n        >\n            <label>Logged in as</label>\n            <Dropdown\n                onSelect={(i) => {\n                    setActiveUser(users[i]);\n                }}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n                alignRight\n            >\n                <Dropdown.Toggle split variant=\"dark\">\n                    {activeUser.utorid}{\" \"}\n                </Dropdown.Toggle>\n                <Dropdown.Menu flip={true}>\n                    {(users || []).map((user, i) => (\n                        <Dropdown.Item\n                            key={i}\n                            eventKey={\"\" + i}\n                            active={activeUser.utorid === user.utorid}\n                        >\n                            {user.utorid} ({(user.roles || []).join(\", \")})\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </span>\n    );\n}\n\nexport { ActiveUserButton };\n","import { RawUser } from \"../api/defs/types\";\nimport applicants from \"./applicants.json\";\nimport assignments from \"./assignments.json\";\nimport contractTemplates from \"./contract_templates.json\";\nimport instructors from \"./instructors.json\";\nimport positions from \"./positions.json\";\nimport sessions from \"./sessions.json\";\nimport users from \"./users.json\";\n\nexport const seedData = {\n    applicants,\n    assignments,\n    contractTemplates,\n    instructors,\n    positions,\n    sessions,\n    users: users as Omit<RawUser, \"id\">[],\n};\n","import { normalizeImport } from \"../../libs/import-export\";\nimport {\n    instructorsSelector,\n    upsertApplicant,\n    upsertAssignment,\n    upsertPosition,\n    upsertSession,\n    upsertInstructor,\n    upsertContractTemplate,\n    setActiveSession,\n    positionsSelector,\n    activeSessionSelector,\n    debugOnlyUpsertUser,\n} from \"../../api/actions\";\n\nimport {\n    positionSchema,\n    applicantSchema,\n    assignmentSchema,\n} from \"../../libs/schema\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Modal, ProgressBar, Dropdown } from \"react-bootstrap\";\nimport { useThunkDispatch } from \"../../libs/thunk-dispatch\";\nimport { prepareFull } from \"../../libs/import-export\";\nimport {\n    Applicant,\n    ContractTemplate,\n    MinimalAssignment,\n    MinimalPosition,\n    Session,\n} from \"../../api/defs/types\";\nimport { seedData } from \"../../mock_data\";\n\ntype PromiseOrVoidFunction = (...args: any[]) => Promise<any> | void;\n\nconst ident = () => {};\n\n/**\n * A button to automatically set up a mock session with contract_template and\n * instructors, and upsert positions, applicants, and assignments from mock data\n * JSON files in order.\n */\nexport function SeedDataMenu({\n    sessions = [],\n    fetchSessions = ident,\n}: {\n    sessions?: Session[];\n    fetchSessions: Function;\n}) {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const [confirmDialogVisible, setConfirmDialogVisible] = React.useState(\n        false\n    );\n    const [seedAction, _setSeedAction] = React.useState<PromiseOrVoidFunction>(\n        () => ident\n    );\n    const [inProgress, setInProgress] = React.useState(false);\n    const [stage, setStage] = React.useState(\"\");\n    const [progress, setProgress] = React.useState(0);\n    const dispatch = useThunkDispatch();\n    const instructors = useSelector(instructorsSelector);\n    const targetSession = useSelector(activeSessionSelector);\n    let session: Session | null;\n    let contractTemplates: ContractTemplate[] = [];\n    let positions = useSelector(positionsSelector);\n    let applicants: Applicant[] = [];\n    let count;\n    let total;\n\n    // If a function is passed to a `useSate` setter, it is evaluated.\n    // Since we want to set the state to a function, we need to wrap the setter,\n    // so that it does the right thing.\n    function setSeedAction(action: PromiseOrVoidFunction) {\n        _setSeedAction(() => action);\n    }\n\n    const seedActions = {\n        user: { name: `Users (${seedData.users.length})`, action: seedUsers },\n        session: { name: \"Session (1)\", action: seedSession },\n        contractTemplate: {\n            name: \"Contract Templates (2)\",\n            action: seedContractTemplate,\n        },\n        instructors10: {\n            name: \"Instructors (10)\",\n            action: () => seedInstructors(10),\n        },\n        instructors: {\n            name: `Instructors (${seedData.instructors.length})`,\n            action: seedInstructors,\n        },\n        position10: { name: \"Positions (10)\", action: () => seedPositions(10) },\n        position: {\n            name: `Positions (${seedData.positions.length})`,\n            action: seedPositions,\n        },\n        applicant10: {\n            name: \"Applicants (10)\",\n            action: () => seedApplicants(10),\n        },\n        applicant: {\n            name: `Applicants (${seedData.applicants.length})`,\n            action: seedApplicants,\n        },\n        assignment10: {\n            name: \"Assignments (10)\",\n            action: () => seedAssignments(10),\n        },\n        assignment: {\n            name: `Assignment (${seedData.assignments.length})`,\n            action: seedAssignments,\n        },\n        all: { name: \"All Data\", action: seedAll },\n    };\n\n    React.useEffect(() => {\n        // Whenever the dropdown is open, fetch a list of all existing sessions.\n        // This would normally not be a good idea, but since this button is only\n        // used in debug mode, it's okay.\n        if (dropdownVisible) {\n            fetchSessions();\n        }\n    }, [dropdownVisible, fetchSessions]);\n\n    async function seedSession() {\n        setStage(\"Session\");\n        setProgress(0);\n\n        if (targetSession === null) {\n            // create the mock session\n            const mockSessionData = {\n                start_date: \"2020/01/01\",\n                end_date: \"2021/12/31\",\n                name: `Session ${new Date().toLocaleString()}`,\n                rate1: 50,\n            };\n            session = await dispatch(upsertSession(mockSessionData));\n        } else {\n            // use the selected session\n            session = targetSession;\n        }\n\n        await dispatch(setActiveSession(session));\n\n        setProgress(100);\n    }\n\n    async function seedUsers(limit = 1000) {\n        setProgress(0);\n        setStage(\"Users\");\n        const users = seedData.users.slice(0, limit);\n        count = 0;\n        for (const user of users) {\n            await dispatch(debugOnlyUpsertUser(user));\n            count++;\n            setProgress(Math.round((count / users.length) * 100));\n        }\n        setProgress(100);\n    }\n\n    async function seedContractTemplate() {\n        setProgress(0);\n        setStage(\"Contract Template\");\n        const contractTemplate = await dispatch(\n            upsertContractTemplate(seedData.contractTemplates[0])\n        );\n        contractTemplates.push(contractTemplate);\n        setProgress(100);\n    }\n\n    async function seedInstructors(limit = 1000) {\n        setStage(\"Instructors\");\n        setProgress(0);\n        for (let instructor of seedData.instructors.slice(0, limit)) {\n            if (\n                !instructors.some((inst) => inst.utorid === instructor.utorid)\n            ) {\n                const newInstructor = await dispatch(\n                    upsertInstructor(instructor)\n                );\n                instructors.push(newInstructor);\n            }\n        }\n        setProgress(100);\n    }\n\n    async function seedPositions(limit = 1000) {\n        setStage(\"Positions\");\n        setProgress(0);\n        count = 0;\n        total = seedData.positions.length;\n        const data = (normalizeImport(\n            {\n                fileType: \"json\",\n                data: seedData.positions,\n            },\n            positionSchema\n        ) as MinimalPosition[]).map((position) =>\n            prepareFull.position(position, {\n                instructors,\n                contractTemplates,\n            })\n        );\n        for (const position of data.slice(0, limit)) {\n            await dispatch(upsertPosition(position));\n            count++;\n            setProgress(Math.round((count / total) * 100));\n        }\n    }\n\n    async function seedApplicants(limit = 1000) {\n        setStage(\"Applicants\");\n        setProgress(0);\n        count = 0;\n        total = seedData.applicants.length;\n        const data = normalizeImport(\n            {\n                fileType: \"json\",\n                data: seedData.applicants,\n            },\n            applicantSchema\n        );\n        for (const a of data.slice(0, limit)) {\n            const applicant = await dispatch(upsertApplicant(a));\n            applicants.push(applicant);\n            count++;\n            setProgress(Math.round((count / total) * 100));\n        }\n    }\n\n    async function seedAssignments(limit = 1000) {\n        setStage(\"Assignments\");\n        setProgress(0);\n        if (!session) {\n            throw new Error(\"Need a valid session to continue\");\n        }\n        count = 0;\n        total = seedData.assignments.length;\n        const data = (normalizeImport(\n            {\n                fileType: \"json\",\n                data: seedData.assignments,\n            },\n            assignmentSchema\n        ) as MinimalAssignment[]).map((assignment) => {\n            if (!session) {\n                throw new Error(\"Need a valid session to continue\");\n            }\n            return prepareFull.assignment(assignment, {\n                positions,\n                applicants,\n                session,\n            });\n        });\n        for (const a of data.slice(0, limit)) {\n            await dispatch(upsertAssignment(a));\n            count++;\n            setProgress(Math.round((count / total) * 100));\n        }\n    }\n\n    async function seedAll() {\n        try {\n            setConfirmDialogVisible(false);\n            setInProgress(true);\n\n            await seedSession();\n            await seedContractTemplate();\n            await seedInstructors();\n            await seedPositions();\n            await seedApplicants();\n            await seedAssignments();\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setInProgress(false);\n        }\n    }\n\n    function onSelectHandler(eventKey: string | null) {\n        setSeedAction(\n            seedActions[eventKey as keyof typeof seedActions]?.action || ident\n        );\n        setConfirmDialogVisible(true);\n    }\n\n    return (\n        <span\n            title=\"Load seed data. If a new session is not specified, the active session is used.\"\n            className=\"mock-button\"\n        >\n            <Dropdown\n                onSelect={onSelectHandler}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n                alignRight\n            >\n                <Dropdown.Toggle split variant=\"dark\">\n                    Seed Data{\" \"}\n                </Dropdown.Toggle>\n                <Dropdown.Menu flip={true}>\n                    <Dropdown.Header>\n                        Load seed data into current session\n                    </Dropdown.Header>\n                    {Object.keys(seedActions).map((key: string) => (\n                        <Dropdown.Item key={key} eventKey={key}>\n                            {seedActions[key as keyof typeof seedActions].name}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n\n            <Modal\n                show={confirmDialogVisible}\n                onHide={() => {\n                    setConfirmDialogVisible(false);\n                }}\n                size=\"lg\"\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Loading Seed Data</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {targetSession === null ? (\n                        \"Are you sure to create a new session and load mock data?\"\n                    ) : (\n                        <React.Fragment>\n                            Are you sure to load mock data into the session{\" \"}\n                            <b>{targetSession.name}</b>?\n                        </React.Fragment>\n                    )}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => {\n                            setConfirmDialogVisible(false);\n                        }}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={async () => {\n                            try {\n                                setConfirmDialogVisible(false);\n                                setInProgress(true);\n                                await seedAction();\n                            } catch (e) {\n                                console.log(e);\n                            } finally {\n                                setInProgress(false);\n                            }\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal show={inProgress} size=\"lg\">\n                <Modal.Header>\n                    <Modal.Title>{`Upserting mock ${stage}`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <ProgressBar\n                        now={progress}\n                        label={`${progress}%`}\n                        style={{ minWidth: \"90%\" }}\n                    />\n                </Modal.Body>\n            </Modal>\n        </span>\n    );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { NavLink, Switch, Route } from \"react-router-dom\";\n\nimport \"./main.css\";\nimport \"../../components/components.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { ToggleMockApi } from \"./mockAPI\";\n\nimport \"swagger-ui-react/swagger-ui.css\";\nimport { mockApiRoutesAsSwaggerPaths } from \"../../api/defs/doc-generation\";\nimport { mockAPI } from \"../../api/mockAPI\";\nimport {\n    setMockAPIState,\n    usersSelector,\n    activeUserSelector,\n    debugOnlySetActiveUser,\n    debugOnlyFetchUsers,\n    sessionsSelector,\n    fetchSessions,\n} from \"../../api/actions\";\nimport { ActiveUserButton } from \"./active-user-switch\";\nimport { SeedDataMenu } from \"./load-mock-data\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\n// We don't need SwaggerUI all the time, so load it lazily.\nconst SwaggerUI = React.lazy(() => import(\"swagger-ui-react\"));\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nfunction BootstrapNavLink(props) {\n    return (\n        <Nav.Link\n            as={NavLink}\n            activeClassName=\"bg-warning text-dark\"\n            to={props.to}\n        >\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string,\n};\n\nconst swaggerData = {\n    openapi: \"3.0.0\",\n    info: {\n        description:\n            \"TAPP is a program for TA management--for making TA assignments and distributing TA contracts.\",\n        title: \"TAPP\",\n    },\n    servers: [\n        { url: \"/api/v1/admin\" },\n        { url: \"/api/v1/instructor\" },\n        { url: \"/api/v1/ta\" },\n        { url: \"/api/v1\" },\n        { url: \"/\" },\n    ],\n    paths: {\n        /* XXX this is hear temporarily to serve as an example for generating Swagger (openapi) documentation\n        \"/bob\": {\n            get: {\n                summary: \"Bob's summary\",\n                tags: [\"helpful\"],\n                produces: \"application/json\",\n                responses: {\n                    default: {\n                        description: \"OK\",\n                        content: {\n                            \"application/json\": {\n                                schema: {\n                                    type: \"object\",\n                                    properties: {\n                                        status: {\n                                            type: \"string\",\n                                            enum: [\"success\", \"error\"]\n                                        },\n                                        message: { type: \"string\" },\n                                        payload: {\n                                            type: \"array\",\n                                            items: {\n                                                type: \"object\",\n                                                properties: {\n                                                    name: { type: \"string\" }\n                                                },\n                                                required: [\"name\"]\n                                            }\n                                        }\n                                    },\n                                    required: [\"status\"]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n*/\n        ...mockApiRoutesAsSwaggerPaths(mockAPI),\n    },\n};\n\nconst ConnectedActiveUserButton = connect(\n    (state) => ({\n        activeUser: activeUserSelector(state),\n        users: usersSelector(state),\n    }),\n    { fetchUsers: debugOnlyFetchUsers, setActiveUser: debugOnlySetActiveUser }\n)(ActiveUserButton);\n\n// When toggled, `ToggleMockApi` will try\n// to refetch all the sessions, so pass it an\n// appropriate dispatcher.\nconst ConnectedToggleMockApi = connect(null, { setMockAPIState })(\n    ToggleMockApi\n);\n\nconst ConnectedLoadMockButton = connect(\n    (state) => ({ sessions: sessionsSelector(state) }),\n    { fetchSessions }\n)(SeedDataMenu);\n\nfunction DevFrame(props) {\n    return (\n        <div id=\"dev-frame\" className=\"bg-info\">\n            <div id=\"dev-frame-header\">\n                <Navbar expand variant=\"dark\">\n                    <Navbar.Brand\n                        href=\"#/\"\n                        title=\"View TAPP in development mode in a framed window.\"\n                    >\n                        Dev Mode\n                    </Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/api-docs\">\n                            API Docs\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <ConnectedLoadMockButton />\n                        <ConnectedActiveUserButton />\n                        <ConnectedToggleMockApi />\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n            <div id=\"dev-frame-body\">\n                <div id=\"dev-frame-body-inner\">\n                    <Switch>\n                        <Route path=\"/api-docs\">\n                            <React.Suspense fallback=\"Loading...\">\n                                <SwaggerUI\n                                    spec={swaggerData}\n                                    docExpansion=\"list\"\n                                />\n                            </React.Suspense>\n                        </Route>\n                        <Route>\n                            <ErrorBoundary\n                                FallbackComponent={\n                                    \"There was an error when rendering. See console for details.\"\n                                }\n                                onError={console.error}\n                            >\n                                {props.children}\n                            </ErrorBoundary>\n                        </Route>\n                    </Switch>\n                </div>\n            </div>\n            <div id=\"dev-frame-footer\"></div>\n        </div>\n    );\n}\n\nexport { DevFrame };\n","import {\n    FETCH_ONE_OFFER_SUCCESS,\n    SET_OFFER_ACCEPTED_SUCCESS,\n    SET_OFFER_REJECTED_SUCCESS,\n    OFFER_CREATE_SUCCESS,\n    OFFER_EMAIL_SUCCESS,\n    OFFER_NAG_SUCCESS,\n    OFFER_WITHDRAW_SUCCESS,\n    FETCH_OFFERS_FOR_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { fetchError } from \"./errors\";\nimport { actionFactory, HasId, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/api-utils\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\nimport { Assignment, RawOffer } from \"../defs/types\";\n\n// actions\n// XXX These actions don't actually do anything ATM; They're here in case we want to incorporate\n// this information into the reducer at some point.\nexport const fetchOfferSuccess = actionFactory<RawOffer>(\n    FETCH_ONE_OFFER_SUCCESS\n);\nexport const setOfferAcceptedSuccess = actionFactory<RawOffer>(\n    SET_OFFER_ACCEPTED_SUCCESS\n);\nexport const setOfferRejectedSuccess = actionFactory<RawOffer>(\n    SET_OFFER_REJECTED_SUCCESS\n);\nexport const offerCreateSuccess = actionFactory<RawOffer>(OFFER_CREATE_SUCCESS);\nexport const offerEmailSuccess = actionFactory<RawOffer>(OFFER_EMAIL_SUCCESS);\nexport const offerNagSuccess = actionFactory<RawOffer>(OFFER_NAG_SUCCESS);\nexport const offerWithdrawSuccess = actionFactory<RawOffer>(\n    OFFER_WITHDRAW_SUCCESS\n);\n\nexport const fetchOffersForAssignmentSuccess = actionFactory<{\n    assignment_id: number;\n    offers: RawOffer[];\n}>(FETCH_OFFERS_FOR_ASSIGNMENT_SUCCESS);\n\n// dispatchers\nexport const fetchOfferHistoryForAssignment = validatedApiDispatcher({\n    name: \"fetchOfferHistoryForAssignment\",\n    description:\n        \"Fetch the history of all offers associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: assignmentId } = payload;\n        const data = (await apiGET(\n            `/${role}/assignments/${assignmentId}/active_offer/history`\n        )) as RawOffer[];\n        dispatch(\n            fetchOffersForAssignmentSuccess({\n                assignment_id: assignmentId,\n                offers: data,\n            })\n        );\n    },\n});\nexport const fetchActiveOfferForAssignment = validatedApiDispatcher({\n    name: \"fetchActiveOfferForAssignment\",\n    description: \"Fetch an offer associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload: HasId) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = (await apiGET(\n            `/${role}/assignments/${payload.id}/active_offer`\n        )) as RawOffer;\n        dispatch(fetchOfferSuccess(data));\n        return data;\n    },\n});\n\nexport const setOfferForAssignmentAccepted = validatedApiDispatcher({\n    name: \"setOfferForAssignmentAccepted\",\n    description: \"Set an offer as accepted\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment: Assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/accept`\n        );\n        dispatch(setOfferAcceptedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const setOfferForAssignmentRejected = validatedApiDispatcher({\n    name: \"setOfferForAssignmentRejected\",\n    description: \"Set an offer as rejected\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment: Assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/reject`\n        );\n        dispatch(setOfferRejectedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentWithdraw = validatedApiDispatcher({\n    name: \"offerForAssignmentWithdraw\",\n    description: \"Withdraw an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment: Assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/withdraw`\n        );\n        dispatch(offerWithdrawSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentCreate = validatedApiDispatcher({\n    name: \"offerForAssignmentCreate\",\n    description: \"Create an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment: Assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/create`\n        );\n        dispatch(offerCreateSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentEmail = validatedApiDispatcher({\n    name: \"offerForAssignmentEmail\",\n    description: \"Email an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment: Assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/email`\n        );\n        dispatch(offerEmailSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentNag = validatedApiDispatcher({\n    name: \"offerForAssignmentNag\",\n    description: \"Send a nag email for an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment: Assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/nag`\n        );\n        dispatch(offerNagSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n","/**\n * Tools for generating documentation\n */\n\nimport PropTypes from \"prop-types\";\nimport RouteParser from \"route-parser\";\nimport { generatePropTypes } from \"./prop-types\";\nimport { UserRole } from \"./types\";\n\nclass CallAtom {\n    name: string;\n    args?: any[];\n\n    constructor(prop: string, args?: any[]) {\n        this.name = prop;\n        this.args = args;\n    }\n    toString() {\n        if (this.args == null) {\n            return \"\" + this.name;\n        }\n        return \"\" + this.name + \"(\" + this.args.join(\", \") + \")\";\n    }\n}\nfunction createCallChain(chain: CallAtom[] = [], prop: string, args?: any[]) {\n    return chain.concat([new CallAtom(prop, args)]);\n}\n/**\n * A proxy to wrap `PropTypes` so that the call chain can be recorded.\n * For example, `PropTypes.bool.isRequired` would have the added method `.callChain`\n * which would return an array of `CallAtom` objects consisting of `bool` and `isRequired`.\n * This can be used to generate documentation from existing proptype definitions.\n *\n * @param {*} innerObj\n * @param {*} [callChain=[]]\n * @returns\n */\nfunction propTypesProxy<T extends object | Function>(\n    innerObj: T,\n    callChain: CallAtom[] = []\n) {\n    const handler: ProxyHandler<T> = {\n        get(obj, prop: string, receiver) {\n            if (prop === \"callChain\") {\n                return callChain;\n            } else if (prop === \"toJSON\") {\n                return () => callChain;\n            }\n            const ret = Reflect.get(obj, prop, receiver);\n            if (ret instanceof Object) {\n                return propTypesProxy(ret, createCallChain(callChain, prop));\n            }\n            return ret;\n        },\n        apply(obj, thisArg, args) {\n            const lastProp = callChain.pop() || { name: \"<root>\" };\n            const ret = Reflect.apply(obj as any, thisArg, args);\n            if (ret instanceof Object) {\n                return propTypesProxy(\n                    ret,\n                    createCallChain(callChain, lastProp.name, args)\n                );\n            }\n            return ret;\n        },\n        ownKeys(obj) {\n            return [...Reflect.ownKeys(obj), \"callChain\", \"toJSON\"];\n        },\n    };\n\n    return new Proxy(innerObj, handler);\n}\nconst wrappedPropTypes = propTypesProxy(PropTypes);\n/**\n * PropType definitions for the API that have been wrapped in\n * a proxy so they can be converted into documentation.\n */\nconst docApiPropTypes = generatePropTypes(wrappedPropTypes);\n\nconst PROPTYPES_TO_SWAGGER_TYPES = {\n    string: \"string\",\n    number: \"number\",\n    bool: \"boolean\",\n    object: \"object\",\n    array: \"array\",\n    any: {},\n};\n\nfunction wrappedPropTypesToSwagger(pt: any) {\n    const ret: Record<string, any> = {};\n    if (!pt.callChain) {\n        // eslint-disable-next-line\n        console.warn(\n            \"Attempting to compute swagger values for non-wrapped object\",\n            pt\n        );\n    } else {\n        // We are a proxied PropTypes object\n        //\n        // PropTypes calls can be at most two long with the second argument\n        // being `.isRequired`\n        const [type, isRequired] = pt.callChain;\n        const requiredList = [];\n        if (isRequired) {\n            ret[\"required\"] = true;\n        }\n        if (type.args) {\n            // in this case, we were a PropTypes function called with some arguments\n            switch (type.name) {\n                case \"shape\":\n                    // in this case we're passing in an object with properties to be validated\n                    ret[\"type\"] = \"object\";\n                    ret[\"properties\"] = {};\n                    for (const [key, val] of Object.entries(type.args[0])) {\n                        const swaggerVal = wrappedPropTypesToSwagger(val);\n                        if (swaggerVal[\"required\"]) {\n                            // Required properties in swagger must be listed up-front (i.e., as a list\n                            // of property names, not as an attribute of an individual property),\n                            // so hoist them.\n                            requiredList.push(key);\n                            delete swaggerVal[\"required\"];\n                        }\n                        ret[\"properties\"][key] = swaggerVal;\n                    }\n                    if (requiredList.length > 0) {\n                        ret[\"required\"] = requiredList;\n                    }\n                    break;\n                case \"arrayOf\":\n                    ret[\"type\"] = \"array\";\n                    ret[\"items\"] = wrappedPropTypesToSwagger(type.args[0]);\n                    break;\n                case \"oneOf\":\n                    // XXX assuming `oneOf` is only used for strings\n                    ret[\"type\"] = \"string\";\n                    ret[\"enum\"] = type.args[0];\n                    break;\n                case \"oneOfType\":\n                    ret[\"oneOf\"] = type.args[0].map(wrappedPropTypesToSwagger);\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            if (type.name in PROPTYPES_TO_SWAGGER_TYPES) {\n                // in this case, we're a basic swagger type\n                ret[\"type\"] =\n                    PROPTYPES_TO_SWAGGER_TYPES[\n                        type.name as keyof typeof PROPTYPES_TO_SWAGGER_TYPES\n                    ];\n            }\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Wrap `payload` in a standard API response formatted\n * for openapi\n *\n * @param {object} payload\n * @returns {object}\n */\nfunction wrapInStandardApiResponseForSwagger(payload = { type: \"object\" }) {\n    return {\n        type: \"object\",\n        properties: {\n            status: {\n                type: \"string\",\n                enum: [\"success\", \"error\"],\n            },\n            message: { type: \"string\" },\n            payload,\n        },\n        required: [\"status\"],\n    };\n}\n\n/**\n * Take a path template in `\"route-parser\"`\n * form, e.g. `/sessions/:session_id`, and encode it for\n * consumption by swagger, e.g., `/sessions/{session_id}`.\n *\n * @param url\n * @returns\n */\nfunction urlTemplateToSwagger(url: string) {\n    // get the template variables\n    // using a trick: have the RouteParsers\n    // parse it's own template, giving us\n    // a list of variables in the process\n    const parsed = new RouteParser(url);\n    const templateVars = Object.keys(parsed.match((parsed as any).spec));\n    const subs: Record<string, string> = {};\n    for (const templateVar of templateVars) {\n        subs[templateVar] = \"{\" + templateVar + \"}\";\n    }\n    return { url: decodeURI(parsed.reverse(subs) || \"\"), templateVars };\n}\n\ninterface SwaggerDoc {\n    summary: string;\n    parameters: {\n        name: string;\n        in: string;\n        description: string;\n        required: boolean;\n    }[];\n    responses: {\n        default: {\n            content: { \"application/json\": { schema: any } };\n        };\n    };\n    requestBody: { content: { \"application/json\": { schema: any } } };\n    tags: string[];\n}\n\n/**\n * Convert the `docs` attribute from a callback that\n * has been documented with `documentCallback` into an openapi\n * object.\n *\n * @param docs\n * @param [templateVars=[]] - list of template variables in the route\n * @returns openapi object\n */\nfunction documentedCallbackToSwagger(\n    docs: DocumentCallbackArgs,\n    templateVars: string[] = []\n) {\n    const ret: SwaggerDoc = { responses: { default: {} } } as SwaggerDoc;\n    if (!docs) {\n        return ret;\n    }\n    // Routes are all prefixed. `admin` can access all routes.\n    // other routes are restricted depending on the list specified in `roles`.\n    const prefixRoles = [\"admin\", ...(docs.roles || [])];\n    ret.summary =\n        `(prefixes: ${prefixRoles.map((x) => \"/\" + x).join(\", \")}) ` +\n        docs.summary;\n    // If there are templateVars, they should become `parameters`\n    if (templateVars.length > 0) {\n        ret.parameters = templateVars.map((x) => ({\n            name: x,\n            in: \"path\",\n            description: x,\n            required: true,\n        }));\n    }\n    // `docs.returns` holds information about what the route will return\n    if (docs.returns) {\n        ret.responses.default = {\n            content: {\n                \"application/json\": {\n                    schema: wrapInStandardApiResponseForSwagger(\n                        wrappedPropTypesToSwagger(docs.returns) as any\n                    ),\n                },\n            },\n        };\n    }\n    // `docs.posts` holds information about what you can put in the\n    // requestBody\n    if (docs.posts) {\n        ret.requestBody = {\n            content: {\n                \"application/json\": {\n                    schema: wrappedPropTypesToSwagger(docs.posts),\n                },\n            },\n        };\n    }\n\n    return ret;\n}\n\n/**\n * Turn mockAPI routes into swagger-ui JSON object\n *\n * @param [mockAPI={}]\n * @returns openapi configuration\n */\nfunction mockApiRoutesAsSwaggerPaths(\n    mockAPI: {\n        getRoutes?: Record<string, ReturnType<typeof documentCallback>>;\n        postRoutes?: Record<string, ReturnType<typeof documentCallback>>;\n    } = {}\n) {\n    const { getRoutes = {}, postRoutes = {} } = mockAPI;\n    const ret: Record<string, Record<\"get\" | \"post\", SwaggerDoc>> = {} as any;\n    for (const [path, val] of Object.entries(getRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            get: documentedCallbackToSwagger(\n                val.docs as DocumentCallbackArgs,\n                templateVars\n            ),\n        });\n    }\n    for (const [path, val] of Object.entries(postRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            post: documentedCallbackToSwagger(\n                val.docs as DocumentCallbackArgs,\n                templateVars\n            ),\n        });\n    }\n\n    // The initial segment of each route is a \"tag\"; get a unique\n    // list of each of these tags and then for annotating the routes\n    const tags = Array.from(\n        new Set(\n            Object.keys(ret)\n                .map((x) => x.split(\"/\")[1])\n                .filter((x) => x)\n        )\n    );\n    // If a route contains one of the \"tags\", then it should be annotated\n    // accordingly (with each relevant tag)\n    for (const [path, info] of Object.entries(ret)) {\n        const applicableTags = tags.filter((x) => path.includes(x));\n        if (info.get && applicableTags.length > 0) {\n            info.get.tags = applicableTags;\n        }\n        if (info.post && applicableTags.length > 0) {\n            info.post.tags = applicableTags;\n        }\n    }\n\n    // Alphabetize the routes so they display in a sensible order.\n    const sortedRet: Record<string, any> = {};\n    for (const path of Object.keys(ret).sort()) {\n        sortedRet[path] = ret[path];\n    }\n\n    return sortedRet;\n}\n\nexport interface RouteParams {\n    role: \"admin\" | \"instructor\" | \"ta\";\n    [key: string]: string;\n}\n\ninterface DocumentCallbackArgs {\n    func: Function;\n    summary: string;\n    posts?: any;\n    returns?: any;\n    roles?: UserRole[];\n    exclude?: boolean;\n}\n\n/**\n * Document a function with attributes for auto-generating openapi\n * specifications from.\n *\n * @param {*} { func, exclude = false, ...attrs }\n * @returns\n */\nfunction documentCallback({\n    func,\n    exclude = false,\n    ...attrs\n}: DocumentCallbackArgs) {\n    // create a wrapped function that we can stuff attributes onto\n    const ret = <T>(...args: [T, ...any]) => func(...args);\n    ret.docs = {\n        exclude,\n        ...attrs,\n    };\n    return ret;\n}\n\nexport {\n    wrappedPropTypes,\n    wrappedPropTypesToSwagger,\n    urlTemplateToSwagger,\n    mockApiRoutesAsSwaggerPaths,\n    documentCallback,\n    docApiPropTypes,\n};\n","import { useDispatch } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../rootReducer\";\n\n/**\n * A properly typed version of `useDispatch` for use with TypeScript.\n * The types of the `dispatch` function returned by `useDispatch` don't\n * recognize when the dispatched object is an asynchronous thunk.\n * This means that the linter will claim that the `await` keyword is unneeded,\n * even though it is. This properly typed version fixes that issue.\n */\nexport const useThunkDispatch = useDispatch as () => ThunkDispatch<\n    RootState,\n    void,\n    AnyAction\n>;\n","import { error } from \"react-notification-system-redux\";\n\n// these properties are for `react-notification-system-redux`\nconst defaultNotifProps = {\n    position: \"tr\",\n    autoDismiss: 10,\n    title: \"Error\",\n} as const;\n\nexport const fetchError = (payload: string) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error fetching data\",\n        message: payload,\n    });\n\nexport const upsertError = (payload: string) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error updating/inserting data\",\n        message: payload,\n    });\n\nexport const deleteError = (payload: string) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error deleting data\",\n        message: payload,\n    });\n\n// General error for when a more specific error\n// type is not known\nexport const apiError = (payload: string) =>\n    error({\n        ...defaultNotifProps,\n        title: \"API Error\",\n        message: payload,\n    });\n"],"sourceRoot":""}